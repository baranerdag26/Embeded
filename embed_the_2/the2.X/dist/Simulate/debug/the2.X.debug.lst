

Microchip MPLAB XC8 Assembler V2.30 build 20200825195618 
                                                                                               Tue Apr 23 00:00:33 2024

Microchip MPLAB XC8 C Compiler v2.30 (Free license) build 20200825195618 Og1 
     1                           	processor	18F8722
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    30                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    31                           	psect	text16,global,reloc=2,class=CODE,delta=1
    32                           	psect	text17,global,reloc=2,class=CODE,delta=1
    33                           	psect	text18,global,reloc=2,class=CODE,delta=1
    34                           	psect	text19,global,reloc=2,class=CODE,delta=1
    35                           	psect	text20,global,reloc=2,class=CODE,delta=1
    36                           	psect	text21,global,reloc=2,class=CODE,delta=1
    37                           	psect	text22,global,reloc=2,class=CODE,delta=1
    38                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    39                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    40                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    41                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    42  0000                     
    43                           ; Version 2.20
    44                           ; Generated 12/02/2020 GMT
    45                           ; 
    46                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    47                           ; All rights reserved.
    48                           ; 
    49                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    50                           ; 
    51                           ; Redistribution and use in source and binary forms, with or without modification, are
    52                           ; permitted provided that the following conditions are met:
    53                           ; 
    54                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    55                           ;        conditions and the following disclaimer.
    56                           ; 
    57                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    58                           ;        of conditions and the following disclaimer in the documentation and/or other
    59                           ;        materials provided with the distribution.
    60                           ; 
    61                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    62                           ;        software without specific prior written permission.
    63                           ; 
    64                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    65                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    66                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    67                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    68                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    69                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    70                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    71                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    72                           ; 
    73                           ; 
    74                           ; Code-generator required, PIC18F8722 Definitions
    75                           ; 
    76                           ; SFR Addresses
    77  0000                     
    78                           	psect	idataCOMRAM
    79  002620                     __pidataCOMRAM:
    80                           	callstack 0
    81                           
    82                           ;initializer for _can_submit
    83  002620  0001               	dw	1
    84                           
    85                           ;initializer for _prev_piece
    86  002622  0002               	dw	2
    87                           
    88                           	psect	smallconst
    89  001000                     __psmallconst:
    90                           	callstack 0
    91  001000  00                 	db	0
    92  001001                     _segmentCodes:
    93                           	callstack 0
    94  001001  3F                 	db	63
    95  001002  06                 	db	6
    96  001003  5B                 	db	91
    97  001004  4F                 	db	79
    98  001005  66                 	db	102
    99  001006  6D                 	db	109
   100  001007  7D                 	db	125
   101  001008  07                 	db	7
   102  001009  7F                 	db	127
   103  00100A  6F                 	db	111
   104  00100B                     __end_of_segmentCodes:
   105                           	callstack 0
   106  00100B  00                 	db	0	; dummy byte at the end
   107  0000                     
   108                           	psect	nvCOMRAM
   109  000056                     __pnvCOMRAM:
   110                           	callstack 0
   111  000056                     _lastRBState:
   112                           	callstack 0
   113  000056                     	ds	1
   114  0000                     _PORTGbits	set	3974
   115  0000                     _PORTBbits	set	3969
   116  0000                     _PORTJ	set	3976
   117  0000                     _PORTH	set	3975
   118  0000                     _TRISJ	set	3994
   119  0000                     _TRISH	set	3993
   120  0000                     _PORTG	set	3974
   121  0000                     _LATG	set	3983
   122  0000                     _TRISG	set	3992
   123  0000                     _PORTF	set	3973
   124  0000                     _LATF	set	3982
   125  0000                     _TRISF	set	3991
   126  0000                     _PORTE	set	3972
   127  0000                     _LATE	set	3981
   128  0000                     _TRISE	set	3990
   129  0000                     _PORTD	set	3971
   130  0000                     _LATD	set	3980
   131  0000                     _TRISD	set	3989
   132  0000                     _PORTC	set	3970
   133  0000                     _LATC	set	3979
   134  0000                     _TRISC	set	3988
   135  0000                     _LATB	set	3978
   136  0000                     _PORTB	set	3969
   137  0000                     _TRISB	set	3987
   138  0000                     _PORTA	set	3968
   139  0000                     _LATA	set	3977
   140  0000                     _TRISA	set	3986
   141  0000                     _RCONbits	set	4048
   142  0000                     _TMR0H	set	4055
   143  0000                     _TMR0L	set	4054
   144  0000                     _T0CONbits	set	4053
   145  0000                     _INTCON3bits	set	4080
   146  0000                     _INTCONbits	set	4082
   147                           
   148                           ; #config settings
   149                           
   150                           	psect	cinit
   151  0024AC                     __pcinit:
   152                           	callstack 0
   153  0024AC                     start_initialization:
   154                           	callstack 0
   155  0024AC                     __initialization:
   156                           	callstack 0
   157                           
   158                           ; Initialize objects allocated to COMRAM (4 bytes)
   159                           ; load TBLPTR registers with __pidataCOMRAM
   160  0024AC  0E20               	movlw	low __pidataCOMRAM
   161  0024AE  6EF6               	movwf	tblptrl,c
   162  0024B0  0E26               	movlw	high __pidataCOMRAM
   163  0024B2  6EF7               	movwf	tblptrh,c
   164  0024B4  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   165  0024B6  6EF8               	movwf	tblptru,c
   166  0024B8  EE00  F052         	lfsr	0,__pdataCOMRAM
   167  0024BC  EE10 F004          	lfsr	1,4
   168  0024C0                     copy_data0:
   169  0024C0  0009               	tblrd		*+
   170  0024C2  CFF5 FFEE          	movff	tablat,postinc0
   171  0024C6  50E5               	movf	postdec1,w,c
   172  0024C8  50E1               	movf	fsr1l,w,c
   173  0024CA  E1FA               	bnz	copy_data0
   174                           
   175                           ; Clear objects allocated to BANK0 (10 bytes)
   176  0024CC  EE00  F082         	lfsr	0,__pbssBANK0
   177  0024D0  0E0A               	movlw	10
   178  0024D2                     clear_0:
   179  0024D2  6AEE               	clrf	postinc0,c
   180  0024D4  06E8               	decf	wreg,f,c
   181  0024D6  E1FD               	bnz	clear_0
   182                           
   183                           ; Clear objects allocated to COMRAM (37 bytes)
   184  0024D8  EE00  F02D         	lfsr	0,__pbssCOMRAM
   185  0024DC  0E25               	movlw	37
   186  0024DE                     clear_1:
   187  0024DE  6AEE               	clrf	postinc0,c
   188  0024E0  06E8               	decf	wreg,f,c
   189  0024E2  E1FD               	bnz	clear_1
   190  0024E4                     end_of_initialization:
   191                           	callstack 0
   192  0024E4                     __end_of__initialization:
   193                           	callstack 0
   194  0024E4  9057               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   195  0024E6  9257               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   196  0024E8  0E00               	movlw	low (__Lsmallconst shr (0+16))
   197  0024EA  6EF8               	movwf	tblptru,c
   198  0024EC  0E10               	movlw	high __Lsmallconst
   199  0024EE  6EF7               	movwf	tblptrh,c
   200  0024F0  0100               	movlb	0
   201  0024F2  EFF8  F012         	goto	_main	;jump to C main() function
   202                           
   203                           	psect	bssCOMRAM
   204  00002D                     __pbssCOMRAM:
   205                           	callstack 0
   206  00002D                     _active_piece_record:
   207                           	callstack 0
   208  00002D                     	ds	4
   209  000031                     _active_piece:
   210                           	callstack 0
   211  000031                     	ds	4
   212  000035                     _rotate_counter:
   213                           	callstack 0
   214  000035                     	ds	2
   215  000037                     _is_active:
   216                           	callstack 0
   217  000037                     	ds	2
   218  000039                     _LATF_flag:
   219                           	callstack 0
   220  000039                     	ds	2
   221  00003B                     _LATE_flag:
   222                           	callstack 0
   223  00003B                     	ds	2
   224  00003D                     _LATD_flag:
   225                           	callstack 0
   226  00003D                     	ds	2
   227  00003F                     _LATC_flag:
   228                           	callstack 0
   229  00003F                     	ds	2
   230  000041                     _two_seconds_counter:
   231                           	callstack 0
   232  000041                     	ds	2
   233  000043                     _blink_flag:
   234                           	callstack 0
   235  000043                     	ds	2
   236  000045                     _port_c_decimal:
   237                           	callstack 0
   238  000045                     	ds	2
   239  000047                     _buttonCount:
   240                           	callstack 0
   241  000047                     	ds	1
   242  000048                     _buttonState:
   243                           	callstack 0
   244  000048                     	ds	1
   245  000049                     _LATF_old:
   246                           	callstack 0
   247  000049                     	ds	1
   248  00004A                     _LATE_old:
   249                           	callstack 0
   250  00004A                     	ds	1
   251  00004B                     _LATD_old:
   252                           	callstack 0
   253  00004B                     	ds	1
   254  00004C                     _LATC_old:
   255                           	callstack 0
   256  00004C                     	ds	1
   257  00004D                     _LATF_value:
   258                           	callstack 0
   259  00004D                     	ds	1
   260  00004E                     _LATE_value:
   261                           	callstack 0
   262  00004E                     	ds	1
   263  00004F                     _LATD_value:
   264                           	callstack 0
   265  00004F                     	ds	1
   266  000050                     _LATC_value:
   267                           	callstack 0
   268  000050                     	ds	1
   269  000051                     _prevB:
   270                           	callstack 0
   271  000051                     	ds	1
   272                           
   273                           	psect	dataCOMRAM
   274  000052                     __pdataCOMRAM:
   275                           	callstack 0
   276  000052                     _can_submit:
   277                           	callstack 0
   278  000052                     	ds	2
   279  000054                     _prev_piece:
   280                           	callstack 0
   281  000054                     	ds	2
   282                           
   283                           	psect	bssBANK0
   284  000082                     __pbssBANK0:
   285                           	callstack 0
   286  000082                     _active_piece_first:
   287                           	callstack 0
   288  000082                     	ds	4
   289  000086                     _total_pieces:
   290                           	callstack 0
   291  000086                     	ds	2
   292  000088                     check_buttons_rg@buttonCount:
   293                           	callstack 0
   294  000088                     	ds	1
   295  000089                     check_buttons_rg@state:
   296                           	callstack 0
   297  000089                     	ds	1
   298  00008A                     _Temp_Press:
   299                           	callstack 0
   300  00008A                     	ds	1
   301  00008B                     _Button_Press:
   302                           	callstack 0
   303  00008B                     	ds	1
   304                           
   305                           	psect	cstackBANK0
   306  000060                     __pcstackBANK0:
   307                           	callstack 0
   308  000060                     ?___awdiv:
   309                           	callstack 0
   310  000060                     ?___awmod:
   311                           	callstack 0
   312  000060                     displayDigit@digit:
   313                           	callstack 0
   314  000060                     ___awdiv@dividend:
   315                           	callstack 0
   316  000060                     ___awmod@dividend:
   317                           	callstack 0
   318  000060                     parse_and_assign@value:
   319                           	callstack 0
   320                           
   321                           ; 4 bytes @ 0x0
   322  000060                     	ds	2
   323  000062                     displayDigit@position:
   324                           	callstack 0
   325  000062                     ___awdiv@divisor:
   326                           	callstack 0
   327  000062                     ___awmod@divisor:
   328                           	callstack 0
   329                           
   330                           ; 2 bytes @ 0x2
   331  000062                     	ds	1
   332  000063                     ??_displayDigit:
   333                           
   334                           ; 1 bytes @ 0x3
   335  000063                     	ds	1
   336  000064                     ___awdiv@counter:
   337                           	callstack 0
   338  000064                     ___awmod@counter:
   339                           	callstack 0
   340  000064                     parse_and_assign@ports:
   341                           	callstack 0
   342                           
   343                           ; 2 bytes @ 0x4
   344  000064                     	ds	1
   345  000065                     ___awdiv@sign:
   346                           	callstack 0
   347  000065                     ___awmod@sign:
   348                           	callstack 0
   349                           
   350                           ; 1 bytes @ 0x5
   351  000065                     	ds	1
   352  000066                     ??_move_down:
   353  000066                     ??_move_right:
   354  000066                     ??_move_left:
   355  000066                     ??_move_up:
   356  000066                     ___awdiv@quotient:
   357                           	callstack 0
   358  000066                     show_piece@ports:
   359                           	callstack 0
   360                           
   361                           ; 4 bytes @ 0x6
   362  000066                     	ds	2
   363  000068                     displayNumber@number:
   364                           	callstack 0
   365                           
   366                           ; 2 bytes @ 0x8
   367  000068                     	ds	2
   368  00006A                     displayNumber@tens:
   369                           	callstack 0
   370                           
   371                           ; 2 bytes @ 0xA
   372  00006A                     	ds	2
   373  00006C                     displayNumber@units:
   374                           	callstack 0
   375                           
   376                           ; 2 bytes @ 0xC
   377  00006C                     	ds	14
   378  00007A                     move_right@temp2:
   379                           	callstack 0
   380  00007A                     move_up@ports:
   381                           	callstack 0
   382  00007A                     move_down@ports:
   383                           	callstack 0
   384                           
   385                           ; 4 bytes @ 0x1A
   386  00007A                     	ds	1
   387  00007B                     move_right@temp1:
   388                           	callstack 0
   389  00007B                     move_left@temp2:
   390                           	callstack 0
   391                           
   392                           ; 1 bytes @ 0x1B
   393  00007B                     	ds	1
   394  00007C                     move_right@temp0:
   395                           	callstack 0
   396  00007C                     move_left@temp1:
   397                           	callstack 0
   398                           
   399                           ; 1 bytes @ 0x1C
   400  00007C                     	ds	1
   401  00007D                     move_right@ports:
   402                           	callstack 0
   403  00007D                     move_left@ports:
   404                           	callstack 0
   405                           
   406                           ; 4 bytes @ 0x1D
   407  00007D                     	ds	4
   408  000081                     check_buttons_rg@currentButtonRead:
   409                           	callstack 0
   410                           
   411                           ; 1 bytes @ 0x21
   412  000081                     	ds	1
   413  000082                     
   414                           ; 1 bytes @ 0x22
   415                           
   416                           	psect	cstackCOMRAM
   417  000001                     __pcstackCOMRAM:
   418                           	callstack 0
   419  000001                     ?i2___awmod:
   420                           	callstack 0
   421  000001                     i2___awmod@dividend:
   422                           	callstack 0
   423  000001                     i2parse_and_assign@value:
   424                           	callstack 0
   425                           
   426                           ; 4 bytes @ 0x0
   427  000001                     	ds	2
   428  000003                     i2___awmod@divisor:
   429                           	callstack 0
   430                           
   431                           ; 2 bytes @ 0x2
   432  000003                     	ds	2
   433  000005                     i2___awmod@counter:
   434                           	callstack 0
   435  000005                     i2parse_and_assign@ports:
   436                           	callstack 0
   437                           
   438                           ; 2 bytes @ 0x4
   439  000005                     	ds	1
   440  000006                     i2___awmod@sign:
   441                           	callstack 0
   442                           
   443                           ; 1 bytes @ 0x5
   444  000006                     	ds	1
   445  000007                     ??_rotate_piece:
   446  000007                     ??i2_move_down:
   447  000007                     submit_piece@ports:
   448                           	callstack 0
   449  000007                     i2show_piece@ports:
   450                           	callstack 0
   451                           
   452                           ; 4 bytes @ 0x6
   453  000007                     	ds	20
   454  00001B                     i2move_down@ports:
   455                           	callstack 0
   456                           
   457                           ; 4 bytes @ 0x1A
   458  00001B                     	ds	4
   459  00001F                     rotate_piece@temp:
   460                           	callstack 0
   461                           
   462                           ; 1 bytes @ 0x1E
   463  00001F                     	ds	1
   464  000020                     rotate_piece@temp_543:
   465                           	callstack 0
   466                           
   467                           ; 1 bytes @ 0x1F
   468  000020                     	ds	1
   469  000021                     rotate_piece@temp_544:
   470                           	callstack 0
   471                           
   472                           ; 1 bytes @ 0x20
   473  000021                     	ds	1
   474  000022                     rotate_piece@temp_545:
   475                           	callstack 0
   476                           
   477                           ; 1 bytes @ 0x21
   478  000022                     	ds	1
   479  000023                     rotate_piece@temp_546:
   480                           	callstack 0
   481                           
   482                           ; 1 bytes @ 0x22
   483  000023                     	ds	1
   484  000024                     rotate_piece@temp_547:
   485                           	callstack 0
   486                           
   487                           ; 1 bytes @ 0x23
   488  000024                     	ds	1
   489  000025                     rotate_piece@temp_549:
   490                           	callstack 0
   491                           
   492                           ; 1 bytes @ 0x24
   493  000025                     	ds	1
   494  000026                     rotate_piece@temp_550:
   495                           	callstack 0
   496                           
   497                           ; 1 bytes @ 0x25
   498  000026                     	ds	1
   499  000027                     rotate_piece@port:
   500                           	callstack 0
   501                           
   502                           ; 4 bytes @ 0x26
   503  000027                     	ds	4
   504  00002B                     ??_HandleInterrupt:
   505                           
   506                           ; 1 bytes @ 0x2A
   507  00002B                     	ds	2
   508                           
   509 ;;
   510 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   511 ;;
   512 ;; *************** function _main *****************
   513 ;; Defined at:
   514 ;;		line 767 in file "main.c"
   515 ;; Parameters:    Size  Location     Type
   516 ;;		None
   517 ;; Auto vars:     Size  Location     Type
   518 ;;		None
   519 ;; Return value:  Size  Location     Type
   520 ;;                  1    wreg      void 
   521 ;; Registers used:
   522 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   523 ;; Tracked objects:
   524 ;;		On entry : 0/0
   525 ;;		On exit  : 0/0
   526 ;;		Unchanged: 0/0
   527 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   528 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   529 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   530 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   531 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   532 ;;Total ram usage:        0 bytes
   533 ;; Hardware stack levels required when called:    6
   534 ;; This function calls:
   535 ;;		_Init
   536 ;;		_InitializeTimerAndInterrupts
   537 ;;		_check_buttons_rg
   538 ;;		_displayNumber
   539 ;;		_show_piece
   540 ;;		_spawn_piece
   541 ;; This function is called by:
   542 ;;		Startup code after reset
   543 ;; This function uses a non-reentrant model
   544 ;;
   545                           
   546                           	psect	text0
   547  0025F0                     __ptext0:
   548                           	callstack 0
   549  0025F0                     _main:
   550                           	callstack 25
   551  0025F0                     
   552                           ;main.c: 769:     Init();
   553  0025F0  ECF0  F011         	call	_Init	;wreg free
   554                           
   555                           ;main.c: 774:     InitializeTimerAndInterrupts();
   556  0025F4  ECDF  F012         	call	_InitializeTimerAndInterrupts	;wreg free
   557  0025F8                     
   558                           ;main.c: 775:     TMR0L = 0x69;
   559  0025F8  0E69               	movlw	105
   560  0025FA  6ED6               	movwf	214,c	;volatile
   561  0025FC                     
   562                           ;main.c: 776:     TMR0H = 0x67;
   563  0025FC  0E67               	movlw	103
   564  0025FE  6ED7               	movwf	215,c	;volatile
   565  002600                     
   566                           ;main.c: 778:     spawn_piece();
   567  002600  EC4E  F011         	call	_spawn_piece	;wreg free
   568  002604                     l2650:
   569                           
   570                           ;main.c: 781:     {;main.c: 782:         check_buttons_rg();
   571  002604  ECF8  F00B         	call	_check_buttons_rg	;wreg free
   572  002608                     
   573                           ;main.c: 783:         show_piece();
   574  002608  EC68  F00A         	call	_show_piece	;wreg free
   575  00260C                     
   576                           ;main.c: 784:         displayNumber(total_pieces);
   577  00260C  C086  F068         	movff	_total_pieces,displayNumber@number
   578  002610  C087  F069         	movff	_total_pieces+1,displayNumber@number+1
   579  002614  EC25  F012         	call	_displayNumber	;wreg free
   580  002618  EF02  F013         	goto	l2650
   581  00261C  EF07  F000         	goto	start
   582  002620                     __end_of_main:
   583                           	callstack 0
   584                           
   585 ;; *************** function _spawn_piece *****************
   586 ;; Defined at:
   587 ;;		line 674 in file "main.c"
   588 ;; Parameters:    Size  Location     Type
   589 ;;		None
   590 ;; Auto vars:     Size  Location     Type
   591 ;;		None
   592 ;; Return value:  Size  Location     Type
   593 ;;                  1    wreg      void 
   594 ;; Registers used:
   595 ;;		wreg, status,2, status,0
   596 ;; Tracked objects:
   597 ;;		On entry : 0/0
   598 ;;		On exit  : 0/0
   599 ;;		Unchanged: 0/0
   600 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   601 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   602 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   603 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   604 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   605 ;;Total ram usage:        0 bytes
   606 ;; Hardware stack levels used:    1
   607 ;; Hardware stack levels required when called:    3
   608 ;; This function calls:
   609 ;;		Nothing
   610 ;; This function is called by:
   611 ;;		_main
   612 ;; This function uses a non-reentrant model
   613 ;;
   614                           
   615                           	psect	text1
   616  00229C                     __ptext1:
   617                           	callstack 0
   618  00229C                     _spawn_piece:
   619                           	callstack 27
   620  00229C                     
   621                           ;main.c: 677:     if (prev_piece == 2)
   622  00229C  0E02               	movlw	2
   623  00229E  1854               	xorwf	_prev_piece^0,w,c
   624  0022A0  1055               	iorwf	(_prev_piece+1)^0,w,c
   625  0022A2  A4D8               	btfss	status,2,c
   626  0022A4  EF56  F011         	goto	u2861
   627  0022A8  EF58  F011         	goto	u2860
   628  0022AC                     u2861:
   629  0022AC  EF62  F011         	goto	l2582
   630  0022B0                     u2860:
   631  0022B0                     
   632                           ;main.c: 678:     {;main.c: 680:         active_piece = 0x01000000;
   633  0022B0  0E00               	movlw	0
   634  0022B2  6E31               	movwf	_active_piece^0,c
   635  0022B4  0E00               	movlw	0
   636  0022B6  6E32               	movwf	(_active_piece+1)^0,c
   637  0022B8  0E00               	movlw	0
   638  0022BA  6E33               	movwf	(_active_piece+2)^0,c
   639  0022BC  0E01               	movlw	1
   640  0022BE  6E34               	movwf	(_active_piece+3)^0,c
   641                           
   642                           ;main.c: 681:     }
   643  0022C0  EF86  F011         	goto	l277
   644  0022C4                     l2582:
   645  0022C4  0454               	decf	_prev_piece^0,w,c
   646  0022C6  1055               	iorwf	(_prev_piece+1)^0,w,c
   647  0022C8  A4D8               	btfss	status,2,c
   648  0022CA  EF69  F011         	goto	u2871
   649  0022CE  EF6B  F011         	goto	u2870
   650  0022D2                     u2871:
   651  0022D2  EF7E  F011         	goto	l2586
   652  0022D6                     u2870:
   653  0022D6                     
   654                           ;main.c: 683:     {;main.c: 685:         active_piece = 0x01030000;
   655  0022D6  0E00               	movlw	0
   656  0022D8  6E31               	movwf	_active_piece^0,c
   657  0022DA  0E00               	movlw	0
   658  0022DC  6E32               	movwf	(_active_piece+1)^0,c
   659  0022DE  0E03               	movlw	3
   660  0022E0  6E33               	movwf	(_active_piece+2)^0,c
   661  0022E2  0E01               	movlw	1
   662  0022E4  6E34               	movwf	(_active_piece+3)^0,c
   663                           
   664                           ;main.c: 686:         active_piece_first = 0x01030000;
   665  0022E6  0E00               	movlw	0
   666  0022E8  0100               	movlb	0	; () banked
   667  0022EA  6F82               	movwf	_active_piece_first& (0+255),b
   668  0022EC  0E00               	movlw	0
   669  0022EE  6F83               	movwf	(_active_piece_first+1)& (0+255),b
   670  0022F0  0E03               	movlw	3
   671  0022F2  6F84               	movwf	(_active_piece_first+2)& (0+255),b
   672  0022F4  0E01               	movlw	1
   673  0022F6  6F85               	movwf	(_active_piece_first+3)& (0+255),b
   674                           
   675                           ;main.c: 687:     }
   676  0022F8  EF86  F011         	goto	l277
   677  0022FC                     l2586:
   678                           
   679                           ;main.c: 689:     {;main.c: 691:         active_piece = 0x03030000;
   680  0022FC  0E00               	movlw	0
   681  0022FE  6E31               	movwf	_active_piece^0,c
   682  002300  0E00               	movlw	0
   683  002302  6E32               	movwf	(_active_piece+1)^0,c
   684  002304  0E03               	movlw	3
   685  002306  6E33               	movwf	(_active_piece+2)^0,c
   686  002308  0E03               	movlw	3
   687  00230A  6E34               	movwf	(_active_piece+3)^0,c
   688  00230C                     l277:
   689                           
   690                           ;main.c: 693:     is_active = 1;
   691  00230C  0E00               	movlw	0
   692  00230E  6E38               	movwf	(_is_active+1)^0,c
   693  002310  0E01               	movlw	1
   694  002312  6E37               	movwf	_is_active^0,c
   695  002314                     
   696                           ;main.c: 694:     active_piece_record = active_piece;
   697  002314  C031  F02D         	movff	_active_piece,_active_piece_record
   698  002318  C032  F02E         	movff	_active_piece+1,_active_piece_record+1
   699  00231C  C033  F02F         	movff	_active_piece+2,_active_piece_record+2
   700  002320  C034  F030         	movff	_active_piece+3,_active_piece_record+3
   701                           
   702                           ;main.c: 695:     rotate_counter = 0;
   703  002324  0E00               	movlw	0
   704  002326  6E36               	movwf	(_rotate_counter+1)^0,c
   705  002328  0E00               	movlw	0
   706  00232A  6E35               	movwf	_rotate_counter^0,c
   707  00232C                     
   708                           ;main.c: 696:     active_piece_first = active_piece;
   709  00232C  C031  F082         	movff	_active_piece,_active_piece_first
   710  002330  C032  F083         	movff	_active_piece+1,_active_piece_first+1
   711  002334  C033  F084         	movff	_active_piece+2,_active_piece_first+2
   712  002338  C034  F085         	movff	_active_piece+3,_active_piece_first+3
   713  00233C  0012               	return		;funcret
   714  00233E                     __end_of_spawn_piece:
   715                           	callstack 0
   716                           
   717 ;; *************** function _show_piece *****************
   718 ;; Defined at:
   719 ;;		line 699 in file "main.c"
   720 ;; Parameters:    Size  Location     Type
   721 ;;		None
   722 ;; Auto vars:     Size  Location     Type
   723 ;;  ports           4    6[BANK0 ] unsigned char [4]
   724 ;; Return value:  Size  Location     Type
   725 ;;                  1    wreg      void 
   726 ;; Registers used:
   727 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
   728 ;; Tracked objects:
   729 ;;		On entry : 0/0
   730 ;;		On exit  : 0/0
   731 ;;		Unchanged: 0/0
   732 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   733 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   734 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   735 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   736 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   737 ;;Total ram usage:        4 bytes
   738 ;; Hardware stack levels used:    1
   739 ;; Hardware stack levels required when called:    4
   740 ;; This function calls:
   741 ;;		_parse_and_assign
   742 ;; This function is called by:
   743 ;;		_main
   744 ;; This function uses a non-reentrant model
   745 ;;
   746                           
   747                           	psect	text2
   748  0014D0                     __ptext2:
   749                           	callstack 0
   750  0014D0                     _show_piece:
   751                           	callstack 26
   752  0014D0                     
   753                           ;main.c: 701:     uint8_t ports[4];;main.c: 702:     parse_and_assign(active_piece, port
      +                          s);
   754  0014D0  C031  F060         	movff	_active_piece,parse_and_assign@value
   755  0014D4  C032  F061         	movff	_active_piece+1,parse_and_assign@value+1
   756  0014D8  C033  F062         	movff	_active_piece+2,parse_and_assign@value+2
   757  0014DC  C034  F063         	movff	_active_piece+3,parse_and_assign@value+3
   758  0014E0  0E66               	movlw	low show_piece@ports
   759  0014E2  0100               	movlb	0	; () banked
   760  0014E4  6F64               	movwf	parse_and_assign@ports& (0+255),b
   761  0014E6  0E00               	movlw	high show_piece@ports
   762  0014E8  6F65               	movwf	(parse_and_assign@ports+1)& (0+255),b
   763  0014EA  ECA0  F012         	call	_parse_and_assign	;wreg free
   764  0014EE                     
   765                           ;main.c: 704:     LATC = ports[0] | LATC_value;
   766  0014EE  0100               	movlb	0	; () banked
   767  0014F0  5166               	movf	show_piece@ports& (0+255),w,b
   768  0014F2  1050               	iorwf	_LATC_value^0,w,c
   769  0014F4  6E8B               	movwf	139,c	;volatile
   770  0014F6                     
   771                           ; BSR set to: 0
   772                           ;main.c: 705:     LATD = ports[1] | LATD_value;
   773  0014F6  5167               	movf	(show_piece@ports+1)& (0+255),w,b
   774  0014F8  104F               	iorwf	_LATD_value^0,w,c
   775  0014FA  6E8C               	movwf	140,c	;volatile
   776  0014FC                     
   777                           ; BSR set to: 0
   778                           ;main.c: 706:     LATE = ports[2] | LATE_value;
   779  0014FC  5168               	movf	(show_piece@ports+2)& (0+255),w,b
   780  0014FE  104E               	iorwf	_LATE_value^0,w,c
   781  001500  6E8D               	movwf	141,c	;volatile
   782  001502                     
   783                           ; BSR set to: 0
   784                           ;main.c: 707:     LATF = ports[3] | LATF_value;
   785  001502  5169               	movf	(show_piece@ports+3)& (0+255),w,b
   786  001504  104D               	iorwf	_LATF_value^0,w,c
   787  001506  6E8E               	movwf	142,c	;volatile
   788  001508                     
   789                           ; BSR set to: 0
   790                           ;main.c: 710:     if ((ports[0] & LATC_value) && LATC_flag == 0)
   791  001508  5166               	movf	show_piece@ports& (0+255),w,b
   792  00150A  1450               	andwf	_LATC_value^0,w,c
   793  00150C  0900               	iorlw	0
   794  00150E  B4D8               	btfsc	status,2,c
   795  001510  EF8C  F00A         	goto	u2741
   796  001514  EF8E  F00A         	goto	u2740
   797  001518                     u2741:
   798  001518  EFA5  F00A         	goto	l283
   799  00151C                     u2740:
   800  00151C                     
   801                           ; BSR set to: 0
   802  00151C  503F               	movf	_LATC_flag^0,w,c
   803  00151E  1040               	iorwf	(_LATC_flag+1)^0,w,c
   804  001520  A4D8               	btfss	status,2,c
   805  001522  EF95  F00A         	goto	u2751
   806  001526  EF97  F00A         	goto	u2750
   807  00152A                     u2751:
   808  00152A  EFA5  F00A         	goto	l283
   809  00152E                     u2750:
   810  00152E                     
   811                           ; BSR set to: 0
   812                           ;main.c: 711:     {;main.c: 712:         LATC_flag = 1;
   813  00152E  0E00               	movlw	0
   814  001530  6E40               	movwf	(_LATC_flag+1)^0,c
   815  001532  0E01               	movlw	1
   816  001534  6E3F               	movwf	_LATC_flag^0,c
   817  001536                     
   818                           ; BSR set to: 0
   819                           ;main.c: 713:         LATC_old = LATC_value;
   820  001536  C050  F04C         	movff	_LATC_value,_LATC_old
   821  00153A                     
   822                           ; BSR set to: 0
   823                           ;main.c: 714:         LATC_value = PORTC & ~ports[0];
   824  00153A  5166               	movf	show_piece@ports& (0+255),w,b
   825  00153C  0AFF               	xorlw	255
   826  00153E  1482               	andwf	130,w,c	;volatile
   827  001540  6E50               	movwf	_LATC_value^0,c
   828  001542                     
   829                           ; BSR set to: 0
   830                           ;main.c: 715:         can_submit = 0;
   831  001542  0E00               	movlw	0
   832  001544  6E53               	movwf	(_can_submit+1)^0,c
   833  001546  0E00               	movlw	0
   834  001548  6E52               	movwf	_can_submit^0,c
   835  00154A                     l283:
   836                           
   837                           ; BSR set to: 0
   838                           ;main.c: 718:     if ((ports[1] & LATD_value) && LATD_flag == 0)
   839  00154A  5167               	movf	(show_piece@ports+1)& (0+255),w,b
   840  00154C  144F               	andwf	_LATD_value^0,w,c
   841  00154E  0900               	iorlw	0
   842  001550  B4D8               	btfsc	status,2,c
   843  001552  EFAD  F00A         	goto	u2761
   844  001556  EFAF  F00A         	goto	u2760
   845  00155A                     u2761:
   846  00155A  EFC6  F00A         	goto	l284
   847  00155E                     u2760:
   848  00155E                     
   849                           ; BSR set to: 0
   850  00155E  503D               	movf	_LATD_flag^0,w,c
   851  001560  103E               	iorwf	(_LATD_flag+1)^0,w,c
   852  001562  A4D8               	btfss	status,2,c
   853  001564  EFB6  F00A         	goto	u2771
   854  001568  EFB8  F00A         	goto	u2770
   855  00156C                     u2771:
   856  00156C  EFC6  F00A         	goto	l284
   857  001570                     u2770:
   858  001570                     
   859                           ; BSR set to: 0
   860                           ;main.c: 719:     {;main.c: 720:         LATD_flag = 1;
   861  001570  0E00               	movlw	0
   862  001572  6E3E               	movwf	(_LATD_flag+1)^0,c
   863  001574  0E01               	movlw	1
   864  001576  6E3D               	movwf	_LATD_flag^0,c
   865  001578                     
   866                           ; BSR set to: 0
   867                           ;main.c: 721:         LATD_old = LATD_value;
   868  001578  C04F  F04B         	movff	_LATD_value,_LATD_old
   869  00157C                     
   870                           ; BSR set to: 0
   871                           ;main.c: 722:         LATD_value = PORTD & ~ports[1];
   872  00157C  5167               	movf	(show_piece@ports+1)& (0+255),w,b
   873  00157E  0AFF               	xorlw	255
   874  001580  1483               	andwf	131,w,c	;volatile
   875  001582  6E4F               	movwf	_LATD_value^0,c
   876  001584                     
   877                           ; BSR set to: 0
   878                           ;main.c: 723:         can_submit = 0;
   879  001584  0E00               	movlw	0
   880  001586  6E53               	movwf	(_can_submit+1)^0,c
   881  001588  0E00               	movlw	0
   882  00158A  6E52               	movwf	_can_submit^0,c
   883  00158C                     l284:
   884                           
   885                           ; BSR set to: 0
   886                           ;main.c: 725:     if ((ports[2] & LATE_value) && LATE_flag == 0)
   887  00158C  5168               	movf	(show_piece@ports+2)& (0+255),w,b
   888  00158E  144E               	andwf	_LATE_value^0,w,c
   889  001590  0900               	iorlw	0
   890  001592  B4D8               	btfsc	status,2,c
   891  001594  EFCE  F00A         	goto	u2781
   892  001598  EFD0  F00A         	goto	u2780
   893  00159C                     u2781:
   894  00159C  EFE7  F00A         	goto	l285
   895  0015A0                     u2780:
   896  0015A0                     
   897                           ; BSR set to: 0
   898  0015A0  503B               	movf	_LATE_flag^0,w,c
   899  0015A2  103C               	iorwf	(_LATE_flag+1)^0,w,c
   900  0015A4  A4D8               	btfss	status,2,c
   901  0015A6  EFD7  F00A         	goto	u2791
   902  0015AA  EFD9  F00A         	goto	u2790
   903  0015AE                     u2791:
   904  0015AE  EFE7  F00A         	goto	l285
   905  0015B2                     u2790:
   906  0015B2                     
   907                           ; BSR set to: 0
   908                           ;main.c: 726:     {;main.c: 727:         LATE_flag = 1;
   909  0015B2  0E00               	movlw	0
   910  0015B4  6E3C               	movwf	(_LATE_flag+1)^0,c
   911  0015B6  0E01               	movlw	1
   912  0015B8  6E3B               	movwf	_LATE_flag^0,c
   913  0015BA                     
   914                           ; BSR set to: 0
   915                           ;main.c: 728:         LATE_old = LATE_value;
   916  0015BA  C04E  F04A         	movff	_LATE_value,_LATE_old
   917  0015BE                     
   918                           ; BSR set to: 0
   919                           ;main.c: 729:         LATE_value = PORTE & ~ports[2];
   920  0015BE  5168               	movf	(show_piece@ports+2)& (0+255),w,b
   921  0015C0  0AFF               	xorlw	255
   922  0015C2  1484               	andwf	132,w,c	;volatile
   923  0015C4  6E4E               	movwf	_LATE_value^0,c
   924  0015C6                     
   925                           ; BSR set to: 0
   926                           ;main.c: 730:         can_submit = 0;
   927  0015C6  0E00               	movlw	0
   928  0015C8  6E53               	movwf	(_can_submit+1)^0,c
   929  0015CA  0E00               	movlw	0
   930  0015CC  6E52               	movwf	_can_submit^0,c
   931  0015CE                     l285:
   932                           
   933                           ; BSR set to: 0
   934                           ;main.c: 732:     if ((ports[3] & LATF_value) && LATF_flag == 0)
   935  0015CE  5169               	movf	(show_piece@ports+3)& (0+255),w,b
   936  0015D0  144D               	andwf	_LATF_value^0,w,c
   937  0015D2  0900               	iorlw	0
   938  0015D4  B4D8               	btfsc	status,2,c
   939  0015D6  EFEF  F00A         	goto	u2801
   940  0015DA  EFF1  F00A         	goto	u2800
   941  0015DE                     u2801:
   942  0015DE  EF08  F00B         	goto	l286
   943  0015E2                     u2800:
   944  0015E2                     
   945                           ; BSR set to: 0
   946  0015E2  5039               	movf	_LATF_flag^0,w,c
   947  0015E4  103A               	iorwf	(_LATF_flag+1)^0,w,c
   948  0015E6  A4D8               	btfss	status,2,c
   949  0015E8  EFF8  F00A         	goto	u2811
   950  0015EC  EFFA  F00A         	goto	u2810
   951  0015F0                     u2811:
   952  0015F0  EF08  F00B         	goto	l286
   953  0015F4                     u2810:
   954  0015F4                     
   955                           ; BSR set to: 0
   956                           ;main.c: 733:     {;main.c: 734:         LATF_flag = 1;
   957  0015F4  0E00               	movlw	0
   958  0015F6  6E3A               	movwf	(_LATF_flag+1)^0,c
   959  0015F8  0E01               	movlw	1
   960  0015FA  6E39               	movwf	_LATF_flag^0,c
   961  0015FC                     
   962                           ; BSR set to: 0
   963                           ;main.c: 735:         LATF_old = LATF_value;
   964  0015FC  C04D  F049         	movff	_LATF_value,_LATF_old
   965  001600                     
   966                           ; BSR set to: 0
   967                           ;main.c: 736:         LATF_value = PORTF & ~ports[3];
   968  001600  5169               	movf	(show_piece@ports+3)& (0+255),w,b
   969  001602  0AFF               	xorlw	255
   970  001604  1485               	andwf	133,w,c	;volatile
   971  001606  6E4D               	movwf	_LATF_value^0,c
   972  001608                     
   973                           ; BSR set to: 0
   974                           ;main.c: 737:         can_submit = 0;
   975  001608  0E00               	movlw	0
   976  00160A  6E53               	movwf	(_can_submit+1)^0,c
   977  00160C  0E00               	movlw	0
   978  00160E  6E52               	movwf	_can_submit^0,c
   979  001610                     l286:
   980                           
   981                           ; BSR set to: 0
   982                           ;main.c: 741:     if (LATC_flag == 0 && LATD_flag == 0 && LATE_flag == 0 && LATF_flag ==
      +                           0)
   983  001610  503F               	movf	_LATC_flag^0,w,c
   984  001612  1040               	iorwf	(_LATC_flag+1)^0,w,c
   985  001614  A4D8               	btfss	status,2,c
   986  001616  EF0F  F00B         	goto	u2821
   987  00161A  EF11  F00B         	goto	u2820
   988  00161E                     u2821:
   989  00161E  EF30  F00B         	goto	l288
   990  001622                     u2820:
   991  001622                     
   992                           ; BSR set to: 0
   993  001622  503D               	movf	_LATD_flag^0,w,c
   994  001624  103E               	iorwf	(_LATD_flag+1)^0,w,c
   995  001626  A4D8               	btfss	status,2,c
   996  001628  EF18  F00B         	goto	u2831
   997  00162C  EF1A  F00B         	goto	u2830
   998  001630                     u2831:
   999  001630  EF30  F00B         	goto	l288
  1000  001634                     u2830:
  1001  001634                     
  1002                           ; BSR set to: 0
  1003  001634  503B               	movf	_LATE_flag^0,w,c
  1004  001636  103C               	iorwf	(_LATE_flag+1)^0,w,c
  1005  001638  A4D8               	btfss	status,2,c
  1006  00163A  EF21  F00B         	goto	u2841
  1007  00163E  EF23  F00B         	goto	u2840
  1008  001642                     u2841:
  1009  001642  EF30  F00B         	goto	l288
  1010  001646                     u2840:
  1011  001646                     
  1012                           ; BSR set to: 0
  1013  001646  5039               	movf	_LATF_flag^0,w,c
  1014  001648  103A               	iorwf	(_LATF_flag+1)^0,w,c
  1015  00164A  A4D8               	btfss	status,2,c
  1016  00164C  EF2A  F00B         	goto	u2851
  1017  001650  EF2C  F00B         	goto	u2850
  1018  001654                     u2851:
  1019  001654  EF30  F00B         	goto	l288
  1020  001658                     u2850:
  1021  001658                     
  1022                           ; BSR set to: 0
  1023                           ;main.c: 742:     {;main.c: 743:         can_submit = 1;
  1024  001658  0E00               	movlw	0
  1025  00165A  6E53               	movwf	(_can_submit+1)^0,c
  1026  00165C  0E01               	movlw	1
  1027  00165E  6E52               	movwf	_can_submit^0,c
  1028  001660                     l288:
  1029                           
  1030                           ; BSR set to: 0
  1031  001660  0012               	return		;funcret
  1032  001662                     __end_of_show_piece:
  1033                           	callstack 0
  1034                           
  1035 ;; *************** function _displayNumber *****************
  1036 ;; Defined at:
  1037 ;;		line 755 in file "main.c"
  1038 ;; Parameters:    Size  Location     Type
  1039 ;;  number          2    8[BANK0 ] int 
  1040 ;; Auto vars:     Size  Location     Type
  1041 ;;  units           2   12[BANK0 ] int 
  1042 ;;  tens            2   10[BANK0 ] int 
  1043 ;; Return value:  Size  Location     Type
  1044 ;;                  1    wreg      void 
  1045 ;; Registers used:
  1046 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1047 ;; Tracked objects:
  1048 ;;		On entry : 0/0
  1049 ;;		On exit  : 0/0
  1050 ;;		Unchanged: 0/0
  1051 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1052 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1053 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1054 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1055 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1056 ;;Total ram usage:        6 bytes
  1057 ;; Hardware stack levels used:    1
  1058 ;; Hardware stack levels required when called:    4
  1059 ;; This function calls:
  1060 ;;		___awdiv
  1061 ;;		___awmod
  1062 ;;		_displayDigit
  1063 ;; This function is called by:
  1064 ;;		_main
  1065 ;; This function uses a non-reentrant model
  1066 ;;
  1067                           
  1068                           	psect	text3
  1069  00244A                     __ptext3:
  1070                           	callstack 0
  1071  00244A                     _displayNumber:
  1072                           	callstack 26
  1073  00244A                     
  1074                           ;main.c: 755: void displayNumber(int number);main.c: 756: {;main.c: 757:     int tens = 
      +                          number / 10;
  1075  00244A  C068  F060         	movff	displayNumber@number,___awdiv@dividend
  1076  00244E  C069  F061         	movff	displayNumber@number+1,___awdiv@dividend+1
  1077  002452  0E00               	movlw	0
  1078  002454  0100               	movlb	0	; () banked
  1079  002456  6F63               	movwf	(___awdiv@divisor+1)& (0+255),b
  1080  002458  0E0A               	movlw	10
  1081  00245A  6F62               	movwf	___awdiv@divisor& (0+255),b
  1082  00245C  EC3A  F010         	call	___awdiv	;wreg free
  1083  002460  C060  F06A         	movff	?___awdiv,displayNumber@tens
  1084  002464  C061  F06B         	movff	?___awdiv+1,displayNumber@tens+1
  1085                           
  1086                           ;main.c: 758:     int units = number % 10;
  1087  002468  C068  F060         	movff	displayNumber@number,___awmod@dividend
  1088  00246C  C069  F061         	movff	displayNumber@number+1,___awmod@dividend+1
  1089  002470  0E00               	movlw	0
  1090  002472  0100               	movlb	0	; () banked
  1091  002474  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  1092  002476  0E0A               	movlw	10
  1093  002478  6F62               	movwf	___awmod@divisor& (0+255),b
  1094  00247A  EC9D  F010         	call	___awmod	;wreg free
  1095  00247E  C060  F06C         	movff	?___awmod,displayNumber@units
  1096  002482  C061  F06D         	movff	?___awmod+1,displayNumber@units+1
  1097  002486                     
  1098                           ;main.c: 760:     displayDigit(tens, 2);
  1099  002486  C06A  F060         	movff	displayNumber@tens,displayDigit@digit
  1100  00248A  C06B  F061         	movff	displayNumber@tens+1,displayDigit@digit+1
  1101  00248E  0E02               	movlw	2
  1102  002490  0100               	movlb	0	; () banked
  1103  002492  6F62               	movwf	displayDigit@position& (0+255),b
  1104  002494  EC7B  F012         	call	_displayDigit	;wreg free
  1105  002498                     
  1106                           ;main.c: 761:     displayDigit(units, 3);
  1107  002498  C06C  F060         	movff	displayNumber@units,displayDigit@digit
  1108  00249C  C06D  F061         	movff	displayNumber@units+1,displayDigit@digit+1
  1109  0024A0  0E03               	movlw	3
  1110  0024A2  0100               	movlb	0	; () banked
  1111  0024A4  6F62               	movwf	displayDigit@position& (0+255),b
  1112  0024A6  EC7B  F012         	call	_displayDigit	;wreg free
  1113  0024AA  0012               	return		;funcret
  1114  0024AC                     __end_of_displayNumber:
  1115                           	callstack 0
  1116                           
  1117 ;; *************** function _displayDigit *****************
  1118 ;; Defined at:
  1119 ;;		line 747 in file "main.c"
  1120 ;; Parameters:    Size  Location     Type
  1121 ;;  digit           2    0[BANK0 ] int 
  1122 ;;  position        1    2[BANK0 ] unsigned char 
  1123 ;; Auto vars:     Size  Location     Type
  1124 ;;		None
  1125 ;; Return value:  Size  Location     Type
  1126 ;;                  1    wreg      void 
  1127 ;; Registers used:
  1128 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
  1129 ;; Tracked objects:
  1130 ;;		On entry : 0/0
  1131 ;;		On exit  : 0/0
  1132 ;;		Unchanged: 0/0
  1133 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1134 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1135 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1136 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1137 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1138 ;;Total ram usage:        5 bytes
  1139 ;; Hardware stack levels used:    1
  1140 ;; Hardware stack levels required when called:    3
  1141 ;; This function calls:
  1142 ;;		Nothing
  1143 ;; This function is called by:
  1144 ;;		_displayNumber
  1145 ;; This function uses a non-reentrant model
  1146 ;;
  1147                           
  1148                           	psect	text4
  1149  0024F6                     __ptext4:
  1150                           	callstack 0
  1151  0024F6                     _displayDigit:
  1152                           	callstack 26
  1153  0024F6                     
  1154                           ;main.c: 747: void displayDigit(int digit, uint8_t position);main.c: 748: {;main.c: 749:
      +                               PORTH = 0x00;
  1155  0024F6  0E00               	movlw	0
  1156  0024F8  6E87               	movwf	135,c	;volatile
  1157  0024FA                     
  1158                           ;main.c: 750:     PORTH = (1 << position);
  1159  0024FA  C062  F063         	movff	displayDigit@position,??_displayDigit
  1160  0024FE  0E01               	movlw	1
  1161  002500  0100               	movlb	0	; () banked
  1162  002502  6F64               	movwf	(??_displayDigit+1)& (0+255),b
  1163  002504  2B63               	incf	??_displayDigit& (0+255),f,b
  1164  002506  EF87  F012         	goto	u2614
  1165  00250A                     u2615:
  1166  00250A  90D8               	bcf	status,0,c
  1167  00250C  3764               	rlcf	(??_displayDigit+1)& (0+255),f,b
  1168  00250E                     u2614:
  1169  00250E  2F63               	decfsz	??_displayDigit& (0+255),f,b
  1170  002510  EF85  F012         	goto	u2615
  1171  002514  0100               	movlb	0	; () banked
  1172  002516  5164               	movf	(??_displayDigit+1)& (0+255),w,b
  1173  002518  6E87               	movwf	135,c	;volatile
  1174  00251A                     
  1175                           ; BSR set to: 0
  1176                           ;main.c: 751:     PORTJ = segmentCodes[digit];
  1177  00251A  0E01               	movlw	low _segmentCodes
  1178  00251C  2560               	addwf	displayDigit@digit& (0+255),w,b
  1179  00251E  6EF6               	movwf	tblptrl,c
  1180  002520  0E10               	movlw	high _segmentCodes
  1181  002522  2161               	addwfc	(displayDigit@digit+1)& (0+255),w,b
  1182  002524  6EF7               	movwf	tblptrh,c
  1183  002526                     	if	0	;There are less than 3 active tblptr bytes
  1184  002526                     	endif
  1185  002526  0008               	tblrd		*
  1186  002528  CFF5 FF88          	movff	tablat,3976	;volatile
  1187  00252C                     
  1188                           ; BSR set to: 0
  1189                           ;main.c: 752:     _delay((unsigned long)((1)*((40UL * (1000UL * 1000UL))/4000.0)));
  1190  00252C  0E0D               	movlw	13
  1191  00252E  0100               	movlb	0	; () banked
  1192  002530  6F63               	movwf	??_displayDigit& (0+255),b
  1193  002532  0EFB               	movlw	251
  1194  002534                     u3067:
  1195  002534  2EE8               	decfsz	wreg,f,c
  1196  002536  D7FE               	bra	u3067
  1197  002538  2F63               	decfsz	??_displayDigit& (0+255),f,b
  1198  00253A  D7FC               	bra	u3067
  1199  00253C  D000               	nop2	
  1200  00253E  0012               	return		;funcret
  1201  002540                     __end_of_displayDigit:
  1202                           	callstack 0
  1203                           
  1204 ;; *************** function ___awmod *****************
  1205 ;; Defined at:
  1206 ;;		line 7 in file "/opt/microchip/xc8/v2.30/pic/sources/c99/common/awmod.c"
  1207 ;; Parameters:    Size  Location     Type
  1208 ;;  dividend        2    0[BANK0 ] int 
  1209 ;;  divisor         2    2[BANK0 ] int 
  1210 ;; Auto vars:     Size  Location     Type
  1211 ;;  sign            1    5[BANK0 ] unsigned char 
  1212 ;;  counter         1    4[BANK0 ] unsigned char 
  1213 ;; Return value:  Size  Location     Type
  1214 ;;                  2    0[BANK0 ] int 
  1215 ;; Registers used:
  1216 ;;		wreg, status,2, status,0
  1217 ;; Tracked objects:
  1218 ;;		On entry : 0/0
  1219 ;;		On exit  : 0/0
  1220 ;;		Unchanged: 0/0
  1221 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1222 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1223 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1224 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1225 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1226 ;;Total ram usage:        6 bytes
  1227 ;; Hardware stack levels used:    1
  1228 ;; Hardware stack levels required when called:    3
  1229 ;; This function calls:
  1230 ;;		Nothing
  1231 ;; This function is called by:
  1232 ;;		_displayNumber
  1233 ;; This function uses a non-reentrant model
  1234 ;;
  1235                           
  1236                           	psect	text5
  1237  00213A                     __ptext5:
  1238                           	callstack 0
  1239  00213A                     ___awmod:
  1240                           	callstack 26
  1241  00213A  0E00               	movlw	0
  1242  00213C  0100               	movlb	0	; () banked
  1243  00213E  6F65               	movwf	___awmod@sign& (0+255),b
  1244  002140                     
  1245                           ; BSR set to: 0
  1246  002140  BF61               	btfsc	(___awmod@dividend+1)& (0+255),7,b
  1247  002142  EFA7  F010         	goto	u2680
  1248  002146  EFA5  F010         	goto	u2681
  1249  00214A                     u2681:
  1250  00214A  EFAD  F010         	goto	l2468
  1251  00214E                     u2680:
  1252  00214E                     
  1253                           ; BSR set to: 0
  1254  00214E  6D60               	negf	___awmod@dividend& (0+255),b
  1255  002150  1F61               	comf	(___awmod@dividend+1)& (0+255),f,b
  1256  002152  B0D8               	btfsc	status,0,c
  1257  002154  2B61               	incf	(___awmod@dividend+1)& (0+255),f,b
  1258  002156                     
  1259                           ; BSR set to: 0
  1260  002156  0E01               	movlw	1
  1261  002158  6F65               	movwf	___awmod@sign& (0+255),b
  1262  00215A                     l2468:
  1263                           
  1264                           ; BSR set to: 0
  1265  00215A  BF63               	btfsc	(___awmod@divisor+1)& (0+255),7,b
  1266  00215C  EFB4  F010         	goto	u2690
  1267  002160  EFB2  F010         	goto	u2691
  1268  002164                     u2691:
  1269  002164  EFB8  F010         	goto	l2472
  1270  002168                     u2690:
  1271  002168                     
  1272                           ; BSR set to: 0
  1273  002168  6D62               	negf	___awmod@divisor& (0+255),b
  1274  00216A  1F63               	comf	(___awmod@divisor+1)& (0+255),f,b
  1275  00216C  B0D8               	btfsc	status,0,c
  1276  00216E  2B63               	incf	(___awmod@divisor+1)& (0+255),f,b
  1277  002170                     l2472:
  1278                           
  1279                           ; BSR set to: 0
  1280  002170  5162               	movf	___awmod@divisor& (0+255),w,b
  1281  002172  1163               	iorwf	(___awmod@divisor+1)& (0+255),w,b
  1282  002174  B4D8               	btfsc	status,2,c
  1283  002176  EFBF  F010         	goto	u2701
  1284  00217A  EFC1  F010         	goto	u2700
  1285  00217E                     u2701:
  1286  00217E  EFE5  F010         	goto	l2488
  1287  002182                     u2700:
  1288  002182                     
  1289                           ; BSR set to: 0
  1290  002182  0E01               	movlw	1
  1291  002184  6F64               	movwf	___awmod@counter& (0+255),b
  1292  002186  EFC9  F010         	goto	l2478
  1293  00218A                     l2476:
  1294                           
  1295                           ; BSR set to: 0
  1296  00218A  90D8               	bcf	status,0,c
  1297  00218C  3762               	rlcf	___awmod@divisor& (0+255),f,b
  1298  00218E  3763               	rlcf	(___awmod@divisor+1)& (0+255),f,b
  1299  002190  2B64               	incf	___awmod@counter& (0+255),f,b
  1300  002192                     l2478:
  1301                           
  1302                           ; BSR set to: 0
  1303  002192  AF63               	btfss	(___awmod@divisor+1)& (0+255),7,b
  1304  002194  EFCE  F010         	goto	u2711
  1305  002198  EFD0  F010         	goto	u2710
  1306  00219C                     u2711:
  1307  00219C  EFC5  F010         	goto	l2476
  1308  0021A0                     u2710:
  1309  0021A0                     l2480:
  1310                           
  1311                           ; BSR set to: 0
  1312  0021A0  5162               	movf	___awmod@divisor& (0+255),w,b
  1313  0021A2  5D60               	subwf	___awmod@dividend& (0+255),w,b
  1314  0021A4  5163               	movf	(___awmod@divisor+1)& (0+255),w,b
  1315  0021A6  5961               	subwfb	(___awmod@dividend+1)& (0+255),w,b
  1316  0021A8  A0D8               	btfss	status,0,c
  1317  0021AA  EFD9  F010         	goto	u2721
  1318  0021AE  EFDB  F010         	goto	u2720
  1319  0021B2                     u2721:
  1320  0021B2  EFDF  F010         	goto	l2484
  1321  0021B6                     u2720:
  1322  0021B6                     
  1323                           ; BSR set to: 0
  1324  0021B6  5162               	movf	___awmod@divisor& (0+255),w,b
  1325  0021B8  5F60               	subwf	___awmod@dividend& (0+255),f,b
  1326  0021BA  5163               	movf	(___awmod@divisor+1)& (0+255),w,b
  1327  0021BC  5B61               	subwfb	(___awmod@dividend+1)& (0+255),f,b
  1328  0021BE                     l2484:
  1329                           
  1330                           ; BSR set to: 0
  1331  0021BE  90D8               	bcf	status,0,c
  1332  0021C0  3363               	rrcf	(___awmod@divisor+1)& (0+255),f,b
  1333  0021C2  3362               	rrcf	___awmod@divisor& (0+255),f,b
  1334  0021C4                     
  1335                           ; BSR set to: 0
  1336  0021C4  2F64               	decfsz	___awmod@counter& (0+255),f,b
  1337  0021C6  EFD0  F010         	goto	l2480
  1338  0021CA                     l2488:
  1339                           
  1340                           ; BSR set to: 0
  1341  0021CA  5165               	movf	___awmod@sign& (0+255),w,b
  1342  0021CC  B4D8               	btfsc	status,2,c
  1343  0021CE  EFEB  F010         	goto	u2731
  1344  0021D2  EFED  F010         	goto	u2730
  1345  0021D6                     u2731:
  1346  0021D6  EFF1  F010         	goto	l2492
  1347  0021DA                     u2730:
  1348  0021DA                     
  1349                           ; BSR set to: 0
  1350  0021DA  6D60               	negf	___awmod@dividend& (0+255),b
  1351  0021DC  1F61               	comf	(___awmod@dividend+1)& (0+255),f,b
  1352  0021DE  B0D8               	btfsc	status,0,c
  1353  0021E0  2B61               	incf	(___awmod@dividend+1)& (0+255),f,b
  1354  0021E2                     l2492:
  1355                           
  1356                           ; BSR set to: 0
  1357  0021E2  C060  F060         	movff	___awmod@dividend,?___awmod
  1358  0021E6  C061  F061         	movff	___awmod@dividend+1,?___awmod+1
  1359  0021EA                     
  1360                           ; BSR set to: 0
  1361  0021EA  0012               	return		;funcret
  1362  0021EC                     __end_of___awmod:
  1363                           	callstack 0
  1364                           
  1365 ;; *************** function ___awdiv *****************
  1366 ;; Defined at:
  1367 ;;		line 7 in file "/opt/microchip/xc8/v2.30/pic/sources/c99/common/awdiv.c"
  1368 ;; Parameters:    Size  Location     Type
  1369 ;;  dividend        2    0[BANK0 ] int 
  1370 ;;  divisor         2    2[BANK0 ] int 
  1371 ;; Auto vars:     Size  Location     Type
  1372 ;;  quotient        2    6[BANK0 ] int 
  1373 ;;  sign            1    5[BANK0 ] unsigned char 
  1374 ;;  counter         1    4[BANK0 ] unsigned char 
  1375 ;; Return value:  Size  Location     Type
  1376 ;;                  2    0[BANK0 ] int 
  1377 ;; Registers used:
  1378 ;;		wreg, status,2, status,0
  1379 ;; Tracked objects:
  1380 ;;		On entry : 0/0
  1381 ;;		On exit  : 0/0
  1382 ;;		Unchanged: 0/0
  1383 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1384 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1385 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1386 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1387 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1388 ;;Total ram usage:        8 bytes
  1389 ;; Hardware stack levels used:    1
  1390 ;; Hardware stack levels required when called:    3
  1391 ;; This function calls:
  1392 ;;		Nothing
  1393 ;; This function is called by:
  1394 ;;		_displayNumber
  1395 ;; This function uses a non-reentrant model
  1396 ;;
  1397                           
  1398                           	psect	text6
  1399  002074                     __ptext6:
  1400                           	callstack 0
  1401  002074                     ___awdiv:
  1402                           	callstack 26
  1403  002074  0E00               	movlw	0
  1404  002076  0100               	movlb	0	; () banked
  1405  002078  6F65               	movwf	___awdiv@sign& (0+255),b
  1406  00207A                     
  1407                           ; BSR set to: 0
  1408  00207A  BF63               	btfsc	(___awdiv@divisor+1)& (0+255),7,b
  1409  00207C  EF44  F010         	goto	u2620
  1410  002080  EF42  F010         	goto	u2621
  1411  002084                     u2621:
  1412  002084  EF4A  F010         	goto	l2424
  1413  002088                     u2620:
  1414  002088                     
  1415                           ; BSR set to: 0
  1416  002088  6D62               	negf	___awdiv@divisor& (0+255),b
  1417  00208A  1F63               	comf	(___awdiv@divisor+1)& (0+255),f,b
  1418  00208C  B0D8               	btfsc	status,0,c
  1419  00208E  2B63               	incf	(___awdiv@divisor+1)& (0+255),f,b
  1420  002090                     
  1421                           ; BSR set to: 0
  1422  002090  0E01               	movlw	1
  1423  002092  6F65               	movwf	___awdiv@sign& (0+255),b
  1424  002094                     l2424:
  1425                           
  1426                           ; BSR set to: 0
  1427  002094  BF61               	btfsc	(___awdiv@dividend+1)& (0+255),7,b
  1428  002096  EF51  F010         	goto	u2630
  1429  00209A  EF4F  F010         	goto	u2631
  1430  00209E                     u2631:
  1431  00209E  EF57  F010         	goto	l2430
  1432  0020A2                     u2630:
  1433  0020A2                     
  1434                           ; BSR set to: 0
  1435  0020A2  6D60               	negf	___awdiv@dividend& (0+255),b
  1436  0020A4  1F61               	comf	(___awdiv@dividend+1)& (0+255),f,b
  1437  0020A6  B0D8               	btfsc	status,0,c
  1438  0020A8  2B61               	incf	(___awdiv@dividend+1)& (0+255),f,b
  1439  0020AA                     
  1440                           ; BSR set to: 0
  1441  0020AA  0E01               	movlw	1
  1442  0020AC  1B65               	xorwf	___awdiv@sign& (0+255),f,b
  1443  0020AE                     l2430:
  1444                           
  1445                           ; BSR set to: 0
  1446  0020AE  0E00               	movlw	0
  1447  0020B0  6F67               	movwf	(___awdiv@quotient+1)& (0+255),b
  1448  0020B2  0E00               	movlw	0
  1449  0020B4  6F66               	movwf	___awdiv@quotient& (0+255),b
  1450  0020B6                     
  1451                           ; BSR set to: 0
  1452  0020B6  5162               	movf	___awdiv@divisor& (0+255),w,b
  1453  0020B8  1163               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
  1454  0020BA  B4D8               	btfsc	status,2,c
  1455  0020BC  EF62  F010         	goto	u2641
  1456  0020C0  EF64  F010         	goto	u2640
  1457  0020C4                     u2641:
  1458  0020C4  EF8C  F010         	goto	l2452
  1459  0020C8                     u2640:
  1460  0020C8                     
  1461                           ; BSR set to: 0
  1462  0020C8  0E01               	movlw	1
  1463  0020CA  6F64               	movwf	___awdiv@counter& (0+255),b
  1464  0020CC  EF6C  F010         	goto	l2438
  1465  0020D0                     l2436:
  1466                           
  1467                           ; BSR set to: 0
  1468  0020D0  90D8               	bcf	status,0,c
  1469  0020D2  3762               	rlcf	___awdiv@divisor& (0+255),f,b
  1470  0020D4  3763               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
  1471  0020D6  2B64               	incf	___awdiv@counter& (0+255),f,b
  1472  0020D8                     l2438:
  1473                           
  1474                           ; BSR set to: 0
  1475  0020D8  AF63               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  1476  0020DA  EF71  F010         	goto	u2651
  1477  0020DE  EF73  F010         	goto	u2650
  1478  0020E2                     u2651:
  1479  0020E2  EF68  F010         	goto	l2436
  1480  0020E6                     u2650:
  1481  0020E6                     l2440:
  1482                           
  1483                           ; BSR set to: 0
  1484  0020E6  90D8               	bcf	status,0,c
  1485  0020E8  3766               	rlcf	___awdiv@quotient& (0+255),f,b
  1486  0020EA  3767               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
  1487  0020EC                     
  1488                           ; BSR set to: 0
  1489  0020EC  5162               	movf	___awdiv@divisor& (0+255),w,b
  1490  0020EE  5D60               	subwf	___awdiv@dividend& (0+255),w,b
  1491  0020F0  5163               	movf	(___awdiv@divisor+1)& (0+255),w,b
  1492  0020F2  5961               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
  1493  0020F4  A0D8               	btfss	status,0,c
  1494  0020F6  EF7F  F010         	goto	u2661
  1495  0020FA  EF81  F010         	goto	u2660
  1496  0020FE                     u2661:
  1497  0020FE  EF86  F010         	goto	l2448
  1498  002102                     u2660:
  1499  002102                     
  1500                           ; BSR set to: 0
  1501  002102  5162               	movf	___awdiv@divisor& (0+255),w,b
  1502  002104  5F60               	subwf	___awdiv@dividend& (0+255),f,b
  1503  002106  5163               	movf	(___awdiv@divisor+1)& (0+255),w,b
  1504  002108  5B61               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
  1505  00210A                     
  1506                           ; BSR set to: 0
  1507  00210A  8166               	bsf	___awdiv@quotient& (0+255),0,b
  1508  00210C                     l2448:
  1509                           
  1510                           ; BSR set to: 0
  1511  00210C  90D8               	bcf	status,0,c
  1512  00210E  3363               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
  1513  002110  3362               	rrcf	___awdiv@divisor& (0+255),f,b
  1514  002112                     
  1515                           ; BSR set to: 0
  1516  002112  2F64               	decfsz	___awdiv@counter& (0+255),f,b
  1517  002114  EF73  F010         	goto	l2440
  1518  002118                     l2452:
  1519                           
  1520                           ; BSR set to: 0
  1521  002118  5165               	movf	___awdiv@sign& (0+255),w,b
  1522  00211A  B4D8               	btfsc	status,2,c
  1523  00211C  EF92  F010         	goto	u2671
  1524  002120  EF94  F010         	goto	u2670
  1525  002124                     u2671:
  1526  002124  EF98  F010         	goto	l2456
  1527  002128                     u2670:
  1528  002128                     
  1529                           ; BSR set to: 0
  1530  002128  6D66               	negf	___awdiv@quotient& (0+255),b
  1531  00212A  1F67               	comf	(___awdiv@quotient+1)& (0+255),f,b
  1532  00212C  B0D8               	btfsc	status,0,c
  1533  00212E  2B67               	incf	(___awdiv@quotient+1)& (0+255),f,b
  1534  002130                     l2456:
  1535                           
  1536                           ; BSR set to: 0
  1537  002130  C066  F060         	movff	___awdiv@quotient,?___awdiv
  1538  002134  C067  F061         	movff	___awdiv@quotient+1,?___awdiv+1
  1539  002138                     
  1540                           ; BSR set to: 0
  1541  002138  0012               	return		;funcret
  1542  00213A                     __end_of___awdiv:
  1543                           	callstack 0
  1544                           
  1545 ;; *************** function _check_buttons_rg *****************
  1546 ;; Defined at:
  1547 ;;		line 483 in file "main.c"
  1548 ;; Parameters:    Size  Location     Type
  1549 ;;		None
  1550 ;; Auto vars:     Size  Location     Type
  1551 ;;  currentButto    1   33[BANK0 ] struct .
  1552 ;; Return value:  Size  Location     Type
  1553 ;;                  1    wreg      void 
  1554 ;; Registers used:
  1555 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1556 ;; Tracked objects:
  1557 ;;		On entry : 0/0
  1558 ;;		On exit  : 0/0
  1559 ;;		Unchanged: 0/0
  1560 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1561 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1562 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1563 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1564 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1565 ;;Total ram usage:        1 bytes
  1566 ;; Hardware stack levels used:    1
  1567 ;; Hardware stack levels required when called:    5
  1568 ;; This function calls:
  1569 ;;		_move_down
  1570 ;;		_move_left
  1571 ;;		_move_right
  1572 ;;		_move_up
  1573 ;; This function is called by:
  1574 ;;		_main
  1575 ;; This function uses a non-reentrant model
  1576 ;;
  1577                           
  1578                           	psect	text7
  1579  0017F0                     __ptext7:
  1580                           	callstack 0
  1581  0017F0                     _check_buttons_rg:
  1582                           	callstack 25
  1583  0017F0                     
  1584                           ;main.c: 485:     static ButtonState state = Waiting;;main.c: 486:     static uint8_t bu
      +                          ttonCount = 0;;main.c: 487:     Button_Type currentButtonRead;;main.c: 490:     currentB
      +                          uttonRead.RG0 = PORTGbits.RG0;
  1585  0017F0  A086               	btfss	134,0,c	;volatile
  1586  0017F2  D003               	bra	u2885
  1587  0017F4  0100               	movlb	0	; () banked
  1588  0017F6  8181               	bsf	check_buttons_rg@currentButtonRead& (0+255),0,b
  1589  0017F8  D002               	bra	u2887
  1590  0017FA                     u2885:
  1591  0017FA  0100               	movlb	0	; () banked
  1592  0017FC  9181               	bcf	check_buttons_rg@currentButtonRead& (0+255),0,b
  1593  0017FE                     u2887:
  1594                           
  1595                           ;main.c: 491:     currentButtonRead.RG1 = PORTGbits.RG1;
  1596  0017FE  A286               	btfss	134,1,c	;volatile
  1597  001800  D002               	bra	u2895
  1598  001802  8381               	bsf	check_buttons_rg@currentButtonRead& (0+255),1,b
  1599  001804  D002               	bra	u2897
  1600  001806                     u2895:
  1601  001806  0100               	movlb	0	; () banked
  1602  001808  9381               	bcf	check_buttons_rg@currentButtonRead& (0+255),1,b
  1603  00180A                     u2897:
  1604                           
  1605                           ;main.c: 492:     currentButtonRead.RG2 = PORTGbits.RG2;
  1606  00180A  A486               	btfss	134,2,c	;volatile
  1607  00180C  D002               	bra	u2905
  1608  00180E  8581               	bsf	check_buttons_rg@currentButtonRead& (0+255),2,b
  1609  001810  D002               	bra	u2907
  1610  001812                     u2905:
  1611  001812  0100               	movlb	0	; () banked
  1612  001814  9581               	bcf	check_buttons_rg@currentButtonRead& (0+255),2,b
  1613  001816                     u2907:
  1614                           
  1615                           ;main.c: 493:     currentButtonRead.RG3 = PORTGbits.RG3;
  1616  001816  A686               	btfss	134,3,c	;volatile
  1617  001818  D002               	bra	u2915
  1618  00181A  8781               	bsf	check_buttons_rg@currentButtonRead& (0+255),3,b
  1619  00181C  D002               	bra	u2917
  1620  00181E                     u2915:
  1621  00181E  0100               	movlb	0	; () banked
  1622  001820  9781               	bcf	check_buttons_rg@currentButtonRead& (0+255),3,b
  1623  001822                     u2917:
  1624                           
  1625                           ;main.c: 494:     currentButtonRead.RG4 = PORTGbits.RG4;
  1626  001822  A886               	btfss	134,4,c	;volatile
  1627  001824  D002               	bra	u2925
  1628  001826  8981               	bsf	check_buttons_rg@currentButtonRead& (0+255),4,b
  1629  001828  D002               	bra	u2927
  1630  00182A                     u2925:
  1631  00182A  0100               	movlb	0	; () banked
  1632  00182C  9981               	bcf	check_buttons_rg@currentButtonRead& (0+255),4,b
  1633  00182E                     u2927:
  1634                           
  1635                           ;main.c: 495:     currentButtonRead.RG5 = PORTGbits.RG5;
  1636  00182E  AA86               	btfss	134,5,c	;volatile
  1637  001830  D002               	bra	u2935
  1638  001832  8B81               	bsf	check_buttons_rg@currentButtonRead& (0+255),5,b
  1639  001834  D002               	bra	u2937
  1640  001836                     u2935:
  1641  001836  0100               	movlb	0	; () banked
  1642  001838  9B81               	bcf	check_buttons_rg@currentButtonRead& (0+255),5,b
  1643  00183A                     u2937:
  1644  00183A                     
  1645                           ; BSR set to: 0
  1646                           ;main.c: 497:     if (state == Waiting)
  1647  00183A  5189               	movf	check_buttons_rg@state& (0+255),w,b
  1648  00183C  A4D8               	btfss	status,2,c
  1649  00183E  EF23  F00C         	goto	u2941
  1650  001842  EF25  F00C         	goto	u2940
  1651  001846                     u2941:
  1652  001846  EF35  F00C         	goto	l2602
  1653  00184A                     u2940:
  1654  00184A                     
  1655                           ; BSR set to: 0
  1656                           ;main.c: 498:     {;main.c: 499:         if (currentButtonRead.Full != 0)
  1657  00184A  5181               	movf	check_buttons_rg@currentButtonRead& (0+255),w,b
  1658  00184C  B4D8               	btfsc	status,2,c
  1659  00184E  EF2B  F00C         	goto	u2951
  1660  001852  EF2D  F00C         	goto	u2950
  1661  001856                     u2951:
  1662  001856  EFA9  F00C         	goto	l246
  1663  00185A                     u2950:
  1664  00185A                     
  1665                           ; BSR set to: 0
  1666                           ;main.c: 500:         {;main.c: 501:             state = Detected;
  1667  00185A  0E01               	movlw	1
  1668  00185C  6F89               	movwf	check_buttons_rg@state& (0+255),b
  1669  00185E                     
  1670                           ; BSR set to: 0
  1671                           ;main.c: 502:             Temp_Press = currentButtonRead;
  1672  00185E  C081  F08A         	movff	check_buttons_rg@currentButtonRead,_Temp_Press
  1673                           
  1674                           ;main.c: 503:             buttonCount = 0;
  1675  001862  0E00               	movlw	0
  1676  001864  6F88               	movwf	check_buttons_rg@buttonCount& (0+255),b
  1677  001866  EFA9  F00C         	goto	l246
  1678  00186A                     l2602:
  1679                           
  1680                           ; BSR set to: 0
  1681  00186A  0589               	decf	check_buttons_rg@state& (0+255),w,b
  1682  00186C  A4D8               	btfss	status,2,c
  1683  00186E  EF3B  F00C         	goto	u2961
  1684  001872  EF3D  F00C         	goto	u2960
  1685  001876                     u2961:
  1686  001876  EF57  F00C         	goto	l2614
  1687  00187A                     u2960:
  1688  00187A                     
  1689                           ; BSR set to: 0
  1690                           ;main.c: 507:     {;main.c: 508:         if (currentButtonRead.Full == Temp_Press.Full)
  1691  00187A  518A               	movf	_Temp_Press& (0+255),w,b
  1692  00187C  1981               	xorwf	check_buttons_rg@currentButtonRead& (0+255),w,b
  1693  00187E  A4D8               	btfss	status,2,c
  1694  001880  EF44  F00C         	goto	u2971
  1695  001884  EF46  F00C         	goto	u2970
  1696  001888                     u2971:
  1697  001888  EF53  F00C         	goto	l2612
  1698  00188C                     u2970:
  1699  00188C                     
  1700                           ; BSR set to: 0
  1701                           ;main.c: 509:         {;main.c: 510:             buttonCount++;
  1702  00188C  2B88               	incf	check_buttons_rg@buttonCount& (0+255),f,b
  1703  00188E                     
  1704                           ; BSR set to: 0
  1705                           ;main.c: 511:             if (buttonCount >= 1)
  1706  00188E  5188               	movf	check_buttons_rg@buttonCount& (0+255),w,b
  1707  001890  B4D8               	btfsc	status,2,c
  1708  001892  EF4D  F00C         	goto	u2981
  1709  001896  EF4F  F00C         	goto	u2980
  1710  00189A                     u2981:
  1711  00189A  EFA9  F00C         	goto	l246
  1712  00189E                     u2980:
  1713  00189E                     
  1714                           ; BSR set to: 0
  1715                           ;main.c: 512:             {;main.c: 513:                 state = WaitForRelease;
  1716  00189E  0E02               	movlw	2
  1717  0018A0  6F89               	movwf	check_buttons_rg@state& (0+255),b
  1718  0018A2  EFA9  F00C         	goto	l246
  1719  0018A6                     l2612:
  1720                           
  1721                           ; BSR set to: 0
  1722                           ;main.c: 517:         {;main.c: 518:             state = Waiting;
  1723  0018A6  0E00               	movlw	0
  1724  0018A8  6F89               	movwf	check_buttons_rg@state& (0+255),b
  1725  0018AA  EFA9  F00C         	goto	l246
  1726  0018AE                     l2614:
  1727                           
  1728                           ; BSR set to: 0
  1729  0018AE  0E02               	movlw	2
  1730  0018B0  1989               	xorwf	check_buttons_rg@state& (0+255),w,b
  1731  0018B2  A4D8               	btfss	status,2,c
  1732  0018B4  EF5E  F00C         	goto	u2991
  1733  0018B8  EF60  F00C         	goto	u2990
  1734  0018BC                     u2991:
  1735  0018BC  EF70  F00C         	goto	l2620
  1736  0018C0                     u2990:
  1737  0018C0                     
  1738                           ; BSR set to: 0
  1739                           ;main.c: 523:     {;main.c: 524:         if ((currentButtonRead.Full & Temp_Press.Full) 
      +                          == 0)
  1740  0018C0  5181               	movf	check_buttons_rg@currentButtonRead& (0+255),w,b
  1741  0018C2  158A               	andwf	_Temp_Press& (0+255),w,b
  1742  0018C4  0900               	iorlw	0
  1743  0018C6  A4D8               	btfss	status,2,c
  1744  0018C8  EF68  F00C         	goto	u3001
  1745  0018CC  EF6A  F00C         	goto	u3000
  1746  0018D0                     u3001:
  1747  0018D0  EFA9  F00C         	goto	l246
  1748  0018D4                     u3000:
  1749  0018D4                     
  1750                           ; BSR set to: 0
  1751                           ;main.c: 525:         {;main.c: 526:             state = Update;
  1752  0018D4  0E03               	movlw	3
  1753  0018D6  6F89               	movwf	check_buttons_rg@state& (0+255),b
  1754  0018D8  EFA9  F00C         	goto	l246
  1755  0018DC                     l236:
  1756                           
  1757                           ; BSR set to: 0
  1758                           ;main.c: 528:     }
  1759  0018DC  EFA9  F00C         	goto	l246
  1760  0018E0                     l2620:
  1761                           
  1762                           ; BSR set to: 0
  1763  0018E0  0E03               	movlw	3
  1764  0018E2  1989               	xorwf	check_buttons_rg@state& (0+255),w,b
  1765  0018E4  A4D8               	btfss	status,2,c
  1766  0018E6  EF77  F00C         	goto	u3011
  1767  0018EA  EF79  F00C         	goto	u3010
  1768  0018EE                     u3011:
  1769  0018EE  EFA9  F00C         	goto	l246
  1770  0018F2                     u3010:
  1771  0018F2                     
  1772                           ; BSR set to: 0
  1773                           ;main.c: 530:     {;main.c: 531:         Button_Press = Temp_Press;
  1774  0018F2  C08A  F08B         	movff	_Temp_Press,_Button_Press
  1775  0018F6                     
  1776                           ; BSR set to: 0
  1777                           ;main.c: 532:         state = Waiting;
  1778  0018F6  0E00               	movlw	0
  1779  0018F8  6F89               	movwf	check_buttons_rg@state& (0+255),b
  1780                           
  1781                           ;main.c: 533:         buttonCount = 0;
  1782  0018FA  0E00               	movlw	0
  1783  0018FC  6F88               	movwf	check_buttons_rg@buttonCount& (0+255),b
  1784  0018FE                     
  1785                           ; BSR set to: 0
  1786                           ;main.c: 535:         if (Button_Press.RG2 == 1)
  1787  0018FE  A58B               	btfss	_Button_Press& (0+255),2,b
  1788  001900  EF84  F00C         	goto	u3021
  1789  001904  EF86  F00C         	goto	u3020
  1790  001908                     u3021:
  1791  001908  EF8A  F00C         	goto	l239
  1792  00190C                     u3020:
  1793  00190C                     
  1794                           ; BSR set to: 0
  1795                           ;main.c: 536:         {;main.c: 538:             move_right();
  1796  00190C  EC22  F00F         	call	_move_right	;wreg free
  1797                           
  1798                           ;main.c: 539:         }
  1799  001910  EFA9  F00C         	goto	l246
  1800  001914                     l239:
  1801                           
  1802                           ; BSR set to: 0
  1803  001914  A98B               	btfss	_Button_Press& (0+255),4,b
  1804  001916  EF8F  F00C         	goto	u3031
  1805  00191A  EF91  F00C         	goto	u3030
  1806  00191E                     u3031:
  1807  00191E  EF95  F00C         	goto	l241
  1808  001922                     u3030:
  1809  001922                     
  1810                           ; BSR set to: 0
  1811                           ;main.c: 541:         {;main.c: 542:             move_left();
  1812  001922  ECAF  F00F         	call	_move_left	;wreg free
  1813                           
  1814                           ;main.c: 543:         }
  1815  001926  EFA9  F00C         	goto	l246
  1816  00192A                     l241:
  1817                           
  1818                           ; BSR set to: 0
  1819  00192A  A78B               	btfss	_Button_Press& (0+255),3,b
  1820  00192C  EF9A  F00C         	goto	u3041
  1821  001930  EF9C  F00C         	goto	u3040
  1822  001934                     u3041:
  1823  001934  EFA0  F00C         	goto	l243
  1824  001938                     u3040:
  1825  001938                     
  1826                           ; BSR set to: 0
  1827                           ;main.c: 545:         {;main.c: 546:             move_up();
  1828  001938  ECAA  F00C         	call	_move_up	;wreg free
  1829                           
  1830                           ;main.c: 547:         }
  1831  00193C  EFA9  F00C         	goto	l246
  1832  001940                     l243:
  1833                           
  1834                           ; BSR set to: 0
  1835  001940  A18B               	btfss	_Button_Press& (0+255),0,b
  1836  001942  EFA5  F00C         	goto	u3051
  1837  001946  EFA7  F00C         	goto	u3050
  1838  00194A                     u3051:
  1839  00194A  EF6E  F00C         	goto	l236
  1840  00194E                     u3050:
  1841  00194E                     
  1842                           ; BSR set to: 0
  1843                           ;main.c: 549:         {;main.c: 550:             move_down();
  1844  00194E  EC49  F00D         	call	_move_down	;wreg free
  1845  001952                     l246:
  1846  001952  0012               	return		;funcret
  1847  001954                     __end_of_check_buttons_rg:
  1848                           	callstack 0
  1849                           
  1850 ;; *************** function _move_up *****************
  1851 ;; Defined at:
  1852 ;;		line 617 in file "main.c"
  1853 ;; Parameters:    Size  Location     Type
  1854 ;;		None
  1855 ;; Auto vars:     Size  Location     Type
  1856 ;;  ports           4   26[BANK0 ] unsigned char [4]
  1857 ;; Return value:  Size  Location     Type
  1858 ;;                  1    wreg      void 
  1859 ;; Registers used:
  1860 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1861 ;; Tracked objects:
  1862 ;;		On entry : 0/0
  1863 ;;		On exit  : 0/0
  1864 ;;		Unchanged: 0/0
  1865 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1866 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1867 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1868 ;;      Temps:          0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1869 ;;      Totals:         0      24       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1870 ;;Total ram usage:       24 bytes
  1871 ;; Hardware stack levels used:    1
  1872 ;; Hardware stack levels required when called:    4
  1873 ;; This function calls:
  1874 ;;		_parse_and_assign
  1875 ;; This function is called by:
  1876 ;;		_check_buttons_rg
  1877 ;; This function uses a non-reentrant model
  1878 ;;
  1879                           
  1880                           	psect	text8
  1881  001954                     __ptext8:
  1882                           	callstack 0
  1883  001954                     _move_up:
  1884                           	callstack 25
  1885  001954                     
  1886                           ;main.c: 619:     uint8_t ports[4];;main.c: 620:     if (active_piece == 0x00000000)
  1887  001954  5031               	movf	_active_piece^0,w,c
  1888  001956  1032               	iorwf	(_active_piece+1)^0,w,c
  1889  001958  1033               	iorwf	(_active_piece+2)^0,w,c
  1890  00195A  1034               	iorwf	(_active_piece+3)^0,w,c
  1891  00195C  A4D8               	btfss	status,2,c
  1892  00195E  EFB3  F00C         	goto	u2561
  1893  001962  EFB5  F00C         	goto	u2560
  1894  001966                     u2561:
  1895  001966  EFC6  F00C         	goto	l2394
  1896  00196A                     u2560:
  1897  00196A                     
  1898                           ;main.c: 621:     {;main.c: 622:         parse_and_assign(active_piece_record, ports);
  1899  00196A  C02D  F060         	movff	_active_piece_record,parse_and_assign@value
  1900  00196E  C02E  F061         	movff	_active_piece_record+1,parse_and_assign@value+1
  1901  001972  C02F  F062         	movff	_active_piece_record+2,parse_and_assign@value+2
  1902  001976  C030  F063         	movff	_active_piece_record+3,parse_and_assign@value+3
  1903  00197A  0E7A               	movlw	low move_up@ports
  1904  00197C  0100               	movlb	0	; () banked
  1905  00197E  6F64               	movwf	parse_and_assign@ports& (0+255),b
  1906  001980  0E00               	movlw	high move_up@ports
  1907  001982  6F65               	movwf	(parse_and_assign@ports+1)& (0+255),b
  1908  001984  ECA0  F012         	call	_parse_and_assign	;wreg free
  1909                           
  1910                           ;main.c: 623:     }
  1911  001988  EFD5  F00C         	goto	l2396
  1912  00198C                     l2394:
  1913                           
  1914                           ;main.c: 625:     {;main.c: 626:         parse_and_assign(active_piece, ports);
  1915  00198C  C031  F060         	movff	_active_piece,parse_and_assign@value
  1916  001990  C032  F061         	movff	_active_piece+1,parse_and_assign@value+1
  1917  001994  C033  F062         	movff	_active_piece+2,parse_and_assign@value+2
  1918  001998  C034  F063         	movff	_active_piece+3,parse_and_assign@value+3
  1919  00199C  0E7A               	movlw	low move_up@ports
  1920  00199E  0100               	movlb	0	; () banked
  1921  0019A0  6F64               	movwf	parse_and_assign@ports& (0+255),b
  1922  0019A2  0E00               	movlw	high move_up@ports
  1923  0019A4  6F65               	movwf	(parse_and_assign@ports+1)& (0+255),b
  1924  0019A6  ECA0  F012         	call	_parse_and_assign	;wreg free
  1925  0019AA                     l2396:
  1926                           
  1927                           ;main.c: 629:     if ((ports[0] & 0x01) == 0 && (ports[1] & 0x01) == 0 && (ports[2] & 0x
      +                          01) == 0 && (ports[3] & 0x01) == 0)
  1928  0019AA  0100               	movlb	0	; () banked
  1929  0019AC  B17A               	btfsc	move_up@ports& (0+255),0,b
  1930  0019AE  EFDB  F00C         	goto	u2571
  1931  0019B2  EFDD  F00C         	goto	u2570
  1932  0019B6                     u2571:
  1933  0019B6  EF48  F00D         	goto	l264
  1934  0019BA                     u2570:
  1935  0019BA                     
  1936                           ; BSR set to: 0
  1937  0019BA  B17B               	btfsc	(move_up@ports+1)& (0+255),0,b
  1938  0019BC  EFE2  F00C         	goto	u2581
  1939  0019C0  EFE4  F00C         	goto	u2580
  1940  0019C4                     u2581:
  1941  0019C4  EF48  F00D         	goto	l264
  1942  0019C8                     u2580:
  1943  0019C8                     
  1944                           ; BSR set to: 0
  1945  0019C8  B17C               	btfsc	(move_up@ports+2)& (0+255),0,b
  1946  0019CA  EFE9  F00C         	goto	u2591
  1947  0019CE  EFEB  F00C         	goto	u2590
  1948  0019D2                     u2591:
  1949  0019D2  EF48  F00D         	goto	l264
  1950  0019D6                     u2590:
  1951  0019D6                     
  1952                           ; BSR set to: 0
  1953  0019D6  B17D               	btfsc	(move_up@ports+3)& (0+255),0,b
  1954  0019D8  EFF0  F00C         	goto	u2601
  1955  0019DC  EFF2  F00C         	goto	u2600
  1956  0019E0                     u2601:
  1957  0019E0  EF48  F00D         	goto	l264
  1958  0019E4                     u2600:
  1959  0019E4                     
  1960                           ; BSR set to: 0
  1961                           ;main.c: 630:     {;main.c: 631:         ports[0] = ports[0] >> 1;
  1962  0019E4  90D8               	bcf	status,0,c
  1963  0019E6  317A               	rrcf	move_up@ports& (0+255),w,b
  1964  0019E8  6F7A               	movwf	move_up@ports& (0+255),b
  1965                           
  1966                           ;main.c: 632:         ports[1] = ports[1] >> 1;
  1967  0019EA  90D8               	bcf	status,0,c
  1968  0019EC  317B               	rrcf	(move_up@ports+1)& (0+255),w,b
  1969  0019EE  6F7B               	movwf	(move_up@ports+1)& (0+255),b
  1970                           
  1971                           ;main.c: 633:         ports[2] = ports[2] >> 1;
  1972  0019F0  90D8               	bcf	status,0,c
  1973  0019F2  317C               	rrcf	(move_up@ports+2)& (0+255),w,b
  1974  0019F4  6F7C               	movwf	(move_up@ports+2)& (0+255),b
  1975                           
  1976                           ;main.c: 634:         ports[3] = ports[3] >> 1;
  1977  0019F6  90D8               	bcf	status,0,c
  1978  0019F8  317D               	rrcf	(move_up@ports+3)& (0+255),w,b
  1979  0019FA  6F7D               	movwf	(move_up@ports+3)& (0+255),b
  1980                           
  1981                           ;main.c: 636:         active_piece = ((uint32_t)ports[0] << 24) | ((uint32_t)ports[1] <<
      +                           16) | ((uint32_t)ports[2] << 8) | ((uint32_t)ports[3]);
  1982  0019FC  C07C  F066         	movff	move_up@ports+2,??_move_up
  1983  001A00  6B67               	clrf	(??_move_up+1)& (0+255),b
  1984  001A02  6B68               	clrf	(??_move_up+2)& (0+255),b
  1985  001A04  6B69               	clrf	(??_move_up+3)& (0+255),b
  1986  001A06  C068  F069         	movff	??_move_up+2,??_move_up+3
  1987  001A0A  C067  F068         	movff	??_move_up+1,??_move_up+2
  1988  001A0E  C066  F067         	movff	??_move_up,??_move_up+1
  1989  001A12  6B66               	clrf	??_move_up& (0+255),b
  1990  001A14  C07B  F06A         	movff	move_up@ports+1,??_move_up+4
  1991  001A18  6B6B               	clrf	(??_move_up+5)& (0+255),b
  1992  001A1A  6B6C               	clrf	(??_move_up+6)& (0+255),b
  1993  001A1C  6B6D               	clrf	(??_move_up+7)& (0+255),b
  1994  001A1E  C06B  F06D         	movff	??_move_up+5,??_move_up+7
  1995  001A22  C06A  F06C         	movff	??_move_up+4,??_move_up+6
  1996  001A26  6B6B               	clrf	(??_move_up+5)& (0+255),b
  1997  001A28  6B6A               	clrf	(??_move_up+4)& (0+255),b
  1998  001A2A  C07A  F06E         	movff	move_up@ports,??_move_up+8
  1999  001A2E  6B6F               	clrf	(??_move_up+9)& (0+255),b
  2000  001A30  6B70               	clrf	(??_move_up+10)& (0+255),b
  2001  001A32  6B71               	clrf	(??_move_up+11)& (0+255),b
  2002  001A34  C06E  F071         	movff	??_move_up+8,??_move_up+11
  2003  001A38  6B70               	clrf	(??_move_up+10)& (0+255),b
  2004  001A3A  6B6F               	clrf	(??_move_up+9)& (0+255),b
  2005  001A3C  6B6E               	clrf	(??_move_up+8)& (0+255),b
  2006  001A3E  516A               	movf	(??_move_up+4)& (0+255),w,b
  2007  001A40  116E               	iorwf	(??_move_up+8)& (0+255),w,b
  2008  001A42  6F72               	movwf	(??_move_up+12)& (0+255),b
  2009  001A44  516B               	movf	(??_move_up+5)& (0+255),w,b
  2010  001A46  116F               	iorwf	(??_move_up+9)& (0+255),w,b
  2011  001A48  6F73               	movwf	(??_move_up+13)& (0+255),b
  2012  001A4A  516C               	movf	(??_move_up+6)& (0+255),w,b
  2013  001A4C  1170               	iorwf	(??_move_up+10)& (0+255),w,b
  2014  001A4E  6F74               	movwf	(??_move_up+14)& (0+255),b
  2015  001A50  516D               	movf	(??_move_up+7)& (0+255),w,b
  2016  001A52  1171               	iorwf	(??_move_up+11)& (0+255),w,b
  2017  001A54  6F75               	movwf	(??_move_up+15)& (0+255),b
  2018  001A56  5166               	movf	??_move_up& (0+255),w,b
  2019  001A58  1172               	iorwf	(??_move_up+12)& (0+255),w,b
  2020  001A5A  6F76               	movwf	(??_move_up+16)& (0+255),b
  2021  001A5C  5167               	movf	(??_move_up+1)& (0+255),w,b
  2022  001A5E  1173               	iorwf	(??_move_up+13)& (0+255),w,b
  2023  001A60  6F77               	movwf	(??_move_up+17)& (0+255),b
  2024  001A62  5168               	movf	(??_move_up+2)& (0+255),w,b
  2025  001A64  1174               	iorwf	(??_move_up+14)& (0+255),w,b
  2026  001A66  6F78               	movwf	(??_move_up+18)& (0+255),b
  2027  001A68  5169               	movf	(??_move_up+3)& (0+255),w,b
  2028  001A6A  1175               	iorwf	(??_move_up+15)& (0+255),w,b
  2029  001A6C  6F79               	movwf	(??_move_up+19)& (0+255),b
  2030  001A6E  517D               	movf	(move_up@ports+3)& (0+255),w,b
  2031  001A70  1176               	iorwf	(??_move_up+16)& (0+255),w,b
  2032  001A72  6E31               	movwf	_active_piece^0,c
  2033  001A74  5177               	movf	(??_move_up+17)& (0+255),w,b
  2034  001A76  6E32               	movwf	(_active_piece+1)^0,c
  2035  001A78  5178               	movf	(??_move_up+18)& (0+255),w,b
  2036  001A7A  6E33               	movwf	(_active_piece+2)^0,c
  2037  001A7C  5179               	movf	(??_move_up+19)& (0+255),w,b
  2038  001A7E  6E34               	movwf	(_active_piece+3)^0,c
  2039  001A80                     
  2040                           ; BSR set to: 0
  2041                           ;main.c: 637:         active_piece_record = active_piece;
  2042  001A80  C031  F02D         	movff	_active_piece,_active_piece_record
  2043  001A84  C032  F02E         	movff	_active_piece+1,_active_piece_record+1
  2044  001A88  C033  F02F         	movff	_active_piece+2,_active_piece_record+2
  2045  001A8C  C034  F030         	movff	_active_piece+3,_active_piece_record+3
  2046  001A90                     l264:
  2047                           
  2048                           ; BSR set to: 0
  2049  001A90  0012               	return		;funcret
  2050  001A92                     __end_of_move_up:
  2051                           	callstack 0
  2052                           
  2053 ;; *************** function _move_right *****************
  2054 ;; Defined at:
  2055 ;;		line 555 in file "main.c"
  2056 ;; Parameters:    Size  Location     Type
  2057 ;;		None
  2058 ;; Auto vars:     Size  Location     Type
  2059 ;;  temp0           1   28[BANK0 ] unsigned char 
  2060 ;;  temp1           1   27[BANK0 ] unsigned char 
  2061 ;;  temp2           1   26[BANK0 ] unsigned char 
  2062 ;;  ports           4   29[BANK0 ] unsigned char [4]
  2063 ;; Return value:  Size  Location     Type
  2064 ;;                  1    wreg      void 
  2065 ;; Registers used:
  2066 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2067 ;; Tracked objects:
  2068 ;;		On entry : 0/0
  2069 ;;		On exit  : 0/0
  2070 ;;		Unchanged: 0/0
  2071 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2072 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2073 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2074 ;;      Temps:          0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2075 ;;      Totals:         0      27       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2076 ;;Total ram usage:       27 bytes
  2077 ;; Hardware stack levels used:    1
  2078 ;; Hardware stack levels required when called:    4
  2079 ;; This function calls:
  2080 ;;		_parse_and_assign
  2081 ;; This function is called by:
  2082 ;;		_check_buttons_rg
  2083 ;; This function uses a non-reentrant model
  2084 ;;
  2085                           
  2086                           	psect	text9
  2087  001E44                     __ptext9:
  2088                           	callstack 0
  2089  001E44                     _move_right:
  2090                           	callstack 25
  2091  001E44                     
  2092                           ;main.c: 557:     uint8_t ports[4];;main.c: 558:     if (active_piece == 0x00000000)
  2093  001E44  5031               	movf	_active_piece^0,w,c
  2094  001E46  1032               	iorwf	(_active_piece+1)^0,w,c
  2095  001E48  1033               	iorwf	(_active_piece+2)^0,w,c
  2096  001E4A  1034               	iorwf	(_active_piece+3)^0,w,c
  2097  001E4C  A4D8               	btfss	status,2,c
  2098  001E4E  EF2B  F00F         	goto	u2521
  2099  001E52  EF2D  F00F         	goto	u2520
  2100  001E56                     u2521:
  2101  001E56  EF3E  F00F         	goto	l2356
  2102  001E5A                     u2520:
  2103  001E5A                     
  2104                           ;main.c: 559:     {;main.c: 560:         parse_and_assign(active_piece_record, ports);
  2105  001E5A  C02D  F060         	movff	_active_piece_record,parse_and_assign@value
  2106  001E5E  C02E  F061         	movff	_active_piece_record+1,parse_and_assign@value+1
  2107  001E62  C02F  F062         	movff	_active_piece_record+2,parse_and_assign@value+2
  2108  001E66  C030  F063         	movff	_active_piece_record+3,parse_and_assign@value+3
  2109  001E6A  0E7D               	movlw	low move_right@ports
  2110  001E6C  0100               	movlb	0	; () banked
  2111  001E6E  6F64               	movwf	parse_and_assign@ports& (0+255),b
  2112  001E70  0E00               	movlw	high move_right@ports
  2113  001E72  6F65               	movwf	(parse_and_assign@ports+1)& (0+255),b
  2114  001E74  ECA0  F012         	call	_parse_and_assign	;wreg free
  2115                           
  2116                           ;main.c: 561:     }
  2117  001E78  EF4D  F00F         	goto	l2358
  2118  001E7C                     l2356:
  2119                           
  2120                           ;main.c: 563:     {;main.c: 564:         parse_and_assign(active_piece, ports);
  2121  001E7C  C031  F060         	movff	_active_piece,parse_and_assign@value
  2122  001E80  C032  F061         	movff	_active_piece+1,parse_and_assign@value+1
  2123  001E84  C033  F062         	movff	_active_piece+2,parse_and_assign@value+2
  2124  001E88  C034  F063         	movff	_active_piece+3,parse_and_assign@value+3
  2125  001E8C  0E7D               	movlw	low move_right@ports
  2126  001E8E  0100               	movlb	0	; () banked
  2127  001E90  6F64               	movwf	parse_and_assign@ports& (0+255),b
  2128  001E92  0E00               	movlw	high move_right@ports
  2129  001E94  6F65               	movwf	(parse_and_assign@ports+1)& (0+255),b
  2130  001E96  ECA0  F012         	call	_parse_and_assign	;wreg free
  2131  001E9A                     l2358:
  2132                           
  2133                           ;main.c: 568:     if (ports[3] == 0)
  2134  001E9A  0100               	movlb	0	; () banked
  2135  001E9C  5180               	movf	(move_right@ports+3)& (0+255),w,b
  2136  001E9E  A4D8               	btfss	status,2,c
  2137  001EA0  EF54  F00F         	goto	u2531
  2138  001EA4  EF56  F00F         	goto	u2530
  2139  001EA8                     u2531:
  2140  001EA8  EFAE  F00F         	goto	l252
  2141  001EAC                     u2530:
  2142  001EAC                     
  2143                           ; BSR set to: 0
  2144                           ;main.c: 569:     {;main.c: 571:         uint8_t temp2 = ports[2];
  2145  001EAC  C07F  F07A         	movff	move_right@ports+2,move_right@temp2
  2146                           
  2147                           ;main.c: 572:         uint8_t temp1 = ports[1];
  2148  001EB0  C07E  F07B         	movff	move_right@ports+1,move_right@temp1
  2149                           
  2150                           ;main.c: 573:         uint8_t temp0 = ports[0];
  2151  001EB4  C07D  F07C         	movff	move_right@ports,move_right@temp0
  2152  001EB8                     
  2153                           ; BSR set to: 0
  2154                           ;main.c: 575:         ports[0] = 0x00;
  2155  001EB8  0E00               	movlw	0
  2156  001EBA  6F7D               	movwf	move_right@ports& (0+255),b
  2157  001EBC                     
  2158                           ; BSR set to: 0
  2159                           ;main.c: 576:         ports[1] = temp0;
  2160  001EBC  C07C  F07E         	movff	move_right@temp0,move_right@ports+1
  2161  001EC0                     
  2162                           ; BSR set to: 0
  2163                           ;main.c: 577:         ports[2] = temp1;
  2164  001EC0  C07B  F07F         	movff	move_right@temp1,move_right@ports+2
  2165  001EC4                     
  2166                           ; BSR set to: 0
  2167                           ;main.c: 578:         ports[3] = temp2;
  2168  001EC4  C07A  F080         	movff	move_right@temp2,move_right@ports+3
  2169  001EC8                     
  2170                           ; BSR set to: 0
  2171                           ;main.c: 581:         active_piece = ((uint32_t)ports[0] << 24) | ((uint32_t)ports[1] <<
      +                           16) | ((uint32_t)ports[2] << 8) | ((uint32_t)ports[3]);
  2172  001EC8  C07F  F066         	movff	move_right@ports+2,??_move_right
  2173  001ECC  6B67               	clrf	(??_move_right+1)& (0+255),b
  2174  001ECE  6B68               	clrf	(??_move_right+2)& (0+255),b
  2175  001ED0  6B69               	clrf	(??_move_right+3)& (0+255),b
  2176  001ED2  C068  F069         	movff	??_move_right+2,??_move_right+3
  2177  001ED6  C067  F068         	movff	??_move_right+1,??_move_right+2
  2178  001EDA  C066  F067         	movff	??_move_right,??_move_right+1
  2179  001EDE  6B66               	clrf	??_move_right& (0+255),b
  2180  001EE0  C07E  F06A         	movff	move_right@ports+1,??_move_right+4
  2181  001EE4  6B6B               	clrf	(??_move_right+5)& (0+255),b
  2182  001EE6  6B6C               	clrf	(??_move_right+6)& (0+255),b
  2183  001EE8  6B6D               	clrf	(??_move_right+7)& (0+255),b
  2184  001EEA  C06B  F06D         	movff	??_move_right+5,??_move_right+7
  2185  001EEE  C06A  F06C         	movff	??_move_right+4,??_move_right+6
  2186  001EF2  6B6B               	clrf	(??_move_right+5)& (0+255),b
  2187  001EF4  6B6A               	clrf	(??_move_right+4)& (0+255),b
  2188  001EF6  C07D  F06E         	movff	move_right@ports,??_move_right+8
  2189  001EFA  6B6F               	clrf	(??_move_right+9)& (0+255),b
  2190  001EFC  6B70               	clrf	(??_move_right+10)& (0+255),b
  2191  001EFE  6B71               	clrf	(??_move_right+11)& (0+255),b
  2192  001F00  C06E  F071         	movff	??_move_right+8,??_move_right+11
  2193  001F04  6B70               	clrf	(??_move_right+10)& (0+255),b
  2194  001F06  6B6F               	clrf	(??_move_right+9)& (0+255),b
  2195  001F08  6B6E               	clrf	(??_move_right+8)& (0+255),b
  2196  001F0A  516A               	movf	(??_move_right+4)& (0+255),w,b
  2197  001F0C  116E               	iorwf	(??_move_right+8)& (0+255),w,b
  2198  001F0E  6F72               	movwf	(??_move_right+12)& (0+255),b
  2199  001F10  516B               	movf	(??_move_right+5)& (0+255),w,b
  2200  001F12  116F               	iorwf	(??_move_right+9)& (0+255),w,b
  2201  001F14  6F73               	movwf	(??_move_right+13)& (0+255),b
  2202  001F16  516C               	movf	(??_move_right+6)& (0+255),w,b
  2203  001F18  1170               	iorwf	(??_move_right+10)& (0+255),w,b
  2204  001F1A  6F74               	movwf	(??_move_right+14)& (0+255),b
  2205  001F1C  516D               	movf	(??_move_right+7)& (0+255),w,b
  2206  001F1E  1171               	iorwf	(??_move_right+11)& (0+255),w,b
  2207  001F20  6F75               	movwf	(??_move_right+15)& (0+255),b
  2208  001F22  5166               	movf	??_move_right& (0+255),w,b
  2209  001F24  1172               	iorwf	(??_move_right+12)& (0+255),w,b
  2210  001F26  6F76               	movwf	(??_move_right+16)& (0+255),b
  2211  001F28  5167               	movf	(??_move_right+1)& (0+255),w,b
  2212  001F2A  1173               	iorwf	(??_move_right+13)& (0+255),w,b
  2213  001F2C  6F77               	movwf	(??_move_right+17)& (0+255),b
  2214  001F2E  5168               	movf	(??_move_right+2)& (0+255),w,b
  2215  001F30  1174               	iorwf	(??_move_right+14)& (0+255),w,b
  2216  001F32  6F78               	movwf	(??_move_right+18)& (0+255),b
  2217  001F34  5169               	movf	(??_move_right+3)& (0+255),w,b
  2218  001F36  1175               	iorwf	(??_move_right+15)& (0+255),w,b
  2219  001F38  6F79               	movwf	(??_move_right+19)& (0+255),b
  2220  001F3A  5180               	movf	(move_right@ports+3)& (0+255),w,b
  2221  001F3C  1176               	iorwf	(??_move_right+16)& (0+255),w,b
  2222  001F3E  6E31               	movwf	_active_piece^0,c
  2223  001F40  5177               	movf	(??_move_right+17)& (0+255),w,b
  2224  001F42  6E32               	movwf	(_active_piece+1)^0,c
  2225  001F44  5178               	movf	(??_move_right+18)& (0+255),w,b
  2226  001F46  6E33               	movwf	(_active_piece+2)^0,c
  2227  001F48  5179               	movf	(??_move_right+19)& (0+255),w,b
  2228  001F4A  6E34               	movwf	(_active_piece+3)^0,c
  2229  001F4C                     
  2230                           ; BSR set to: 0
  2231                           ;main.c: 582:         active_piece_record = active_piece;
  2232  001F4C  C031  F02D         	movff	_active_piece,_active_piece_record
  2233  001F50  C032  F02E         	movff	_active_piece+1,_active_piece_record+1
  2234  001F54  C033  F02F         	movff	_active_piece+2,_active_piece_record+2
  2235  001F58  C034  F030         	movff	_active_piece+3,_active_piece_record+3
  2236  001F5C                     l252:
  2237                           
  2238                           ; BSR set to: 0
  2239  001F5C  0012               	return		;funcret
  2240  001F5E                     __end_of_move_right:
  2241                           	callstack 0
  2242                           
  2243 ;; *************** function _move_left *****************
  2244 ;; Defined at:
  2245 ;;		line 586 in file "main.c"
  2246 ;; Parameters:    Size  Location     Type
  2247 ;;		None
  2248 ;; Auto vars:     Size  Location     Type
  2249 ;;  temp1           1   28[BANK0 ] unsigned char 
  2250 ;;  temp2           1   27[BANK0 ] unsigned char 
  2251 ;;  temp0           1    0        unsigned char 
  2252 ;;  ports           4   29[BANK0 ] unsigned char [4]
  2253 ;; Return value:  Size  Location     Type
  2254 ;;                  1    wreg      void 
  2255 ;; Registers used:
  2256 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2257 ;; Tracked objects:
  2258 ;;		On entry : 0/0
  2259 ;;		On exit  : 0/0
  2260 ;;		Unchanged: 0/0
  2261 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2262 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2263 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2264 ;;      Temps:          0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2265 ;;      Totals:         0      27       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2266 ;;Total ram usage:       27 bytes
  2267 ;; Hardware stack levels used:    1
  2268 ;; Hardware stack levels required when called:    4
  2269 ;; This function calls:
  2270 ;;		_parse_and_assign
  2271 ;; This function is called by:
  2272 ;;		_check_buttons_rg
  2273 ;; This function uses a non-reentrant model
  2274 ;;
  2275                           
  2276                           	psect	text10
  2277  001F5E                     __ptext10:
  2278                           	callstack 0
  2279  001F5E                     _move_left:
  2280                           	callstack 25
  2281  001F5E                     
  2282                           ;main.c: 588:     uint8_t ports[4];;main.c: 589:     if (active_piece == 0x00000000)
  2283  001F5E  5031               	movf	_active_piece^0,w,c
  2284  001F60  1032               	iorwf	(_active_piece+1)^0,w,c
  2285  001F62  1033               	iorwf	(_active_piece+2)^0,w,c
  2286  001F64  1034               	iorwf	(_active_piece+3)^0,w,c
  2287  001F66  A4D8               	btfss	status,2,c
  2288  001F68  EFB8  F00F         	goto	u2541
  2289  001F6C  EFBA  F00F         	goto	u2540
  2290  001F70                     u2541:
  2291  001F70  EFCB  F00F         	goto	l2378
  2292  001F74                     u2540:
  2293  001F74                     
  2294                           ;main.c: 590:     {;main.c: 591:         parse_and_assign(active_piece_record, ports);
  2295  001F74  C02D  F060         	movff	_active_piece_record,parse_and_assign@value
  2296  001F78  C02E  F061         	movff	_active_piece_record+1,parse_and_assign@value+1
  2297  001F7C  C02F  F062         	movff	_active_piece_record+2,parse_and_assign@value+2
  2298  001F80  C030  F063         	movff	_active_piece_record+3,parse_and_assign@value+3
  2299  001F84  0E7D               	movlw	low move_left@ports
  2300  001F86  0100               	movlb	0	; () banked
  2301  001F88  6F64               	movwf	parse_and_assign@ports& (0+255),b
  2302  001F8A  0E00               	movlw	high move_left@ports
  2303  001F8C  6F65               	movwf	(parse_and_assign@ports+1)& (0+255),b
  2304  001F8E  ECA0  F012         	call	_parse_and_assign	;wreg free
  2305                           
  2306                           ;main.c: 592:     }
  2307  001F92  EFDA  F00F         	goto	l2380
  2308  001F96                     l2378:
  2309                           
  2310                           ;main.c: 594:     {;main.c: 595:         parse_and_assign(active_piece, ports);
  2311  001F96  C031  F060         	movff	_active_piece,parse_and_assign@value
  2312  001F9A  C032  F061         	movff	_active_piece+1,parse_and_assign@value+1
  2313  001F9E  C033  F062         	movff	_active_piece+2,parse_and_assign@value+2
  2314  001FA2  C034  F063         	movff	_active_piece+3,parse_and_assign@value+3
  2315  001FA6  0E7D               	movlw	low move_left@ports
  2316  001FA8  0100               	movlb	0	; () banked
  2317  001FAA  6F64               	movwf	parse_and_assign@ports& (0+255),b
  2318  001FAC  0E00               	movlw	high move_left@ports
  2319  001FAE  6F65               	movwf	(parse_and_assign@ports+1)& (0+255),b
  2320  001FB0  ECA0  F012         	call	_parse_and_assign	;wreg free
  2321  001FB4                     l2380:
  2322                           
  2323                           ;main.c: 599:     if (ports[0] == 0)
  2324  001FB4  0100               	movlb	0	; () banked
  2325  001FB6  517D               	movf	move_left@ports& (0+255),w,b
  2326  001FB8  A4D8               	btfss	status,2,c
  2327  001FBA  EFE1  F00F         	goto	u2551
  2328  001FBE  EFE3  F00F         	goto	u2550
  2329  001FC2                     u2551:
  2330  001FC2  EF39  F010         	goto	l258
  2331  001FC6                     u2550:
  2332  001FC6                     
  2333                           ; BSR set to: 0
  2334                           ;main.c: 600:     {;main.c: 602:         uint8_t temp2 = ports[2];
  2335  001FC6  C07F  F07B         	movff	move_left@ports+2,move_left@temp2
  2336                           
  2337                           ;main.c: 603:         uint8_t temp1 = ports[1];
  2338  001FCA  C07E  F07C         	movff	move_left@ports+1,move_left@temp1
  2339                           
  2340                           ;main.c: 606:         ports[0] = temp1;
  2341  001FCE  C07C  F07D         	movff	move_left@temp1,move_left@ports
  2342                           
  2343                           ;main.c: 607:         ports[1] = temp2;
  2344  001FD2  C07B  F07E         	movff	move_left@temp2,move_left@ports+1
  2345                           
  2346                           ;main.c: 608:         ports[2] = ports[3];
  2347  001FD6  C080  F07F         	movff	move_left@ports+3,move_left@ports+2
  2348  001FDA                     
  2349                           ; BSR set to: 0
  2350                           ;main.c: 609:         ports[3] = 0x00;
  2351  001FDA  0E00               	movlw	0
  2352  001FDC  6F80               	movwf	(move_left@ports+3)& (0+255),b
  2353  001FDE                     
  2354                           ; BSR set to: 0
  2355                           ;main.c: 612:         active_piece = ((uint32_t)ports[0] << 24) | ((uint32_t)ports[1] <<
      +                           16) | ((uint32_t)ports[2] << 8) | ((uint32_t)ports[3]);
  2356  001FDE  C07F  F066         	movff	move_left@ports+2,??_move_left
  2357  001FE2  6B67               	clrf	(??_move_left+1)& (0+255),b
  2358  001FE4  6B68               	clrf	(??_move_left+2)& (0+255),b
  2359  001FE6  6B69               	clrf	(??_move_left+3)& (0+255),b
  2360  001FE8  C068  F069         	movff	??_move_left+2,??_move_left+3
  2361  001FEC  C067  F068         	movff	??_move_left+1,??_move_left+2
  2362  001FF0  C066  F067         	movff	??_move_left,??_move_left+1
  2363  001FF4  6B66               	clrf	??_move_left& (0+255),b
  2364  001FF6  C07E  F06A         	movff	move_left@ports+1,??_move_left+4
  2365  001FFA  6B6B               	clrf	(??_move_left+5)& (0+255),b
  2366  001FFC  6B6C               	clrf	(??_move_left+6)& (0+255),b
  2367  001FFE  6B6D               	clrf	(??_move_left+7)& (0+255),b
  2368  002000  C06B  F06D         	movff	??_move_left+5,??_move_left+7
  2369  002004  C06A  F06C         	movff	??_move_left+4,??_move_left+6
  2370  002008  6B6B               	clrf	(??_move_left+5)& (0+255),b
  2371  00200A  6B6A               	clrf	(??_move_left+4)& (0+255),b
  2372  00200C  C07D  F06E         	movff	move_left@ports,??_move_left+8
  2373  002010  6B6F               	clrf	(??_move_left+9)& (0+255),b
  2374  002012  6B70               	clrf	(??_move_left+10)& (0+255),b
  2375  002014  6B71               	clrf	(??_move_left+11)& (0+255),b
  2376  002016  C06E  F071         	movff	??_move_left+8,??_move_left+11
  2377  00201A  6B70               	clrf	(??_move_left+10)& (0+255),b
  2378  00201C  6B6F               	clrf	(??_move_left+9)& (0+255),b
  2379  00201E  6B6E               	clrf	(??_move_left+8)& (0+255),b
  2380  002020  516A               	movf	(??_move_left+4)& (0+255),w,b
  2381  002022  116E               	iorwf	(??_move_left+8)& (0+255),w,b
  2382  002024  6F72               	movwf	(??_move_left+12)& (0+255),b
  2383  002026  516B               	movf	(??_move_left+5)& (0+255),w,b
  2384  002028  116F               	iorwf	(??_move_left+9)& (0+255),w,b
  2385  00202A  6F73               	movwf	(??_move_left+13)& (0+255),b
  2386  00202C  516C               	movf	(??_move_left+6)& (0+255),w,b
  2387  00202E  1170               	iorwf	(??_move_left+10)& (0+255),w,b
  2388  002030  6F74               	movwf	(??_move_left+14)& (0+255),b
  2389  002032  516D               	movf	(??_move_left+7)& (0+255),w,b
  2390  002034  1171               	iorwf	(??_move_left+11)& (0+255),w,b
  2391  002036  6F75               	movwf	(??_move_left+15)& (0+255),b
  2392  002038  5166               	movf	??_move_left& (0+255),w,b
  2393  00203A  1172               	iorwf	(??_move_left+12)& (0+255),w,b
  2394  00203C  6F76               	movwf	(??_move_left+16)& (0+255),b
  2395  00203E  5167               	movf	(??_move_left+1)& (0+255),w,b
  2396  002040  1173               	iorwf	(??_move_left+13)& (0+255),w,b
  2397  002042  6F77               	movwf	(??_move_left+17)& (0+255),b
  2398  002044  5168               	movf	(??_move_left+2)& (0+255),w,b
  2399  002046  1174               	iorwf	(??_move_left+14)& (0+255),w,b
  2400  002048  6F78               	movwf	(??_move_left+18)& (0+255),b
  2401  00204A  5169               	movf	(??_move_left+3)& (0+255),w,b
  2402  00204C  1175               	iorwf	(??_move_left+15)& (0+255),w,b
  2403  00204E  6F79               	movwf	(??_move_left+19)& (0+255),b
  2404  002050  5180               	movf	(move_left@ports+3)& (0+255),w,b
  2405  002052  1176               	iorwf	(??_move_left+16)& (0+255),w,b
  2406  002054  6E31               	movwf	_active_piece^0,c
  2407  002056  5177               	movf	(??_move_left+17)& (0+255),w,b
  2408  002058  6E32               	movwf	(_active_piece+1)^0,c
  2409  00205A  5178               	movf	(??_move_left+18)& (0+255),w,b
  2410  00205C  6E33               	movwf	(_active_piece+2)^0,c
  2411  00205E  5179               	movf	(??_move_left+19)& (0+255),w,b
  2412  002060  6E34               	movwf	(_active_piece+3)^0,c
  2413  002062                     
  2414                           ; BSR set to: 0
  2415                           ;main.c: 613:         active_piece_record = active_piece;
  2416  002062  C031  F02D         	movff	_active_piece,_active_piece_record
  2417  002066  C032  F02E         	movff	_active_piece+1,_active_piece_record+1
  2418  00206A  C033  F02F         	movff	_active_piece+2,_active_piece_record+2
  2419  00206E  C034  F030         	movff	_active_piece+3,_active_piece_record+3
  2420  002072                     l258:
  2421                           
  2422                           ; BSR set to: 0
  2423  002072  0012               	return		;funcret
  2424  002074                     __end_of_move_left:
  2425                           	callstack 0
  2426                           
  2427 ;; *************** function _move_down *****************
  2428 ;; Defined at:
  2429 ;;		line 641 in file "main.c"
  2430 ;; Parameters:    Size  Location     Type
  2431 ;;		None
  2432 ;; Auto vars:     Size  Location     Type
  2433 ;;  ports           4   26[BANK0 ] unsigned char [4]
  2434 ;; Return value:  Size  Location     Type
  2435 ;;                  1    wreg      void 
  2436 ;; Registers used:
  2437 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2438 ;; Tracked objects:
  2439 ;;		On entry : 0/0
  2440 ;;		On exit  : 0/0
  2441 ;;		Unchanged: 0/0
  2442 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2443 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2444 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2445 ;;      Temps:          0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2446 ;;      Totals:         0      24       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2447 ;;Total ram usage:       24 bytes
  2448 ;; Hardware stack levels used:    1
  2449 ;; Hardware stack levels required when called:    4
  2450 ;; This function calls:
  2451 ;;		_parse_and_assign
  2452 ;; This function is called by:
  2453 ;;		_check_buttons_rg
  2454 ;; This function uses a non-reentrant model
  2455 ;;
  2456                           
  2457                           	psect	text11
  2458  001A92                     __ptext11:
  2459                           	callstack 0
  2460  001A92                     _move_down:
  2461                           	callstack 25
  2462  001A92                     
  2463                           ;main.c: 643:     uint8_t ports[4];;main.c: 644:     if (active_piece == 0x00000000)
  2464  001A92  5031               	movf	_active_piece^0,w,c
  2465  001A94  1032               	iorwf	(_active_piece+1)^0,w,c
  2466  001A96  1033               	iorwf	(_active_piece+2)^0,w,c
  2467  001A98  1034               	iorwf	(_active_piece+3)^0,w,c
  2468  001A9A  A4D8               	btfss	status,2,c
  2469  001A9C  EF52  F00D         	goto	u2471
  2470  001AA0  EF54  F00D         	goto	u2470
  2471  001AA4                     u2471:
  2472  001AA4  EF65  F00D         	goto	l2338
  2473  001AA8                     u2470:
  2474  001AA8                     
  2475                           ;main.c: 645:     {;main.c: 646:         parse_and_assign(active_piece_record, ports);
  2476  001AA8  C02D  F060         	movff	_active_piece_record,parse_and_assign@value
  2477  001AAC  C02E  F061         	movff	_active_piece_record+1,parse_and_assign@value+1
  2478  001AB0  C02F  F062         	movff	_active_piece_record+2,parse_and_assign@value+2
  2479  001AB4  C030  F063         	movff	_active_piece_record+3,parse_and_assign@value+3
  2480  001AB8  0E7A               	movlw	low move_down@ports
  2481  001ABA  0100               	movlb	0	; () banked
  2482  001ABC  6F64               	movwf	parse_and_assign@ports& (0+255),b
  2483  001ABE  0E00               	movlw	high move_down@ports
  2484  001AC0  6F65               	movwf	(parse_and_assign@ports+1)& (0+255),b
  2485  001AC2  ECA0  F012         	call	_parse_and_assign	;wreg free
  2486                           
  2487                           ;main.c: 647:     }
  2488  001AC6  EF74  F00D         	goto	l2340
  2489  001ACA                     l2338:
  2490                           
  2491                           ;main.c: 649:     {;main.c: 650:         parse_and_assign(active_piece, ports);
  2492  001ACA  C031  F060         	movff	_active_piece,parse_and_assign@value
  2493  001ACE  C032  F061         	movff	_active_piece+1,parse_and_assign@value+1
  2494  001AD2  C033  F062         	movff	_active_piece+2,parse_and_assign@value+2
  2495  001AD6  C034  F063         	movff	_active_piece+3,parse_and_assign@value+3
  2496  001ADA  0E7A               	movlw	low move_down@ports
  2497  001ADC  0100               	movlb	0	; () banked
  2498  001ADE  6F64               	movwf	parse_and_assign@ports& (0+255),b
  2499  001AE0  0E00               	movlw	high move_down@ports
  2500  001AE2  6F65               	movwf	(parse_and_assign@ports+1)& (0+255),b
  2501  001AE4  ECA0  F012         	call	_parse_and_assign	;wreg free
  2502  001AE8                     l2340:
  2503                           
  2504                           ;main.c: 653:     if ((ports[0] & 0x80) == 0 && (ports[1] & 0x80) == 0 && (ports[2] & 0x
      +                          80) == 0 && (ports[3] & 0x80) == 0)
  2505  001AE8  0100               	movlb	0	; () banked
  2506  001AEA  BF7A               	btfsc	move_down@ports& (0+255),7,b
  2507  001AEC  EF7A  F00D         	goto	u2481
  2508  001AF0  EF7C  F00D         	goto	u2480
  2509  001AF4                     u2481:
  2510  001AF4  EFE7  F00D         	goto	l270
  2511  001AF8                     u2480:
  2512  001AF8                     
  2513                           ; BSR set to: 0
  2514  001AF8  BF7B               	btfsc	(move_down@ports+1)& (0+255),7,b
  2515  001AFA  EF81  F00D         	goto	u2491
  2516  001AFE  EF83  F00D         	goto	u2490
  2517  001B02                     u2491:
  2518  001B02  EFE7  F00D         	goto	l270
  2519  001B06                     u2490:
  2520  001B06                     
  2521                           ; BSR set to: 0
  2522  001B06  BF7C               	btfsc	(move_down@ports+2)& (0+255),7,b
  2523  001B08  EF88  F00D         	goto	u2501
  2524  001B0C  EF8A  F00D         	goto	u2500
  2525  001B10                     u2501:
  2526  001B10  EFE7  F00D         	goto	l270
  2527  001B14                     u2500:
  2528  001B14                     
  2529                           ; BSR set to: 0
  2530  001B14  BF7D               	btfsc	(move_down@ports+3)& (0+255),7,b
  2531  001B16  EF8F  F00D         	goto	u2511
  2532  001B1A  EF91  F00D         	goto	u2510
  2533  001B1E                     u2511:
  2534  001B1E  EFE7  F00D         	goto	l270
  2535  001B22                     u2510:
  2536  001B22                     
  2537                           ; BSR set to: 0
  2538                           ;main.c: 654:     {;main.c: 655:         ports[0] = ports[0] << 1;
  2539  001B22  517A               	movf	move_down@ports& (0+255),w,b
  2540  001B24  257A               	addwf	move_down@ports& (0+255),w,b
  2541  001B26  6F7A               	movwf	move_down@ports& (0+255),b
  2542                           
  2543                           ;main.c: 656:         ports[1] = ports[1] << 1;
  2544  001B28  517B               	movf	(move_down@ports+1)& (0+255),w,b
  2545  001B2A  257B               	addwf	(move_down@ports+1)& (0+255),w,b
  2546  001B2C  6F7B               	movwf	(move_down@ports+1)& (0+255),b
  2547                           
  2548                           ;main.c: 657:         ports[2] = ports[2] << 1;
  2549  001B2E  517C               	movf	(move_down@ports+2)& (0+255),w,b
  2550  001B30  257C               	addwf	(move_down@ports+2)& (0+255),w,b
  2551  001B32  6F7C               	movwf	(move_down@ports+2)& (0+255),b
  2552                           
  2553                           ;main.c: 658:         ports[3] = ports[3] << 1;
  2554  001B34  517D               	movf	(move_down@ports+3)& (0+255),w,b
  2555  001B36  257D               	addwf	(move_down@ports+3)& (0+255),w,b
  2556  001B38  6F7D               	movwf	(move_down@ports+3)& (0+255),b
  2557                           
  2558                           ;main.c: 661:         active_piece = ((uint32_t)ports[0] << 24) | ((uint32_t)ports[1] <<
      +                           16) | ((uint32_t)ports[2] << 8) | ((uint32_t)ports[3]);
  2559  001B3A  C07C  F066         	movff	move_down@ports+2,??_move_down
  2560  001B3E  6B67               	clrf	(??_move_down+1)& (0+255),b
  2561  001B40  6B68               	clrf	(??_move_down+2)& (0+255),b
  2562  001B42  6B69               	clrf	(??_move_down+3)& (0+255),b
  2563  001B44  C068  F069         	movff	??_move_down+2,??_move_down+3
  2564  001B48  C067  F068         	movff	??_move_down+1,??_move_down+2
  2565  001B4C  C066  F067         	movff	??_move_down,??_move_down+1
  2566  001B50  6B66               	clrf	??_move_down& (0+255),b
  2567  001B52  C07B  F06A         	movff	move_down@ports+1,??_move_down+4
  2568  001B56  6B6B               	clrf	(??_move_down+5)& (0+255),b
  2569  001B58  6B6C               	clrf	(??_move_down+6)& (0+255),b
  2570  001B5A  6B6D               	clrf	(??_move_down+7)& (0+255),b
  2571  001B5C  C06B  F06D         	movff	??_move_down+5,??_move_down+7
  2572  001B60  C06A  F06C         	movff	??_move_down+4,??_move_down+6
  2573  001B64  6B6B               	clrf	(??_move_down+5)& (0+255),b
  2574  001B66  6B6A               	clrf	(??_move_down+4)& (0+255),b
  2575  001B68  C07A  F06E         	movff	move_down@ports,??_move_down+8
  2576  001B6C  6B6F               	clrf	(??_move_down+9)& (0+255),b
  2577  001B6E  6B70               	clrf	(??_move_down+10)& (0+255),b
  2578  001B70  6B71               	clrf	(??_move_down+11)& (0+255),b
  2579  001B72  C06E  F071         	movff	??_move_down+8,??_move_down+11
  2580  001B76  6B70               	clrf	(??_move_down+10)& (0+255),b
  2581  001B78  6B6F               	clrf	(??_move_down+9)& (0+255),b
  2582  001B7A  6B6E               	clrf	(??_move_down+8)& (0+255),b
  2583  001B7C  516A               	movf	(??_move_down+4)& (0+255),w,b
  2584  001B7E  116E               	iorwf	(??_move_down+8)& (0+255),w,b
  2585  001B80  6F72               	movwf	(??_move_down+12)& (0+255),b
  2586  001B82  516B               	movf	(??_move_down+5)& (0+255),w,b
  2587  001B84  116F               	iorwf	(??_move_down+9)& (0+255),w,b
  2588  001B86  6F73               	movwf	(??_move_down+13)& (0+255),b
  2589  001B88  516C               	movf	(??_move_down+6)& (0+255),w,b
  2590  001B8A  1170               	iorwf	(??_move_down+10)& (0+255),w,b
  2591  001B8C  6F74               	movwf	(??_move_down+14)& (0+255),b
  2592  001B8E  516D               	movf	(??_move_down+7)& (0+255),w,b
  2593  001B90  1171               	iorwf	(??_move_down+11)& (0+255),w,b
  2594  001B92  6F75               	movwf	(??_move_down+15)& (0+255),b
  2595  001B94  5166               	movf	??_move_down& (0+255),w,b
  2596  001B96  1172               	iorwf	(??_move_down+12)& (0+255),w,b
  2597  001B98  6F76               	movwf	(??_move_down+16)& (0+255),b
  2598  001B9A  5167               	movf	(??_move_down+1)& (0+255),w,b
  2599  001B9C  1173               	iorwf	(??_move_down+13)& (0+255),w,b
  2600  001B9E  6F77               	movwf	(??_move_down+17)& (0+255),b
  2601  001BA0  5168               	movf	(??_move_down+2)& (0+255),w,b
  2602  001BA2  1174               	iorwf	(??_move_down+14)& (0+255),w,b
  2603  001BA4  6F78               	movwf	(??_move_down+18)& (0+255),b
  2604  001BA6  5169               	movf	(??_move_down+3)& (0+255),w,b
  2605  001BA8  1175               	iorwf	(??_move_down+15)& (0+255),w,b
  2606  001BAA  6F79               	movwf	(??_move_down+19)& (0+255),b
  2607  001BAC  517D               	movf	(move_down@ports+3)& (0+255),w,b
  2608  001BAE  1176               	iorwf	(??_move_down+16)& (0+255),w,b
  2609  001BB0  6E31               	movwf	_active_piece^0,c
  2610  001BB2  5177               	movf	(??_move_down+17)& (0+255),w,b
  2611  001BB4  6E32               	movwf	(_active_piece+1)^0,c
  2612  001BB6  5178               	movf	(??_move_down+18)& (0+255),w,b
  2613  001BB8  6E33               	movwf	(_active_piece+2)^0,c
  2614  001BBA  5179               	movf	(??_move_down+19)& (0+255),w,b
  2615  001BBC  6E34               	movwf	(_active_piece+3)^0,c
  2616  001BBE                     
  2617                           ; BSR set to: 0
  2618                           ;main.c: 662:         active_piece_record = active_piece;
  2619  001BBE  C031  F02D         	movff	_active_piece,_active_piece_record
  2620  001BC2  C032  F02E         	movff	_active_piece+1,_active_piece_record+1
  2621  001BC6  C033  F02F         	movff	_active_piece+2,_active_piece_record+2
  2622  001BCA  C034  F030         	movff	_active_piece+3,_active_piece_record+3
  2623  001BCE                     l270:
  2624                           
  2625                           ; BSR set to: 0
  2626  001BCE  0012               	return		;funcret
  2627  001BD0                     __end_of_move_down:
  2628                           	callstack 0
  2629                           
  2630 ;; *************** function _parse_and_assign *****************
  2631 ;; Defined at:
  2632 ;;		line 666 in file "main.c"
  2633 ;; Parameters:    Size  Location     Type
  2634 ;;  value           4    0[BANK0 ] unsigned long 
  2635 ;;  ports           2    4[BANK0 ] PTR unsigned char 
  2636 ;;		 -> show_piece@ports(4), move_down@ports(4), move_up@ports(4), move_left@ports(4), 
  2637 ;;		 -> move_right@ports(4), submit_piece@ports(4), rotate_piece@port(4), 
  2638 ;; Auto vars:     Size  Location     Type
  2639 ;;		None
  2640 ;; Return value:  Size  Location     Type
  2641 ;;                  1    wreg      void 
  2642 ;; Registers used:
  2643 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2644 ;; Tracked objects:
  2645 ;;		On entry : 0/0
  2646 ;;		On exit  : 0/0
  2647 ;;		Unchanged: 0/0
  2648 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2649 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2650 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2651 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2652 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2653 ;;Total ram usage:        6 bytes
  2654 ;; Hardware stack levels used:    1
  2655 ;; Hardware stack levels required when called:    3
  2656 ;; This function calls:
  2657 ;;		Nothing
  2658 ;; This function is called by:
  2659 ;;		_move_right
  2660 ;;		_move_left
  2661 ;;		_move_up
  2662 ;;		_move_down
  2663 ;;		_show_piece
  2664 ;; This function uses a non-reentrant model
  2665 ;;
  2666                           
  2667                           	psect	text12
  2668  002540                     __ptext12:
  2669                           	callstack 0
  2670  002540                     _parse_and_assign:
  2671                           	callstack 26
  2672  002540                     
  2673                           ;main.c: 666: void parse_and_assign(uint32_t value, uint8_t *ports);main.c: 667: {;main.
      +                          c: 668:     ports[0] = (value >> 24) & 0xFF;
  2674  002540  C064  FFD9         	movff	parse_and_assign@ports,fsr2l
  2675  002544  C065  FFDA         	movff	parse_and_assign@ports+1,fsr2h
  2676  002548  C063  FFDF         	movff	parse_and_assign@value+3,indf2
  2677  00254C                     
  2678                           ;main.c: 669:     ports[1] = (value >> 16) & 0xFF;
  2679  00254C  0100               	movlb	0	; () banked
  2680  00254E  EE20 F001          	lfsr	2,1
  2681  002552  5164               	movf	parse_and_assign@ports& (0+255),w,b
  2682  002554  26D9               	addwf	fsr2l,f,c
  2683  002556  5165               	movf	(parse_and_assign@ports+1)& (0+255),w,b
  2684  002558  22DA               	addwfc	fsr2h,f,c
  2685  00255A  C062  FFDF         	movff	parse_and_assign@value+2,indf2
  2686  00255E                     
  2687                           ; BSR set to: 0
  2688                           ;main.c: 670:     ports[2] = (value >> 8) & 0xFF;
  2689  00255E  EE20 F002          	lfsr	2,2
  2690  002562  5164               	movf	parse_and_assign@ports& (0+255),w,b
  2691  002564  26D9               	addwf	fsr2l,f,c
  2692  002566  5165               	movf	(parse_and_assign@ports+1)& (0+255),w,b
  2693  002568  22DA               	addwfc	fsr2h,f,c
  2694  00256A  C061  FFDF         	movff	parse_and_assign@value+1,indf2
  2695  00256E                     
  2696                           ; BSR set to: 0
  2697                           ;main.c: 671:     ports[3] = (value & 0xFF);
  2698  00256E  EE20 F003          	lfsr	2,3
  2699  002572  5164               	movf	parse_and_assign@ports& (0+255),w,b
  2700  002574  26D9               	addwf	fsr2l,f,c
  2701  002576  5165               	movf	(parse_and_assign@ports+1)& (0+255),w,b
  2702  002578  22DA               	addwfc	fsr2h,f,c
  2703  00257A  C060  FFDF         	movff	parse_and_assign@value,indf2
  2704  00257E                     
  2705                           ; BSR set to: 0
  2706  00257E  0012               	return		;funcret
  2707  002580                     __end_of_parse_and_assign:
  2708                           	callstack 0
  2709                           
  2710 ;; *************** function _InitializeTimerAndInterrupts *****************
  2711 ;; Defined at:
  2712 ;;		line 181 in file "main.c"
  2713 ;; Parameters:    Size  Location     Type
  2714 ;;		None
  2715 ;; Auto vars:     Size  Location     Type
  2716 ;;		None
  2717 ;; Return value:  Size  Location     Type
  2718 ;;                  1    wreg      void 
  2719 ;; Registers used:
  2720 ;;		wreg, status,2
  2721 ;; Tracked objects:
  2722 ;;		On entry : 0/0
  2723 ;;		On exit  : 0/0
  2724 ;;		Unchanged: 0/0
  2725 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2726 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2727 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2728 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2729 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2730 ;;Total ram usage:        0 bytes
  2731 ;; Hardware stack levels used:    1
  2732 ;; Hardware stack levels required when called:    3
  2733 ;; This function calls:
  2734 ;;		Nothing
  2735 ;; This function is called by:
  2736 ;;		_main
  2737 ;; This function uses a non-reentrant model
  2738 ;;
  2739                           
  2740                           	psect	text13
  2741  0025BE                     __ptext13:
  2742                           	callstack 0
  2743  0025BE                     _InitializeTimerAndInterrupts:
  2744                           	callstack 27
  2745  0025BE                     
  2746                           ;main.c: 186:     INTCONbits.RBIF = 0;
  2747  0025BE  90F2               	bcf	242,0,c	;volatile
  2748                           
  2749                           ;main.c: 187:     INTCONbits.TMR0IF = 0;
  2750  0025C0  94F2               	bcf	242,2,c	;volatile
  2751                           
  2752                           ;main.c: 188:     INTCONbits.INT0IF = 0;
  2753  0025C2  92F2               	bcf	242,1,c	;volatile
  2754                           
  2755                           ;main.c: 191:     RCONbits.IPEN = 0;
  2756  0025C4  9ED0               	bcf	208,7,c	;volatile
  2757                           
  2758                           ;main.c: 194:     T0CONbits.TMR0ON = 1;
  2759  0025C6  8ED5               	bsf	213,7,c	;volatile
  2760                           
  2761                           ;main.c: 195:     T0CONbits.T08BIT = 0;
  2762  0025C8  9CD5               	bcf	213,6,c	;volatile
  2763                           
  2764                           ;main.c: 196:     T0CONbits.T0CS = 0;
  2765  0025CA  9AD5               	bcf	213,5,c	;volatile
  2766                           
  2767                           ;main.c: 197:     T0CONbits.T0SE = 0;
  2768  0025CC  98D5               	bcf	213,4,c	;volatile
  2769                           
  2770                           ;main.c: 198:     T0CONbits.PSA = 0;
  2771  0025CE  96D5               	bcf	213,3,c	;volatile
  2772                           
  2773                           ;main.c: 199:     T0CONbits.T0PS2 = 1;
  2774  0025D0  84D5               	bsf	213,2,c	;volatile
  2775                           
  2776                           ;main.c: 200:     T0CONbits.T0PS1 = 0;
  2777  0025D2  92D5               	bcf	213,1,c	;volatile
  2778                           
  2779                           ;main.c: 201:     T0CONbits.T0PS0 = 1;
  2780  0025D4  80D5               	bsf	213,0,c	;volatile
  2781                           
  2782                           ;main.c: 204:     INTCON3bits.INT3IF = 0;
  2783  0025D6  94F0               	bcf	240,2,c	;volatile
  2784                           
  2785                           ;main.c: 205:     INTCON3bits.INT3IE = 1;
  2786  0025D8  8AF0               	bsf	240,5,c	;volatile
  2787  0025DA                     
  2788                           ;main.c: 208:     TMR0L = 0x69;
  2789  0025DA  0E69               	movlw	105
  2790  0025DC  6ED6               	movwf	214,c	;volatile
  2791                           
  2792                           ;main.c: 209:     TMR0H = 0x67;
  2793  0025DE  0E67               	movlw	103
  2794  0025E0  6ED7               	movwf	215,c	;volatile
  2795  0025E2                     
  2796                           ;main.c: 211:     INTCONbits.GIE = 1;
  2797  0025E2  8EF2               	bsf	242,7,c	;volatile
  2798  0025E4                     
  2799                           ;main.c: 212:     INTCONbits.PEIE = 1;
  2800  0025E4  8CF2               	bsf	242,6,c	;volatile
  2801  0025E6                     
  2802                           ;main.c: 213:     INTCONbits.TMR0IE = 1;
  2803  0025E6  8AF2               	bsf	242,5,c	;volatile
  2804  0025E8                     
  2805                           ;main.c: 214:     INTCONbits.INT0IE = 1;
  2806  0025E8  88F2               	bsf	242,4,c	;volatile
  2807  0025EA                     
  2808                           ;main.c: 215:     INTCON3bits.INT3IE = 1;
  2809  0025EA  8AF0               	bsf	240,5,c	;volatile
  2810  0025EC                     
  2811                           ;main.c: 216:     INTCONbits.RBIE = 0;
  2812  0025EC  96F2               	bcf	242,3,c	;volatile
  2813  0025EE  0012               	return		;funcret
  2814  0025F0                     __end_of_InitializeTimerAndInterrupts:
  2815                           	callstack 0
  2816                           
  2817 ;; *************** function _Init *****************
  2818 ;; Defined at:
  2819 ;;		line 130 in file "main.c"
  2820 ;; Parameters:    Size  Location     Type
  2821 ;;		None
  2822 ;; Auto vars:     Size  Location     Type
  2823 ;;		None
  2824 ;; Return value:  Size  Location     Type
  2825 ;;                  1    wreg      void 
  2826 ;; Registers used:
  2827 ;;		wreg, status,2
  2828 ;; Tracked objects:
  2829 ;;		On entry : 0/0
  2830 ;;		On exit  : 0/0
  2831 ;;		Unchanged: 0/0
  2832 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2833 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2834 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2835 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2836 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2837 ;;Total ram usage:        0 bytes
  2838 ;; Hardware stack levels used:    1
  2839 ;; Hardware stack levels required when called:    3
  2840 ;; This function calls:
  2841 ;;		Nothing
  2842 ;; This function is called by:
  2843 ;;		_main
  2844 ;; This function uses a non-reentrant model
  2845 ;;
  2846                           
  2847                           	psect	text14
  2848  0023E0                     __ptext14:
  2849                           	callstack 0
  2850  0023E0                     _Init:
  2851                           	callstack 27
  2852  0023E0                     
  2853                           ;main.c: 136:     TRISA = 0x0F;
  2854  0023E0  0E0F               	movlw	15
  2855  0023E2  6E92               	movwf	146,c	;volatile
  2856                           
  2857                           ;main.c: 137:     LATA = 0x00;
  2858  0023E4  0E00               	movlw	0
  2859  0023E6  6E89               	movwf	137,c	;volatile
  2860                           
  2861                           ;main.c: 138:     PORTA = 0x00;
  2862  0023E8  0E00               	movlw	0
  2863  0023EA  6E80               	movwf	128,c	;volatile
  2864                           
  2865                           ;main.c: 141:     TRISB = 0x0F;
  2866  0023EC  0E0F               	movlw	15
  2867  0023EE  6E93               	movwf	147,c	;volatile
  2868                           
  2869                           ;main.c: 142:     PORTB = 0x00;
  2870  0023F0  0E00               	movlw	0
  2871  0023F2  6E81               	movwf	129,c	;volatile
  2872  0023F4                     
  2873                           ;main.c: 143:     LATB = PORTB;
  2874  0023F4  CF81 FF8A          	movff	3969,3978	;volatile
  2875                           
  2876                           ;main.c: 148:     TRISC = 0x00;
  2877  0023F8  0E00               	movlw	0
  2878  0023FA  6E94               	movwf	148,c	;volatile
  2879                           
  2880                           ;main.c: 149:     LATC = 0x00;
  2881  0023FC  0E00               	movlw	0
  2882  0023FE  6E8B               	movwf	139,c	;volatile
  2883                           
  2884                           ;main.c: 150:     PORTC = 0x00;
  2885  002400  0E00               	movlw	0
  2886  002402  6E82               	movwf	130,c	;volatile
  2887                           
  2888                           ;main.c: 153:     TRISD = 0x00;
  2889  002404  0E00               	movlw	0
  2890  002406  6E95               	movwf	149,c	;volatile
  2891                           
  2892                           ;main.c: 154:     LATD = 0x00;
  2893  002408  0E00               	movlw	0
  2894  00240A  6E8C               	movwf	140,c	;volatile
  2895                           
  2896                           ;main.c: 155:     PORTD = 0x00;
  2897  00240C  0E00               	movlw	0
  2898  00240E  6E83               	movwf	131,c	;volatile
  2899                           
  2900                           ;main.c: 158:     TRISE = 0x00;
  2901  002410  0E00               	movlw	0
  2902  002412  6E96               	movwf	150,c	;volatile
  2903                           
  2904                           ;main.c: 159:     LATE = 0x00;
  2905  002414  0E00               	movlw	0
  2906  002416  6E8D               	movwf	141,c	;volatile
  2907                           
  2908                           ;main.c: 160:     PORTE = 0x00;
  2909  002418  0E00               	movlw	0
  2910  00241A  6E84               	movwf	132,c	;volatile
  2911                           
  2912                           ;main.c: 163:     TRISF = 0x00;
  2913  00241C  0E00               	movlw	0
  2914  00241E  6E97               	movwf	151,c	;volatile
  2915                           
  2916                           ;main.c: 164:     LATF = 0x00;
  2917  002420  0E00               	movlw	0
  2918  002422  6E8E               	movwf	142,c	;volatile
  2919                           
  2920                           ;main.c: 165:     PORTF = 0x00;
  2921  002424  0E00               	movlw	0
  2922  002426  6E85               	movwf	133,c	;volatile
  2923                           
  2924                           ;main.c: 168:     TRISG = 0x3F;
  2925  002428  0E3F               	movlw	63
  2926  00242A  6E98               	movwf	152,c	;volatile
  2927                           
  2928                           ;main.c: 169:     LATG = 0x00;
  2929  00242C  0E00               	movlw	0
  2930  00242E  6E8F               	movwf	143,c	;volatile
  2931                           
  2932                           ;main.c: 170:     PORTG = 0x00;
  2933  002430  0E00               	movlw	0
  2934  002432  6E86               	movwf	134,c	;volatile
  2935                           
  2936                           ;main.c: 172:     TRISH = 0x00;
  2937  002434  0E00               	movlw	0
  2938  002436  6E99               	movwf	153,c	;volatile
  2939                           
  2940                           ;main.c: 173:     TRISJ = 0x00;
  2941  002438  0E00               	movlw	0
  2942  00243A  6E9A               	movwf	154,c	;volatile
  2943                           
  2944                           ;main.c: 175:     PORTH = 0x00;
  2945  00243C  0E00               	movlw	0
  2946  00243E  6E87               	movwf	135,c	;volatile
  2947                           
  2948                           ;main.c: 176:     PORTJ = 0x00;
  2949  002440  0E00               	movlw	0
  2950  002442  6E88               	movwf	136,c	;volatile
  2951  002444                     
  2952                           ;main.c: 178:     lastRBState = PORTB;
  2953  002444  CF81 F056          	movff	3969,_lastRBState	;volatile
  2954  002448  0012               	return		;funcret
  2955  00244A                     __end_of_Init:
  2956                           	callstack 0
  2957                           
  2958 ;; *************** function _HandleInterrupt *****************
  2959 ;; Defined at:
  2960 ;;		line 223 in file "main.c"
  2961 ;; Parameters:    Size  Location     Type
  2962 ;;		None
  2963 ;; Auto vars:     Size  Location     Type
  2964 ;;		None
  2965 ;; Return value:  Size  Location     Type
  2966 ;;                  1    wreg      void 
  2967 ;; Registers used:
  2968 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2969 ;; Tracked objects:
  2970 ;;		On entry : 0/0
  2971 ;;		On exit  : 0/0
  2972 ;;		Unchanged: 0/0
  2973 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2974 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2975 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2976 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2977 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2978 ;;Total ram usage:        2 bytes
  2979 ;; Hardware stack levels used:    1
  2980 ;; Hardware stack levels required when called:    2
  2981 ;; This function calls:
  2982 ;;		_rotate_piece
  2983 ;;		_submit_piece
  2984 ;;		i2_move_down
  2985 ;;		i2_show_piece
  2986 ;; This function is called by:
  2987 ;;		Interrupt level 2
  2988 ;; This function uses a non-reentrant model
  2989 ;;
  2990                           
  2991                           	psect	intcode
  2992  000008                     __pintcode:
  2993                           	callstack 0
  2994  000008                     _HandleInterrupt:
  2995                           	callstack 25
  2996                           
  2997                           ;incstack = 0
  2998  000008  8257               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  2999  00000A  ED92  F009         	call	int_func,f	;refresh shadow registers
  3000                           
  3001                           	psect	intcode_body
  3002  001324                     __pintcode_body:
  3003                           	callstack 25
  3004  001324                     int_func:
  3005                           	callstack 25
  3006  001324  0006               	pop		; remove dummy address from shadow register refresh
  3007  001326  CFD9 F02B          	movff	fsr2l,??_HandleInterrupt
  3008  00132A  CFDA F02C          	movff	fsr2h,??_HandleInterrupt+1
  3009  00132E                     
  3010                           ;main.c: 226:     if (INTCON3bits.INT3IF == 1)
  3011  00132E  A4F0               	btfss	240,2,c	;volatile
  3012  001330  EF9C  F009         	goto	i2u234_41
  3013  001334  EF9E  F009         	goto	i2u234_40
  3014  001338                     i2u234_41:
  3015  001338  EFA8  F009         	goto	i2l2246
  3016  00133C                     i2u234_40:
  3017  00133C                     
  3018                           ;main.c: 227:     {;main.c: 230:         if (PORTBbits.RB3 == 1)
  3019  00133C  A681               	btfss	129,3,c	;volatile
  3020  00133E  EFA3  F009         	goto	i2u235_41
  3021  001342  EFA5  F009         	goto	i2u235_40
  3022  001346                     i2u235_41:
  3023  001346  EFA7  F009         	goto	i2l2244
  3024  00134A                     i2u235_40:
  3025  00134A                     
  3026                           ;main.c: 231:         {;main.c: 232:             submit_piece();
  3027  00134A  ECE8  F00D         	call	_submit_piece	;wreg free
  3028  00134E                     i2l2244:
  3029                           
  3030                           ;main.c: 236:         INTCON3bits.INT3IF = 0;
  3031  00134E  94F0               	bcf	240,2,c	;volatile
  3032  001350                     i2l2246:
  3033                           
  3034                           ;main.c: 239:     if (INTCONbits.INT0IF == 1)
  3035  001350  A2F2               	btfss	242,1,c	;volatile
  3036  001352  EFAD  F009         	goto	i2u236_41
  3037  001356  EFAF  F009         	goto	i2u236_40
  3038  00135A                     i2u236_41:
  3039  00135A  EFCD  F009         	goto	i2l2260
  3040  00135E                     i2u236_40:
  3041  00135E                     
  3042                           ;main.c: 240:     {;main.c: 242:         if (PORTBbits.RB0 == 1)
  3043  00135E  A081               	btfss	129,0,c	;volatile
  3044  001360  EFB4  F009         	goto	i2u237_41
  3045  001364  EFB6  F009         	goto	i2u237_40
  3046  001368                     i2u237_41:
  3047  001368  EFCC  F009         	goto	i2l2258
  3048  00136C                     i2u237_40:
  3049  00136C                     
  3050                           ;main.c: 243:         {;main.c: 244:             if (active_piece_first == 0x01030000)
  3051  00136C  0E03               	movlw	3
  3052  00136E  0100               	movlb	0	; () banked
  3053  001370  1984               	xorwf	(_active_piece_first+2)& (0+255),w,b
  3054  001372  E108               	bnz	i2u238_41
  3055  001374  0585               	decf	(_active_piece_first+3)& (0+255),w,b
  3056  001376  1182               	iorwf	_active_piece_first& (0+255),w,b
  3057  001378  1183               	iorwf	(_active_piece_first+1)& (0+255),w,b
  3058  00137A  A4D8               	btfss	status,2,c
  3059  00137C  EFC2  F009         	goto	i2u238_41
  3060  001380  EFC4  F009         	goto	i2u238_40
  3061  001384                     i2u238_41:
  3062  001384  EFCC  F009         	goto	i2l2258
  3063  001388                     i2u238_40:
  3064  001388                     
  3065                           ; BSR set to: 0
  3066                           ;main.c: 245:             {;main.c: 246:                 show_piece();
  3067  001388  EC31  F00B         	call	i2_show_piece	;wreg free
  3068                           
  3069                           ;main.c: 247:                 rotate_piece();
  3070  00138C  EC06  F008         	call	_rotate_piece	;wreg free
  3071                           
  3072                           ;main.c: 248:                 show_piece();
  3073  001390  EC31  F00B         	call	i2_show_piece	;wreg free
  3074  001394                     
  3075                           ;main.c: 250:                 TMR0H = 0xFF;
  3076  001394  68D7               	setf	215,c	;volatile
  3077  001396                     
  3078                           ;main.c: 251:                 TMR0L = 0xFF;
  3079  001396  68D6               	setf	214,c	;volatile
  3080  001398                     i2l2258:
  3081                           
  3082                           ;main.c: 254:         INTCONbits.INT0IF = 0;
  3083  001398  92F2               	bcf	242,1,c	;volatile
  3084  00139A                     i2l2260:
  3085                           
  3086                           ;main.c: 257:     if (INTCONbits.RBIF == 1)
  3087  00139A  A0F2               	btfss	242,0,c	;volatile
  3088  00139C  EFD2  F009         	goto	i2u239_41
  3089  0013A0  EFD4  F009         	goto	i2u239_40
  3090  0013A4                     i2u239_41:
  3091  0013A4  EFD5  F009         	goto	i2l162
  3092  0013A8                     i2u239_40:
  3093  0013A8                     
  3094                           ;main.c: 258:     {;main.c: 259:         INTCONbits.RBIF = 0;
  3095  0013A8  90F2               	bcf	242,0,c	;volatile
  3096  0013AA                     i2l162:
  3097                           
  3098                           ;main.c: 262:     if (INTCONbits.TMR0IF == 1)
  3099  0013AA  A4F2               	btfss	242,2,c	;volatile
  3100  0013AC  EFDA  F009         	goto	i2u240_41
  3101  0013B0  EFDC  F009         	goto	i2u240_40
  3102  0013B4                     i2u240_41:
  3103  0013B4  EF62  F00A         	goto	i2l171
  3104  0013B8                     i2u240_40:
  3105  0013B8                     
  3106                           ;main.c: 263:     {;main.c: 265:         two_seconds_counter++;
  3107  0013B8  4A41               	infsnz	_two_seconds_counter^0,f,c
  3108  0013BA  2A42               	incf	(_two_seconds_counter+1)^0,f,c
  3109  0013BC                     
  3110                           ;main.c: 266:         INTCONbits.TMR0IF = 0;
  3111  0013BC  94F2               	bcf	242,2,c	;volatile
  3112  0013BE                     
  3113                           ;main.c: 267:         TMR0L = 0x69;
  3114  0013BE  0E69               	movlw	105
  3115  0013C0  6ED6               	movwf	214,c	;volatile
  3116  0013C2                     
  3117                           ;main.c: 268:         TMR0H = 0x67;
  3118  0013C2  0E67               	movlw	103
  3119  0013C4  6ED7               	movwf	215,c	;volatile
  3120  0013C6                     
  3121                           ;main.c: 269:         if (blink_flag == 0)
  3122  0013C6  5043               	movf	_blink_flag^0,w,c
  3123  0013C8  1044               	iorwf	(_blink_flag+1)^0,w,c
  3124  0013CA  A4D8               	btfss	status,2,c
  3125  0013CC  EFEA  F009         	goto	i2u241_41
  3126  0013D0  EFEC  F009         	goto	i2u241_40
  3127  0013D4                     i2u241_41:
  3128  0013D4  EF02  F00A         	goto	i2l2278
  3129  0013D8                     i2u241_40:
  3130  0013D8                     
  3131                           ;main.c: 270:         {;main.c: 272:             blink_flag = 1;
  3132  0013D8  0E00               	movlw	0
  3133  0013DA  6E44               	movwf	(_blink_flag+1)^0,c
  3134  0013DC  0E01               	movlw	1
  3135  0013DE  6E43               	movwf	_blink_flag^0,c
  3136  0013E0                     
  3137                           ;main.c: 273:             active_piece_record = active_piece;
  3138  0013E0  C031  F02D         	movff	_active_piece,_active_piece_record
  3139  0013E4  C032  F02E         	movff	_active_piece+1,_active_piece_record+1
  3140  0013E8  C033  F02F         	movff	_active_piece+2,_active_piece_record+2
  3141  0013EC  C034  F030         	movff	_active_piece+3,_active_piece_record+3
  3142                           
  3143                           ;main.c: 274:             active_piece = 0x00000000;
  3144  0013F0  0E00               	movlw	0
  3145  0013F2  6E31               	movwf	_active_piece^0,c
  3146  0013F4  0E00               	movlw	0
  3147  0013F6  6E32               	movwf	(_active_piece+1)^0,c
  3148  0013F8  0E00               	movlw	0
  3149  0013FA  6E33               	movwf	(_active_piece+2)^0,c
  3150  0013FC  0E00               	movlw	0
  3151  0013FE  6E34               	movwf	(_active_piece+3)^0,c
  3152                           
  3153                           ;main.c: 275:         }
  3154  001400  EF16  F00A         	goto	i2l2282
  3155  001404                     i2l2278:
  3156                           
  3157                           ;main.c: 277:         {;main.c: 279:             blink_flag = 0;
  3158  001404  0E00               	movlw	0
  3159  001406  6E44               	movwf	(_blink_flag+1)^0,c
  3160  001408  0E00               	movlw	0
  3161  00140A  6E43               	movwf	_blink_flag^0,c
  3162  00140C                     
  3163                           ;main.c: 280:             active_piece = active_piece_record;
  3164  00140C  C02D  F031         	movff	_active_piece_record,_active_piece
  3165  001410  C02E  F032         	movff	_active_piece_record+1,_active_piece+1
  3166  001414  C02F  F033         	movff	_active_piece_record+2,_active_piece+2
  3167  001418  C030  F034         	movff	_active_piece_record+3,_active_piece+3
  3168                           
  3169                           ;main.c: 281:             active_piece_record = 0x00000000;
  3170  00141C  0E00               	movlw	0
  3171  00141E  6E2D               	movwf	_active_piece_record^0,c
  3172  001420  0E00               	movlw	0
  3173  001422  6E2E               	movwf	(_active_piece_record+1)^0,c
  3174  001424  0E00               	movlw	0
  3175  001426  6E2F               	movwf	(_active_piece_record+2)^0,c
  3176  001428  0E00               	movlw	0
  3177  00142A  6E30               	movwf	(_active_piece_record+3)^0,c
  3178  00142C                     i2l2282:
  3179                           
  3180                           ;main.c: 284:         if (two_seconds_counter == 8)
  3181  00142C  0E08               	movlw	8
  3182  00142E  1841               	xorwf	_two_seconds_counter^0,w,c
  3183  001430  1042               	iorwf	(_two_seconds_counter+1)^0,w,c
  3184  001432  A4D8               	btfss	status,2,c
  3185  001434  EF1E  F00A         	goto	i2u242_41
  3186  001438  EF20  F00A         	goto	i2u242_40
  3187  00143C                     i2u242_41:
  3188  00143C  EF62  F00A         	goto	i2l171
  3189  001440                     i2u242_40:
  3190  001440                     
  3191                           ;main.c: 285:         {;main.c: 287:             move_down();
  3192  001440  EC86  F00E         	call	i2_move_down	;wreg free
  3193  001444                     
  3194                           ;main.c: 289:             two_seconds_counter = 0;
  3195  001444  0E00               	movlw	0
  3196  001446  6E42               	movwf	(_two_seconds_counter+1)^0,c
  3197  001448  0E00               	movlw	0
  3198  00144A  6E41               	movwf	_two_seconds_counter^0,c
  3199  00144C                     
  3200                           ;main.c: 291:             if (LATC_flag == 1)
  3201  00144C  043F               	decf	_LATC_flag^0,w,c
  3202  00144E  1040               	iorwf	(_LATC_flag+1)^0,w,c
  3203  001450  A4D8               	btfss	status,2,c
  3204  001452  EF2D  F00A         	goto	i2u243_41
  3205  001456  EF2F  F00A         	goto	i2u243_40
  3206  00145A                     i2u243_41:
  3207  00145A  EF35  F00A         	goto	i2l2294
  3208  00145E                     i2u243_40:
  3209  00145E                     
  3210                           ;main.c: 292:             {;main.c: 293:                 LATC_value = LATC_old;
  3211  00145E  C04C  F050         	movff	_LATC_old,_LATC_value
  3212  001462                     
  3213                           ;main.c: 294:                 LATC_flag = 0;
  3214  001462  0E00               	movlw	0
  3215  001464  6E40               	movwf	(_LATC_flag+1)^0,c
  3216  001466  0E00               	movlw	0
  3217  001468  6E3F               	movwf	_LATC_flag^0,c
  3218  00146A                     i2l2294:
  3219                           
  3220                           ;main.c: 296:             if (LATD_flag == 1)
  3221  00146A  043D               	decf	_LATD_flag^0,w,c
  3222  00146C  103E               	iorwf	(_LATD_flag+1)^0,w,c
  3223  00146E  A4D8               	btfss	status,2,c
  3224  001470  EF3C  F00A         	goto	i2u244_41
  3225  001474  EF3E  F00A         	goto	i2u244_40
  3226  001478                     i2u244_41:
  3227  001478  EF44  F00A         	goto	i2l2300
  3228  00147C                     i2u244_40:
  3229  00147C                     
  3230                           ;main.c: 297:             {;main.c: 298:                 LATD_value = LATD_old;
  3231  00147C  C04B  F04F         	movff	_LATD_old,_LATD_value
  3232  001480                     
  3233                           ;main.c: 299:                 LATD_flag = 0;
  3234  001480  0E00               	movlw	0
  3235  001482  6E3E               	movwf	(_LATD_flag+1)^0,c
  3236  001484  0E00               	movlw	0
  3237  001486  6E3D               	movwf	_LATD_flag^0,c
  3238  001488                     i2l2300:
  3239                           
  3240                           ;main.c: 301:             if (LATE_flag == 1)
  3241  001488  043B               	decf	_LATE_flag^0,w,c
  3242  00148A  103C               	iorwf	(_LATE_flag+1)^0,w,c
  3243  00148C  A4D8               	btfss	status,2,c
  3244  00148E  EF4B  F00A         	goto	i2u245_41
  3245  001492  EF4D  F00A         	goto	i2u245_40
  3246  001496                     i2u245_41:
  3247  001496  EF53  F00A         	goto	i2l2306
  3248  00149A                     i2u245_40:
  3249  00149A                     
  3250                           ;main.c: 302:             {;main.c: 303:                 LATE_value = LATE_old;
  3251  00149A  C04A  F04E         	movff	_LATE_old,_LATE_value
  3252  00149E                     
  3253                           ;main.c: 304:                 LATE_flag = 0;
  3254  00149E  0E00               	movlw	0
  3255  0014A0  6E3C               	movwf	(_LATE_flag+1)^0,c
  3256  0014A2  0E00               	movlw	0
  3257  0014A4  6E3B               	movwf	_LATE_flag^0,c
  3258  0014A6                     i2l2306:
  3259                           
  3260                           ;main.c: 306:             if (LATF_flag == 1)
  3261  0014A6  0439               	decf	_LATF_flag^0,w,c
  3262  0014A8  103A               	iorwf	(_LATF_flag+1)^0,w,c
  3263  0014AA  A4D8               	btfss	status,2,c
  3264  0014AC  EF5A  F00A         	goto	i2u246_41
  3265  0014B0  EF5C  F00A         	goto	i2u246_40
  3266  0014B4                     i2u246_41:
  3267  0014B4  EF62  F00A         	goto	i2l171
  3268  0014B8                     i2u246_40:
  3269  0014B8                     
  3270                           ;main.c: 307:             {;main.c: 308:                 LATF_value = LATF_old;
  3271  0014B8  C049  F04D         	movff	_LATF_old,_LATF_value
  3272  0014BC                     
  3273                           ;main.c: 309:                 LATF_flag = 0;
  3274  0014BC  0E00               	movlw	0
  3275  0014BE  6E3A               	movwf	(_LATF_flag+1)^0,c
  3276  0014C0  0E00               	movlw	0
  3277  0014C2  6E39               	movwf	_LATF_flag^0,c
  3278  0014C4                     i2l171:
  3279  0014C4  C02C  FFDA         	movff	??_HandleInterrupt+1,fsr2h
  3280  0014C8  C02B  FFD9         	movff	??_HandleInterrupt,fsr2l
  3281  0014CC  9257               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  3282  0014CE  0011               	retfie		f
  3283  0014D0                     __end_of_HandleInterrupt:
  3284                           	callstack 0
  3285                           
  3286 ;; *************** function i2_show_piece *****************
  3287 ;; Defined at:
  3288 ;;		line 699 in file "main.c"
  3289 ;; Parameters:    Size  Location     Type
  3290 ;;		None
  3291 ;; Auto vars:     Size  Location     Type
  3292 ;;  ports           4    6[COMRAM] unsigned char [4]
  3293 ;; Return value:  Size  Location     Type
  3294 ;;                  1    wreg      void 
  3295 ;; Registers used:
  3296 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3297 ;; Tracked objects:
  3298 ;;		On entry : 0/0
  3299 ;;		On exit  : 0/0
  3300 ;;		Unchanged: 0/0
  3301 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3302 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3303 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3304 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3305 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3306 ;;Total ram usage:        4 bytes
  3307 ;; Hardware stack levels used:    1
  3308 ;; Hardware stack levels required when called:    1
  3309 ;; This function calls:
  3310 ;;		i2_parse_and_assign
  3311 ;; This function is called by:
  3312 ;;		_HandleInterrupt
  3313 ;; This function uses a non-reentrant model
  3314 ;;
  3315                           
  3316                           	psect	text16
  3317  001662                     __ptext16:
  3318                           	callstack 0
  3319  001662                     i2_show_piece:
  3320                           	callstack 25
  3321  001662                     
  3322                           ;main.c: 701:     uint8_t ports[4];;main.c: 702:     parse_and_assign(active_piece, port
      +                          s);
  3323  001662  C031  F001         	movff	_active_piece,i2parse_and_assign@value
  3324  001666  C032  F002         	movff	_active_piece+1,i2parse_and_assign@value+1
  3325  00166A  C033  F003         	movff	_active_piece+2,i2parse_and_assign@value+2
  3326  00166E  C034  F004         	movff	_active_piece+3,i2parse_and_assign@value+3
  3327  001672  0E07               	movlw	low i2show_piece@ports
  3328  001674  6E05               	movwf	i2parse_and_assign@ports^0,c
  3329  001676  0E00               	movlw	high i2show_piece@ports
  3330  001678  6E06               	movwf	(i2parse_and_assign@ports+1)^0,c
  3331  00167A  ECC0  F012         	call	i2_parse_and_assign	;wreg free
  3332  00167E                     
  3333                           ;main.c: 704:     LATC = ports[0] | LATC_value;
  3334  00167E  5007               	movf	i2show_piece@ports^0,w,c
  3335  001680  1050               	iorwf	_LATC_value^0,w,c
  3336  001682  6E8B               	movwf	139,c	;volatile
  3337  001684                     
  3338                           ;main.c: 705:     LATD = ports[1] | LATD_value;
  3339  001684  5008               	movf	(i2show_piece@ports+1)^0,w,c
  3340  001686  104F               	iorwf	_LATD_value^0,w,c
  3341  001688  6E8C               	movwf	140,c	;volatile
  3342  00168A                     
  3343                           ;main.c: 706:     LATE = ports[2] | LATE_value;
  3344  00168A  5009               	movf	(i2show_piece@ports+2)^0,w,c
  3345  00168C  104E               	iorwf	_LATE_value^0,w,c
  3346  00168E  6E8D               	movwf	141,c	;volatile
  3347  001690                     
  3348                           ;main.c: 707:     LATF = ports[3] | LATF_value;
  3349  001690  500A               	movf	(i2show_piece@ports+3)^0,w,c
  3350  001692  104D               	iorwf	_LATF_value^0,w,c
  3351  001694  6E8E               	movwf	142,c	;volatile
  3352  001696                     
  3353                           ;main.c: 710:     if ((ports[0] & LATC_value) && LATC_flag == 0)
  3354  001696  5007               	movf	i2show_piece@ports^0,w,c
  3355  001698  1450               	andwf	_LATC_value^0,w,c
  3356  00169A  0900               	iorlw	0
  3357  00169C  B4D8               	btfsc	status,2,c
  3358  00169E  EF53  F00B         	goto	i2u222_41
  3359  0016A2  EF55  F00B         	goto	i2u222_40
  3360  0016A6                     i2u222_41:
  3361  0016A6  EF6C  F00B         	goto	i2l283
  3362  0016AA                     i2u222_40:
  3363  0016AA  503F               	movf	_LATC_flag^0,w,c
  3364  0016AC  1040               	iorwf	(_LATC_flag+1)^0,w,c
  3365  0016AE  A4D8               	btfss	status,2,c
  3366  0016B0  EF5C  F00B         	goto	i2u223_41
  3367  0016B4  EF5E  F00B         	goto	i2u223_40
  3368  0016B8                     i2u223_41:
  3369  0016B8  EF6C  F00B         	goto	i2l283
  3370  0016BC                     i2u223_40:
  3371  0016BC                     
  3372                           ;main.c: 711:     {;main.c: 712:         LATC_flag = 1;
  3373  0016BC  0E00               	movlw	0
  3374  0016BE  6E40               	movwf	(_LATC_flag+1)^0,c
  3375  0016C0  0E01               	movlw	1
  3376  0016C2  6E3F               	movwf	_LATC_flag^0,c
  3377  0016C4                     
  3378                           ;main.c: 713:         LATC_old = LATC_value;
  3379  0016C4  C050  F04C         	movff	_LATC_value,_LATC_old
  3380  0016C8                     
  3381                           ;main.c: 714:         LATC_value = PORTC & ~ports[0];
  3382  0016C8  5007               	movf	i2show_piece@ports^0,w,c
  3383  0016CA  0AFF               	xorlw	255
  3384  0016CC  1482               	andwf	130,w,c	;volatile
  3385  0016CE  6E50               	movwf	_LATC_value^0,c
  3386  0016D0                     
  3387                           ;main.c: 715:         can_submit = 0;
  3388  0016D0  0E00               	movlw	0
  3389  0016D2  6E53               	movwf	(_can_submit+1)^0,c
  3390  0016D4  0E00               	movlw	0
  3391  0016D6  6E52               	movwf	_can_submit^0,c
  3392  0016D8                     i2l283:
  3393                           
  3394                           ;main.c: 718:     if ((ports[1] & LATD_value) && LATD_flag == 0)
  3395  0016D8  5008               	movf	(i2show_piece@ports+1)^0,w,c
  3396  0016DA  144F               	andwf	_LATD_value^0,w,c
  3397  0016DC  0900               	iorlw	0
  3398  0016DE  B4D8               	btfsc	status,2,c
  3399  0016E0  EF74  F00B         	goto	i2u224_41
  3400  0016E4  EF76  F00B         	goto	i2u224_40
  3401  0016E8                     i2u224_41:
  3402  0016E8  EF8D  F00B         	goto	i2l284
  3403  0016EC                     i2u224_40:
  3404  0016EC  503D               	movf	_LATD_flag^0,w,c
  3405  0016EE  103E               	iorwf	(_LATD_flag+1)^0,w,c
  3406  0016F0  A4D8               	btfss	status,2,c
  3407  0016F2  EF7D  F00B         	goto	i2u225_41
  3408  0016F6  EF7F  F00B         	goto	i2u225_40
  3409  0016FA                     i2u225_41:
  3410  0016FA  EF8D  F00B         	goto	i2l284
  3411  0016FE                     i2u225_40:
  3412  0016FE                     
  3413                           ;main.c: 719:     {;main.c: 720:         LATD_flag = 1;
  3414  0016FE  0E00               	movlw	0
  3415  001700  6E3E               	movwf	(_LATD_flag+1)^0,c
  3416  001702  0E01               	movlw	1
  3417  001704  6E3D               	movwf	_LATD_flag^0,c
  3418  001706                     
  3419                           ;main.c: 721:         LATD_old = LATD_value;
  3420  001706  C04F  F04B         	movff	_LATD_value,_LATD_old
  3421  00170A                     
  3422                           ;main.c: 722:         LATD_value = PORTD & ~ports[1];
  3423  00170A  5008               	movf	(i2show_piece@ports+1)^0,w,c
  3424  00170C  0AFF               	xorlw	255
  3425  00170E  1483               	andwf	131,w,c	;volatile
  3426  001710  6E4F               	movwf	_LATD_value^0,c
  3427  001712                     
  3428                           ;main.c: 723:         can_submit = 0;
  3429  001712  0E00               	movlw	0
  3430  001714  6E53               	movwf	(_can_submit+1)^0,c
  3431  001716  0E00               	movlw	0
  3432  001718  6E52               	movwf	_can_submit^0,c
  3433  00171A                     i2l284:
  3434                           
  3435                           ;main.c: 725:     if ((ports[2] & LATE_value) && LATE_flag == 0)
  3436  00171A  5009               	movf	(i2show_piece@ports+2)^0,w,c
  3437  00171C  144E               	andwf	_LATE_value^0,w,c
  3438  00171E  0900               	iorlw	0
  3439  001720  B4D8               	btfsc	status,2,c
  3440  001722  EF95  F00B         	goto	i2u226_41
  3441  001726  EF97  F00B         	goto	i2u226_40
  3442  00172A                     i2u226_41:
  3443  00172A  EFAE  F00B         	goto	i2l285
  3444  00172E                     i2u226_40:
  3445  00172E  503B               	movf	_LATE_flag^0,w,c
  3446  001730  103C               	iorwf	(_LATE_flag+1)^0,w,c
  3447  001732  A4D8               	btfss	status,2,c
  3448  001734  EF9E  F00B         	goto	i2u227_41
  3449  001738  EFA0  F00B         	goto	i2u227_40
  3450  00173C                     i2u227_41:
  3451  00173C  EFAE  F00B         	goto	i2l285
  3452  001740                     i2u227_40:
  3453  001740                     
  3454                           ;main.c: 726:     {;main.c: 727:         LATE_flag = 1;
  3455  001740  0E00               	movlw	0
  3456  001742  6E3C               	movwf	(_LATE_flag+1)^0,c
  3457  001744  0E01               	movlw	1
  3458  001746  6E3B               	movwf	_LATE_flag^0,c
  3459  001748                     
  3460                           ;main.c: 728:         LATE_old = LATE_value;
  3461  001748  C04E  F04A         	movff	_LATE_value,_LATE_old
  3462  00174C                     
  3463                           ;main.c: 729:         LATE_value = PORTE & ~ports[2];
  3464  00174C  5009               	movf	(i2show_piece@ports+2)^0,w,c
  3465  00174E  0AFF               	xorlw	255
  3466  001750  1484               	andwf	132,w,c	;volatile
  3467  001752  6E4E               	movwf	_LATE_value^0,c
  3468  001754                     
  3469                           ;main.c: 730:         can_submit = 0;
  3470  001754  0E00               	movlw	0
  3471  001756  6E53               	movwf	(_can_submit+1)^0,c
  3472  001758  0E00               	movlw	0
  3473  00175A  6E52               	movwf	_can_submit^0,c
  3474  00175C                     i2l285:
  3475                           
  3476                           ;main.c: 732:     if ((ports[3] & LATF_value) && LATF_flag == 0)
  3477  00175C  500A               	movf	(i2show_piece@ports+3)^0,w,c
  3478  00175E  144D               	andwf	_LATF_value^0,w,c
  3479  001760  0900               	iorlw	0
  3480  001762  B4D8               	btfsc	status,2,c
  3481  001764  EFB6  F00B         	goto	i2u228_41
  3482  001768  EFB8  F00B         	goto	i2u228_40
  3483  00176C                     i2u228_41:
  3484  00176C  EFCF  F00B         	goto	i2l286
  3485  001770                     i2u228_40:
  3486  001770  5039               	movf	_LATF_flag^0,w,c
  3487  001772  103A               	iorwf	(_LATF_flag+1)^0,w,c
  3488  001774  A4D8               	btfss	status,2,c
  3489  001776  EFBF  F00B         	goto	i2u229_41
  3490  00177A  EFC1  F00B         	goto	i2u229_40
  3491  00177E                     i2u229_41:
  3492  00177E  EFCF  F00B         	goto	i2l286
  3493  001782                     i2u229_40:
  3494  001782                     
  3495                           ;main.c: 733:     {;main.c: 734:         LATF_flag = 1;
  3496  001782  0E00               	movlw	0
  3497  001784  6E3A               	movwf	(_LATF_flag+1)^0,c
  3498  001786  0E01               	movlw	1
  3499  001788  6E39               	movwf	_LATF_flag^0,c
  3500  00178A                     
  3501                           ;main.c: 735:         LATF_old = LATF_value;
  3502  00178A  C04D  F049         	movff	_LATF_value,_LATF_old
  3503  00178E                     
  3504                           ;main.c: 736:         LATF_value = PORTF & ~ports[3];
  3505  00178E  500A               	movf	(i2show_piece@ports+3)^0,w,c
  3506  001790  0AFF               	xorlw	255
  3507  001792  1485               	andwf	133,w,c	;volatile
  3508  001794  6E4D               	movwf	_LATF_value^0,c
  3509  001796                     
  3510                           ;main.c: 737:         can_submit = 0;
  3511  001796  0E00               	movlw	0
  3512  001798  6E53               	movwf	(_can_submit+1)^0,c
  3513  00179A  0E00               	movlw	0
  3514  00179C  6E52               	movwf	_can_submit^0,c
  3515  00179E                     i2l286:
  3516                           
  3517                           ;main.c: 741:     if (LATC_flag == 0 && LATD_flag == 0 && LATE_flag == 0 && LATF_flag ==
      +                           0)
  3518  00179E  503F               	movf	_LATC_flag^0,w,c
  3519  0017A0  1040               	iorwf	(_LATC_flag+1)^0,w,c
  3520  0017A2  A4D8               	btfss	status,2,c
  3521  0017A4  EFD6  F00B         	goto	i2u230_41
  3522  0017A8  EFD8  F00B         	goto	i2u230_40
  3523  0017AC                     i2u230_41:
  3524  0017AC  EFF7  F00B         	goto	i2l288
  3525  0017B0                     i2u230_40:
  3526  0017B0  503D               	movf	_LATD_flag^0,w,c
  3527  0017B2  103E               	iorwf	(_LATD_flag+1)^0,w,c
  3528  0017B4  A4D8               	btfss	status,2,c
  3529  0017B6  EFDF  F00B         	goto	i2u231_41
  3530  0017BA  EFE1  F00B         	goto	i2u231_40
  3531  0017BE                     i2u231_41:
  3532  0017BE  EFF7  F00B         	goto	i2l288
  3533  0017C2                     i2u231_40:
  3534  0017C2  503B               	movf	_LATE_flag^0,w,c
  3535  0017C4  103C               	iorwf	(_LATE_flag+1)^0,w,c
  3536  0017C6  A4D8               	btfss	status,2,c
  3537  0017C8  EFE8  F00B         	goto	i2u232_41
  3538  0017CC  EFEA  F00B         	goto	i2u232_40
  3539  0017D0                     i2u232_41:
  3540  0017D0  EFF7  F00B         	goto	i2l288
  3541  0017D4                     i2u232_40:
  3542  0017D4  5039               	movf	_LATF_flag^0,w,c
  3543  0017D6  103A               	iorwf	(_LATF_flag+1)^0,w,c
  3544  0017D8  A4D8               	btfss	status,2,c
  3545  0017DA  EFF1  F00B         	goto	i2u233_41
  3546  0017DE  EFF3  F00B         	goto	i2u233_40
  3547  0017E2                     i2u233_41:
  3548  0017E2  EFF7  F00B         	goto	i2l288
  3549  0017E6                     i2u233_40:
  3550  0017E6                     
  3551                           ;main.c: 742:     {;main.c: 743:         can_submit = 1;
  3552  0017E6  0E00               	movlw	0
  3553  0017E8  6E53               	movwf	(_can_submit+1)^0,c
  3554  0017EA  0E01               	movlw	1
  3555  0017EC  6E52               	movwf	_can_submit^0,c
  3556  0017EE                     i2l288:
  3557  0017EE  0012               	return		;funcret
  3558  0017F0                     __end_ofi2_show_piece:
  3559                           	callstack 0
  3560                           
  3561 ;; *************** function i2_move_down *****************
  3562 ;; Defined at:
  3563 ;;		line 641 in file "main.c"
  3564 ;; Parameters:    Size  Location     Type
  3565 ;;		None
  3566 ;; Auto vars:     Size  Location     Type
  3567 ;;  ports           4   26[COMRAM] unsigned char [4]
  3568 ;; Return value:  Size  Location     Type
  3569 ;;                  1    wreg      void 
  3570 ;; Registers used:
  3571 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3572 ;; Tracked objects:
  3573 ;;		On entry : 0/0
  3574 ;;		On exit  : 0/0
  3575 ;;		Unchanged: 0/0
  3576 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3577 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3578 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3579 ;;      Temps:         20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3580 ;;      Totals:        24       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3581 ;;Total ram usage:       24 bytes
  3582 ;; Hardware stack levels used:    1
  3583 ;; Hardware stack levels required when called:    1
  3584 ;; This function calls:
  3585 ;;		i2_parse_and_assign
  3586 ;; This function is called by:
  3587 ;;		_HandleInterrupt
  3588 ;; This function uses a non-reentrant model
  3589 ;;
  3590                           
  3591                           	psect	text17
  3592  001D0C                     __ptext17:
  3593                           	callstack 0
  3594  001D0C                     i2_move_down:
  3595                           	callstack 25
  3596  001D0C                     
  3597                           ;main.c: 643:     uint8_t ports[4];;main.c: 644:     if (active_piece == 0x00000000)
  3598  001D0C  5031               	movf	_active_piece^0,w,c
  3599  001D0E  1032               	iorwf	(_active_piece+1)^0,w,c
  3600  001D10  1033               	iorwf	(_active_piece+2)^0,w,c
  3601  001D12  1034               	iorwf	(_active_piece+3)^0,w,c
  3602  001D14  A4D8               	btfss	status,2,c
  3603  001D16  EF8F  F00E         	goto	i2u217_41
  3604  001D1A  EF91  F00E         	goto	i2u217_40
  3605  001D1E                     i2u217_41:
  3606  001D1E  EFA1  F00E         	goto	i2l2164
  3607  001D22                     i2u217_40:
  3608  001D22                     
  3609                           ;main.c: 645:     {;main.c: 646:         parse_and_assign(active_piece_record, ports);
  3610  001D22  C02D  F001         	movff	_active_piece_record,i2parse_and_assign@value
  3611  001D26  C02E  F002         	movff	_active_piece_record+1,i2parse_and_assign@value+1
  3612  001D2A  C02F  F003         	movff	_active_piece_record+2,i2parse_and_assign@value+2
  3613  001D2E  C030  F004         	movff	_active_piece_record+3,i2parse_and_assign@value+3
  3614  001D32  0E1B               	movlw	low i2move_down@ports
  3615  001D34  6E05               	movwf	i2parse_and_assign@ports^0,c
  3616  001D36  0E00               	movlw	high i2move_down@ports
  3617  001D38  6E06               	movwf	(i2parse_and_assign@ports+1)^0,c
  3618  001D3A  ECC0  F012         	call	i2_parse_and_assign	;wreg free
  3619                           
  3620                           ;main.c: 647:     }
  3621  001D3E  EFAF  F00E         	goto	i2l2166
  3622  001D42                     i2l2164:
  3623                           
  3624                           ;main.c: 649:     {;main.c: 650:         parse_and_assign(active_piece, ports);
  3625  001D42  C031  F001         	movff	_active_piece,i2parse_and_assign@value
  3626  001D46  C032  F002         	movff	_active_piece+1,i2parse_and_assign@value+1
  3627  001D4A  C033  F003         	movff	_active_piece+2,i2parse_and_assign@value+2
  3628  001D4E  C034  F004         	movff	_active_piece+3,i2parse_and_assign@value+3
  3629  001D52  0E1B               	movlw	low i2move_down@ports
  3630  001D54  6E05               	movwf	i2parse_and_assign@ports^0,c
  3631  001D56  0E00               	movlw	high i2move_down@ports
  3632  001D58  6E06               	movwf	(i2parse_and_assign@ports+1)^0,c
  3633  001D5A  ECC0  F012         	call	i2_parse_and_assign	;wreg free
  3634  001D5E                     i2l2166:
  3635                           
  3636                           ;main.c: 653:     if ((ports[0] & 0x80) == 0 && (ports[1] & 0x80) == 0 && (ports[2] & 0x
      +                          80) == 0 && (ports[3] & 0x80) == 0)
  3637  001D5E  BE1B               	btfsc	i2move_down@ports^0,7,c
  3638  001D60  EFB4  F00E         	goto	i2u218_41
  3639  001D64  EFB6  F00E         	goto	i2u218_40
  3640  001D68                     i2u218_41:
  3641  001D68  EF21  F00F         	goto	i2l270
  3642  001D6C                     i2u218_40:
  3643  001D6C  BE1C               	btfsc	(i2move_down@ports+1)^0,7,c
  3644  001D6E  EFBB  F00E         	goto	i2u219_41
  3645  001D72  EFBD  F00E         	goto	i2u219_40
  3646  001D76                     i2u219_41:
  3647  001D76  EF21  F00F         	goto	i2l270
  3648  001D7A                     i2u219_40:
  3649  001D7A  BE1D               	btfsc	(i2move_down@ports+2)^0,7,c
  3650  001D7C  EFC2  F00E         	goto	i2u220_41
  3651  001D80  EFC4  F00E         	goto	i2u220_40
  3652  001D84                     i2u220_41:
  3653  001D84  EF21  F00F         	goto	i2l270
  3654  001D88                     i2u220_40:
  3655  001D88  BE1E               	btfsc	(i2move_down@ports+3)^0,7,c
  3656  001D8A  EFC9  F00E         	goto	i2u221_41
  3657  001D8E  EFCB  F00E         	goto	i2u221_40
  3658  001D92                     i2u221_41:
  3659  001D92  EF21  F00F         	goto	i2l270
  3660  001D96                     i2u221_40:
  3661  001D96                     
  3662                           ;main.c: 654:     {;main.c: 655:         ports[0] = ports[0] << 1;
  3663  001D96  501B               	movf	i2move_down@ports^0,w,c
  3664  001D98  241B               	addwf	i2move_down@ports^0,w,c
  3665  001D9A  6E1B               	movwf	i2move_down@ports^0,c
  3666                           
  3667                           ;main.c: 656:         ports[1] = ports[1] << 1;
  3668  001D9C  501C               	movf	(i2move_down@ports+1)^0,w,c
  3669  001D9E  241C               	addwf	(i2move_down@ports+1)^0,w,c
  3670  001DA0  6E1C               	movwf	(i2move_down@ports+1)^0,c
  3671                           
  3672                           ;main.c: 657:         ports[2] = ports[2] << 1;
  3673  001DA2  501D               	movf	(i2move_down@ports+2)^0,w,c
  3674  001DA4  241D               	addwf	(i2move_down@ports+2)^0,w,c
  3675  001DA6  6E1D               	movwf	(i2move_down@ports+2)^0,c
  3676                           
  3677                           ;main.c: 658:         ports[3] = ports[3] << 1;
  3678  001DA8  501E               	movf	(i2move_down@ports+3)^0,w,c
  3679  001DAA  241E               	addwf	(i2move_down@ports+3)^0,w,c
  3680  001DAC  6E1E               	movwf	(i2move_down@ports+3)^0,c
  3681                           
  3682                           ;main.c: 661:         active_piece = ((uint32_t)ports[0] << 24) | ((uint32_t)ports[1] <<
      +                           16) | ((uint32_t)ports[2] << 8) | ((uint32_t)ports[3]);
  3683  001DAE  C01D  F007         	movff	i2move_down@ports+2,??i2_move_down
  3684  001DB2  6A08               	clrf	(??i2_move_down+1)^0,c
  3685  001DB4  6A09               	clrf	(??i2_move_down+2)^0,c
  3686  001DB6  6A0A               	clrf	(??i2_move_down+3)^0,c
  3687  001DB8  C009  F00A         	movff	??i2_move_down+2,??i2_move_down+3
  3688  001DBC  C008  F009         	movff	??i2_move_down+1,??i2_move_down+2
  3689  001DC0  C007  F008         	movff	??i2_move_down,??i2_move_down+1
  3690  001DC4  6A07               	clrf	??i2_move_down^0,c
  3691  001DC6  C01C  F00B         	movff	i2move_down@ports+1,??i2_move_down+4
  3692  001DCA  6A0C               	clrf	(??i2_move_down+5)^0,c
  3693  001DCC  6A0D               	clrf	(??i2_move_down+6)^0,c
  3694  001DCE  6A0E               	clrf	(??i2_move_down+7)^0,c
  3695  001DD0  C00C  F00E         	movff	??i2_move_down+5,??i2_move_down+7
  3696  001DD4  C00B  F00D         	movff	??i2_move_down+4,??i2_move_down+6
  3697  001DD8  6A0C               	clrf	(??i2_move_down+5)^0,c
  3698  001DDA  6A0B               	clrf	(??i2_move_down+4)^0,c
  3699  001DDC  C01B  F00F         	movff	i2move_down@ports,??i2_move_down+8
  3700  001DE0  6A10               	clrf	(??i2_move_down+9)^0,c
  3701  001DE2  6A11               	clrf	(??i2_move_down+10)^0,c
  3702  001DE4  6A12               	clrf	(??i2_move_down+11)^0,c
  3703  001DE6  C00F  F012         	movff	??i2_move_down+8,??i2_move_down+11
  3704  001DEA  6A11               	clrf	(??i2_move_down+10)^0,c
  3705  001DEC  6A10               	clrf	(??i2_move_down+9)^0,c
  3706  001DEE  6A0F               	clrf	(??i2_move_down+8)^0,c
  3707  001DF0  500B               	movf	(??i2_move_down+4)^0,w,c
  3708  001DF2  100F               	iorwf	(??i2_move_down+8)^0,w,c
  3709  001DF4  6E13               	movwf	(??i2_move_down+12)^0,c
  3710  001DF6  500C               	movf	(??i2_move_down+5)^0,w,c
  3711  001DF8  1010               	iorwf	(??i2_move_down+9)^0,w,c
  3712  001DFA  6E14               	movwf	(??i2_move_down+13)^0,c
  3713  001DFC  500D               	movf	(??i2_move_down+6)^0,w,c
  3714  001DFE  1011               	iorwf	(??i2_move_down+10)^0,w,c
  3715  001E00  6E15               	movwf	(??i2_move_down+14)^0,c
  3716  001E02  500E               	movf	(??i2_move_down+7)^0,w,c
  3717  001E04  1012               	iorwf	(??i2_move_down+11)^0,w,c
  3718  001E06  6E16               	movwf	(??i2_move_down+15)^0,c
  3719  001E08  5007               	movf	??i2_move_down^0,w,c
  3720  001E0A  1013               	iorwf	(??i2_move_down+12)^0,w,c
  3721  001E0C  6E17               	movwf	(??i2_move_down+16)^0,c
  3722  001E0E  5008               	movf	(??i2_move_down+1)^0,w,c
  3723  001E10  1014               	iorwf	(??i2_move_down+13)^0,w,c
  3724  001E12  6E18               	movwf	(??i2_move_down+17)^0,c
  3725  001E14  5009               	movf	(??i2_move_down+2)^0,w,c
  3726  001E16  1015               	iorwf	(??i2_move_down+14)^0,w,c
  3727  001E18  6E19               	movwf	(??i2_move_down+18)^0,c
  3728  001E1A  500A               	movf	(??i2_move_down+3)^0,w,c
  3729  001E1C  1016               	iorwf	(??i2_move_down+15)^0,w,c
  3730  001E1E  6E1A               	movwf	(??i2_move_down+19)^0,c
  3731  001E20  501E               	movf	(i2move_down@ports+3)^0,w,c
  3732  001E22  1017               	iorwf	(??i2_move_down+16)^0,w,c
  3733  001E24  6E31               	movwf	_active_piece^0,c
  3734  001E26  5018               	movf	(??i2_move_down+17)^0,w,c
  3735  001E28  6E32               	movwf	(_active_piece+1)^0,c
  3736  001E2A  5019               	movf	(??i2_move_down+18)^0,w,c
  3737  001E2C  6E33               	movwf	(_active_piece+2)^0,c
  3738  001E2E  501A               	movf	(??i2_move_down+19)^0,w,c
  3739  001E30  6E34               	movwf	(_active_piece+3)^0,c
  3740  001E32                     
  3741                           ;main.c: 662:         active_piece_record = active_piece;
  3742  001E32  C031  F02D         	movff	_active_piece,_active_piece_record
  3743  001E36  C032  F02E         	movff	_active_piece+1,_active_piece_record+1
  3744  001E3A  C033  F02F         	movff	_active_piece+2,_active_piece_record+2
  3745  001E3E  C034  F030         	movff	_active_piece+3,_active_piece_record+3
  3746  001E42                     i2l270:
  3747  001E42  0012               	return		;funcret
  3748  001E44                     __end_ofi2_move_down:
  3749                           	callstack 0
  3750                           
  3751 ;; *************** function _submit_piece *****************
  3752 ;; Defined at:
  3753 ;;		line 431 in file "main.c"
  3754 ;; Parameters:    Size  Location     Type
  3755 ;;		None
  3756 ;; Auto vars:     Size  Location     Type
  3757 ;;  ports           4    6[COMRAM] unsigned char [4]
  3758 ;; Return value:  Size  Location     Type
  3759 ;;                  1    wreg      void 
  3760 ;; Registers used:
  3761 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3762 ;; Tracked objects:
  3763 ;;		On entry : 0/0
  3764 ;;		On exit  : 0/0
  3765 ;;		Unchanged: 0/0
  3766 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3767 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3768 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3769 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3770 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3771 ;;Total ram usage:        4 bytes
  3772 ;; Hardware stack levels used:    1
  3773 ;; Hardware stack levels required when called:    1
  3774 ;; This function calls:
  3775 ;;		i2___awmod
  3776 ;;		i2_parse_and_assign
  3777 ;;		i2_spawn_piece
  3778 ;; This function is called by:
  3779 ;;		_HandleInterrupt
  3780 ;; This function uses a non-reentrant model
  3781 ;;
  3782                           
  3783                           	psect	text18
  3784  001BD0                     __ptext18:
  3785                           	callstack 0
  3786  001BD0                     _submit_piece:
  3787                           	callstack 25
  3788  001BD0                     
  3789                           ;main.c: 434:     if (can_submit == 0)
  3790  001BD0  5052               	movf	_can_submit^0,w,c
  3791  001BD2  1053               	iorwf	(_can_submit+1)^0,w,c
  3792  001BD4  A4D8               	btfss	status,2,c
  3793  001BD6  EFEF  F00D         	goto	i2u159_41
  3794  001BDA  EFF1  F00D         	goto	i2u159_40
  3795  001BDE                     i2u159_41:
  3796  001BDE  EFF3  F00D         	goto	i2l1906
  3797  001BE2                     i2u159_40:
  3798  001BE2  EF85  F00E         	goto	i2l214
  3799  001BE6                     i2l1906:
  3800                           
  3801                           ;main.c: 439:     uint8_t ports[4];;main.c: 440:     if (active_piece == 0x00000000)
  3802  001BE6  5031               	movf	_active_piece^0,w,c
  3803  001BE8  1032               	iorwf	(_active_piece+1)^0,w,c
  3804  001BEA  1033               	iorwf	(_active_piece+2)^0,w,c
  3805  001BEC  1034               	iorwf	(_active_piece+3)^0,w,c
  3806  001BEE  A4D8               	btfss	status,2,c
  3807  001BF0  EFFC  F00D         	goto	i2u160_41
  3808  001BF4  EFFE  F00D         	goto	i2u160_40
  3809  001BF8                     i2u160_41:
  3810  001BF8  EF0E  F00E         	goto	i2l1910
  3811  001BFC                     i2u160_40:
  3812  001BFC                     
  3813                           ;main.c: 441:     {;main.c: 442:         parse_and_assign(active_piece_record, ports);
  3814  001BFC  C02D  F001         	movff	_active_piece_record,i2parse_and_assign@value
  3815  001C00  C02E  F002         	movff	_active_piece_record+1,i2parse_and_assign@value+1
  3816  001C04  C02F  F003         	movff	_active_piece_record+2,i2parse_and_assign@value+2
  3817  001C08  C030  F004         	movff	_active_piece_record+3,i2parse_and_assign@value+3
  3818  001C0C  0E07               	movlw	low submit_piece@ports
  3819  001C0E  6E05               	movwf	i2parse_and_assign@ports^0,c
  3820  001C10  0E00               	movlw	high submit_piece@ports
  3821  001C12  6E06               	movwf	(i2parse_and_assign@ports+1)^0,c
  3822  001C14  ECC0  F012         	call	i2_parse_and_assign	;wreg free
  3823                           
  3824                           ;main.c: 443:     }
  3825  001C18  EF1C  F00E         	goto	i2l1912
  3826  001C1C                     i2l1910:
  3827                           
  3828                           ;main.c: 445:     {;main.c: 446:         parse_and_assign(active_piece, ports);
  3829  001C1C  C031  F001         	movff	_active_piece,i2parse_and_assign@value
  3830  001C20  C032  F002         	movff	_active_piece+1,i2parse_and_assign@value+1
  3831  001C24  C033  F003         	movff	_active_piece+2,i2parse_and_assign@value+2
  3832  001C28  C034  F004         	movff	_active_piece+3,i2parse_and_assign@value+3
  3833  001C2C  0E07               	movlw	low submit_piece@ports
  3834  001C2E  6E05               	movwf	i2parse_and_assign@ports^0,c
  3835  001C30  0E00               	movlw	high submit_piece@ports
  3836  001C32  6E06               	movwf	(i2parse_and_assign@ports+1)^0,c
  3837  001C34  ECC0  F012         	call	i2_parse_and_assign	;wreg free
  3838  001C38                     i2l1912:
  3839                           
  3840                           ;main.c: 449:     LATC_value = PORTC | LATC_old | ports[0] | LATC_value;
  3841  001C38  5082               	movf	130,w,c	;volatile
  3842  001C3A  104C               	iorwf	_LATC_old^0,w,c
  3843  001C3C  1007               	iorwf	submit_piece@ports^0,w,c
  3844  001C3E  1050               	iorwf	_LATC_value^0,w,c
  3845  001C40  6E50               	movwf	_LATC_value^0,c
  3846  001C42                     
  3847                           ;main.c: 450:     LATD_value = PORTD | LATD_old | ports[1] | LATD_value;
  3848  001C42  5008               	movf	(submit_piece@ports+1)^0,w,c
  3849  001C44  1083               	iorwf	131,w,c	;volatile
  3850  001C46  104B               	iorwf	_LATD_old^0,w,c
  3851  001C48  104F               	iorwf	_LATD_value^0,w,c
  3852  001C4A  6E4F               	movwf	_LATD_value^0,c
  3853  001C4C                     
  3854                           ;main.c: 451:     LATE_value = PORTE | LATE_old | ports[2] | LATE_value;
  3855  001C4C  5009               	movf	(submit_piece@ports+2)^0,w,c
  3856  001C4E  1084               	iorwf	132,w,c	;volatile
  3857  001C50  104A               	iorwf	_LATE_old^0,w,c
  3858  001C52  104E               	iorwf	_LATE_value^0,w,c
  3859  001C54  6E4E               	movwf	_LATE_value^0,c
  3860  001C56                     
  3861                           ;main.c: 452:     LATF_value = PORTF | LATF_old | ports[3] | LATF_value;
  3862  001C56  500A               	movf	(submit_piece@ports+3)^0,w,c
  3863  001C58  1085               	iorwf	133,w,c	;volatile
  3864  001C5A  1049               	iorwf	_LATF_old^0,w,c
  3865  001C5C  104D               	iorwf	_LATF_value^0,w,c
  3866  001C5E  6E4D               	movwf	_LATF_value^0,c
  3867  001C60                     
  3868                           ;main.c: 454:     prev_piece = (prev_piece + 1) % 3;
  3869  001C60  0E01               	movlw	1
  3870  001C62  2454               	addwf	_prev_piece^0,w,c
  3871  001C64  6E01               	movwf	i2___awmod@dividend^0,c
  3872  001C66  0E00               	movlw	0
  3873  001C68  2055               	addwfc	(_prev_piece+1)^0,w,c
  3874  001C6A  6E02               	movwf	(i2___awmod@dividend+1)^0,c
  3875  001C6C  0E00               	movlw	0
  3876  001C6E  6E04               	movwf	(i2___awmod@divisor+1)^0,c
  3877  001C70  0E03               	movlw	3
  3878  001C72  6E03               	movwf	i2___awmod@divisor^0,c
  3879  001C74  ECF6  F010         	call	i2___awmod	;wreg free
  3880  001C78  C001  F054         	movff	?i2___awmod,_prev_piece
  3881  001C7C  C002  F055         	movff	?i2___awmod+1,_prev_piece+1
  3882  001C80                     
  3883                           ;main.c: 456:     is_active = 0;
  3884  001C80  0E00               	movlw	0
  3885  001C82  6E38               	movwf	(_is_active+1)^0,c
  3886  001C84  0E00               	movlw	0
  3887  001C86  6E37               	movwf	_is_active^0,c
  3888  001C88                     
  3889                           ;main.c: 459:     if (LATC_flag == 1)
  3890  001C88  043F               	decf	_LATC_flag^0,w,c
  3891  001C8A  1040               	iorwf	(_LATC_flag+1)^0,w,c
  3892  001C8C  A4D8               	btfss	status,2,c
  3893  001C8E  EF4B  F00E         	goto	i2u161_41
  3894  001C92  EF4D  F00E         	goto	i2u161_40
  3895  001C96                     i2u161_41:
  3896  001C96  EF53  F00E         	goto	i2l1930
  3897  001C9A                     i2u161_40:
  3898  001C9A                     
  3899                           ;main.c: 460:     {;main.c: 461:         LATC = LATC_old;
  3900  001C9A  C04C  FF8B         	movff	_LATC_old,3979	;volatile
  3901  001C9E                     
  3902                           ;main.c: 462:         LATC_flag = 0;
  3903  001C9E  0E00               	movlw	0
  3904  001CA0  6E40               	movwf	(_LATC_flag+1)^0,c
  3905  001CA2  0E00               	movlw	0
  3906  001CA4  6E3F               	movwf	_LATC_flag^0,c
  3907  001CA6                     i2l1930:
  3908                           
  3909                           ;main.c: 464:     if (LATD_flag == 1)
  3910  001CA6  043D               	decf	_LATD_flag^0,w,c
  3911  001CA8  103E               	iorwf	(_LATD_flag+1)^0,w,c
  3912  001CAA  A4D8               	btfss	status,2,c
  3913  001CAC  EF5A  F00E         	goto	i2u162_41
  3914  001CB0  EF5C  F00E         	goto	i2u162_40
  3915  001CB4                     i2u162_41:
  3916  001CB4  EF62  F00E         	goto	i2l1936
  3917  001CB8                     i2u162_40:
  3918  001CB8                     
  3919                           ;main.c: 465:     {;main.c: 466:         LATD = LATD_old;
  3920  001CB8  C04B  FF8C         	movff	_LATD_old,3980	;volatile
  3921  001CBC                     
  3922                           ;main.c: 467:         LATD_flag = 0;
  3923  001CBC  0E00               	movlw	0
  3924  001CBE  6E3E               	movwf	(_LATD_flag+1)^0,c
  3925  001CC0  0E00               	movlw	0
  3926  001CC2  6E3D               	movwf	_LATD_flag^0,c
  3927  001CC4                     i2l1936:
  3928                           
  3929                           ;main.c: 469:     if (LATE_flag == 1)
  3930  001CC4  043B               	decf	_LATE_flag^0,w,c
  3931  001CC6  103C               	iorwf	(_LATE_flag+1)^0,w,c
  3932  001CC8  A4D8               	btfss	status,2,c
  3933  001CCA  EF69  F00E         	goto	i2u163_41
  3934  001CCE  EF6B  F00E         	goto	i2u163_40
  3935  001CD2                     i2u163_41:
  3936  001CD2  EF71  F00E         	goto	i2l1942
  3937  001CD6                     i2u163_40:
  3938  001CD6                     
  3939                           ;main.c: 470:     {;main.c: 471:         LATE = LATE_old;
  3940  001CD6  C04A  FF8D         	movff	_LATE_old,3981	;volatile
  3941  001CDA                     
  3942                           ;main.c: 472:         LATE_flag = 0;
  3943  001CDA  0E00               	movlw	0
  3944  001CDC  6E3C               	movwf	(_LATE_flag+1)^0,c
  3945  001CDE  0E00               	movlw	0
  3946  001CE0  6E3B               	movwf	_LATE_flag^0,c
  3947  001CE2                     i2l1942:
  3948                           
  3949                           ;main.c: 474:     if (LATF_flag == 1)
  3950  001CE2  0439               	decf	_LATF_flag^0,w,c
  3951  001CE4  103A               	iorwf	(_LATF_flag+1)^0,w,c
  3952  001CE6  A4D8               	btfss	status,2,c
  3953  001CE8  EF78  F00E         	goto	i2u164_41
  3954  001CEC  EF7A  F00E         	goto	i2u164_40
  3955  001CF0                     i2u164_41:
  3956  001CF0  EF80  F00E         	goto	i2l1948
  3957  001CF4                     i2u164_40:
  3958  001CF4                     
  3959                           ;main.c: 475:     {;main.c: 476:         LATF = LATF_old;
  3960  001CF4  C049  FF8E         	movff	_LATF_old,3982	;volatile
  3961  001CF8                     
  3962                           ;main.c: 477:         LATF_flag = 0;
  3963  001CF8  0E00               	movlw	0
  3964  001CFA  6E3A               	movwf	(_LATF_flag+1)^0,c
  3965  001CFC  0E00               	movlw	0
  3966  001CFE  6E39               	movwf	_LATF_flag^0,c
  3967  001D00                     i2l1948:
  3968                           
  3969                           ;main.c: 479:     total_pieces++;
  3970  001D00  0100               	movlb	0	; () banked
  3971  001D02  4B86               	infsnz	_total_pieces& (0+255),f,b
  3972  001D04  2B87               	incf	(_total_pieces+1)& (0+255),f,b
  3973  001D06                     
  3974                           ; BSR set to: 0
  3975                           ;main.c: 480:     spawn_piece();
  3976  001D06  EC9F  F011         	call	i2_spawn_piece	;wreg free
  3977  001D0A                     i2l214:
  3978  001D0A  0012               	return		;funcret
  3979  001D0C                     __end_of_submit_piece:
  3980                           	callstack 0
  3981                           
  3982 ;; *************** function i2_spawn_piece *****************
  3983 ;; Defined at:
  3984 ;;		line 674 in file "main.c"
  3985 ;; Parameters:    Size  Location     Type
  3986 ;;		None
  3987 ;; Auto vars:     Size  Location     Type
  3988 ;;		None
  3989 ;; Return value:  Size  Location     Type
  3990 ;;                  1    wreg      void 
  3991 ;; Registers used:
  3992 ;;		wreg, status,2, status,0
  3993 ;; Tracked objects:
  3994 ;;		On entry : 0/0
  3995 ;;		On exit  : 0/0
  3996 ;;		Unchanged: 0/0
  3997 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3998 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3999 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4000 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4001 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4002 ;;Total ram usage:        0 bytes
  4003 ;; Hardware stack levels used:    1
  4004 ;; This function calls:
  4005 ;;		Nothing
  4006 ;; This function is called by:
  4007 ;;		_submit_piece
  4008 ;; This function uses a non-reentrant model
  4009 ;;
  4010                           
  4011                           	psect	text19
  4012  00233E                     __ptext19:
  4013                           	callstack 0
  4014  00233E                     i2_spawn_piece:
  4015                           	callstack 25
  4016  00233E                     
  4017                           ;main.c: 677:     if (prev_piece == 2)
  4018  00233E  0E02               	movlw	2
  4019  002340  1854               	xorwf	_prev_piece^0,w,c
  4020  002342  1055               	iorwf	(_prev_piece+1)^0,w,c
  4021  002344  A4D8               	btfss	status,2,c
  4022  002346  EFA7  F011         	goto	i2u151_41
  4023  00234A  EFA9  F011         	goto	i2u151_40
  4024  00234E                     i2u151_41:
  4025  00234E  EFB3  F011         	goto	i2l1834
  4026  002352                     i2u151_40:
  4027  002352                     
  4028                           ;main.c: 678:     {;main.c: 680:         active_piece = 0x01000000;
  4029  002352  0E00               	movlw	0
  4030  002354  6E31               	movwf	_active_piece^0,c
  4031  002356  0E00               	movlw	0
  4032  002358  6E32               	movwf	(_active_piece+1)^0,c
  4033  00235A  0E00               	movlw	0
  4034  00235C  6E33               	movwf	(_active_piece+2)^0,c
  4035  00235E  0E01               	movlw	1
  4036  002360  6E34               	movwf	(_active_piece+3)^0,c
  4037                           
  4038                           ;main.c: 681:     }
  4039  002362  EFD7  F011         	goto	i2l277
  4040  002366                     i2l1834:
  4041  002366  0454               	decf	_prev_piece^0,w,c
  4042  002368  1055               	iorwf	(_prev_piece+1)^0,w,c
  4043  00236A  A4D8               	btfss	status,2,c
  4044  00236C  EFBA  F011         	goto	i2u152_41
  4045  002370  EFBC  F011         	goto	i2u152_40
  4046  002374                     i2u152_41:
  4047  002374  EFCF  F011         	goto	i2l1838
  4048  002378                     i2u152_40:
  4049  002378                     
  4050                           ;main.c: 683:     {;main.c: 685:         active_piece = 0x01030000;
  4051  002378  0E00               	movlw	0
  4052  00237A  6E31               	movwf	_active_piece^0,c
  4053  00237C  0E00               	movlw	0
  4054  00237E  6E32               	movwf	(_active_piece+1)^0,c
  4055  002380  0E03               	movlw	3
  4056  002382  6E33               	movwf	(_active_piece+2)^0,c
  4057  002384  0E01               	movlw	1
  4058  002386  6E34               	movwf	(_active_piece+3)^0,c
  4059                           
  4060                           ;main.c: 686:         active_piece_first = 0x01030000;
  4061  002388  0E00               	movlw	0
  4062  00238A  0100               	movlb	0	; () banked
  4063  00238C  6F82               	movwf	_active_piece_first& (0+255),b
  4064  00238E  0E00               	movlw	0
  4065  002390  6F83               	movwf	(_active_piece_first+1)& (0+255),b
  4066  002392  0E03               	movlw	3
  4067  002394  6F84               	movwf	(_active_piece_first+2)& (0+255),b
  4068  002396  0E01               	movlw	1
  4069  002398  6F85               	movwf	(_active_piece_first+3)& (0+255),b
  4070                           
  4071                           ;main.c: 687:     }
  4072  00239A  EFD7  F011         	goto	i2l277
  4073  00239E                     i2l1838:
  4074                           
  4075                           ;main.c: 689:     {;main.c: 691:         active_piece = 0x03030000;
  4076  00239E  0E00               	movlw	0
  4077  0023A0  6E31               	movwf	_active_piece^0,c
  4078  0023A2  0E00               	movlw	0
  4079  0023A4  6E32               	movwf	(_active_piece+1)^0,c
  4080  0023A6  0E03               	movlw	3
  4081  0023A8  6E33               	movwf	(_active_piece+2)^0,c
  4082  0023AA  0E03               	movlw	3
  4083  0023AC  6E34               	movwf	(_active_piece+3)^0,c
  4084  0023AE                     i2l277:
  4085                           
  4086                           ;main.c: 693:     is_active = 1;
  4087  0023AE  0E00               	movlw	0
  4088  0023B0  6E38               	movwf	(_is_active+1)^0,c
  4089  0023B2  0E01               	movlw	1
  4090  0023B4  6E37               	movwf	_is_active^0,c
  4091  0023B6                     
  4092                           ;main.c: 694:     active_piece_record = active_piece;
  4093  0023B6  C031  F02D         	movff	_active_piece,_active_piece_record
  4094  0023BA  C032  F02E         	movff	_active_piece+1,_active_piece_record+1
  4095  0023BE  C033  F02F         	movff	_active_piece+2,_active_piece_record+2
  4096  0023C2  C034  F030         	movff	_active_piece+3,_active_piece_record+3
  4097                           
  4098                           ;main.c: 695:     rotate_counter = 0;
  4099  0023C6  0E00               	movlw	0
  4100  0023C8  6E36               	movwf	(_rotate_counter+1)^0,c
  4101  0023CA  0E00               	movlw	0
  4102  0023CC  6E35               	movwf	_rotate_counter^0,c
  4103  0023CE                     
  4104                           ;main.c: 696:     active_piece_first = active_piece;
  4105  0023CE  C031  F082         	movff	_active_piece,_active_piece_first
  4106  0023D2  C032  F083         	movff	_active_piece+1,_active_piece_first+1
  4107  0023D6  C033  F084         	movff	_active_piece+2,_active_piece_first+2
  4108  0023DA  C034  F085         	movff	_active_piece+3,_active_piece_first+3
  4109  0023DE  0012               	return		;funcret
  4110  0023E0                     __end_ofi2_spawn_piece:
  4111                           	callstack 0
  4112                           
  4113 ;; *************** function i2___awmod *****************
  4114 ;; Defined at:
  4115 ;;		line 7 in file "/opt/microchip/xc8/v2.30/pic/sources/c99/common/awmod.c"
  4116 ;; Parameters:    Size  Location     Type
  4117 ;;  dividend        2    0[COMRAM] int 
  4118 ;;  divisor         2    2[COMRAM] int 
  4119 ;; Auto vars:     Size  Location     Type
  4120 ;;  sign            1    5[COMRAM] unsigned char 
  4121 ;;  counter         1    4[COMRAM] unsigned char 
  4122 ;; Return value:  Size  Location     Type
  4123 ;;                  2    0[COMRAM] int 
  4124 ;; Registers used:
  4125 ;;		wreg, status,2, status,0
  4126 ;; Tracked objects:
  4127 ;;		On entry : 0/0
  4128 ;;		On exit  : 0/0
  4129 ;;		Unchanged: 0/0
  4130 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4131 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4132 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4133 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4134 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4135 ;;Total ram usage:        6 bytes
  4136 ;; Hardware stack levels used:    1
  4137 ;; This function calls:
  4138 ;;		Nothing
  4139 ;; This function is called by:
  4140 ;;		_submit_piece
  4141 ;; This function uses a non-reentrant model
  4142 ;;
  4143                           
  4144                           	psect	text20
  4145  0021EC                     __ptext20:
  4146                           	callstack 0
  4147  0021EC                     i2___awmod:
  4148                           	callstack 25
  4149  0021EC  0E00               	movlw	0
  4150  0021EE  6E06               	movwf	i2___awmod@sign^0,c
  4151  0021F0  BE02               	btfsc	(i2___awmod@dividend+1)^0,7,c
  4152  0021F2  EFFF  F010         	goto	i2u153_40
  4153  0021F6  EFFD  F010         	goto	i2u153_41
  4154  0021FA                     i2u153_41:
  4155  0021FA  EF05  F011         	goto	i2l1852
  4156  0021FE                     i2u153_40:
  4157  0021FE  6C01               	negf	i2___awmod@dividend^0,c
  4158  002200  1E02               	comf	(i2___awmod@dividend+1)^0,f,c
  4159  002202  B0D8               	btfsc	status,0,c
  4160  002204  2A02               	incf	(i2___awmod@dividend+1)^0,f,c
  4161  002206  0E01               	movlw	1
  4162  002208  6E06               	movwf	i2___awmod@sign^0,c
  4163  00220A                     i2l1852:
  4164  00220A  BE04               	btfsc	(i2___awmod@divisor+1)^0,7,c
  4165  00220C  EF0C  F011         	goto	i2u154_40
  4166  002210  EF0A  F011         	goto	i2u154_41
  4167  002214                     i2u154_41:
  4168  002214  EF10  F011         	goto	i2l1856
  4169  002218                     i2u154_40:
  4170  002218  6C03               	negf	i2___awmod@divisor^0,c
  4171  00221A  1E04               	comf	(i2___awmod@divisor+1)^0,f,c
  4172  00221C  B0D8               	btfsc	status,0,c
  4173  00221E  2A04               	incf	(i2___awmod@divisor+1)^0,f,c
  4174  002220                     i2l1856:
  4175  002220  5003               	movf	i2___awmod@divisor^0,w,c
  4176  002222  1004               	iorwf	(i2___awmod@divisor+1)^0,w,c
  4177  002224  B4D8               	btfsc	status,2,c
  4178  002226  EF17  F011         	goto	i2u155_41
  4179  00222A  EF19  F011         	goto	i2u155_40
  4180  00222E                     i2u155_41:
  4181  00222E  EF3D  F011         	goto	i2l1872
  4182  002232                     i2u155_40:
  4183  002232  0E01               	movlw	1
  4184  002234  6E05               	movwf	i2___awmod@counter^0,c
  4185  002236  EF21  F011         	goto	i2l1862
  4186  00223A                     i2l1860:
  4187  00223A  90D8               	bcf	status,0,c
  4188  00223C  3603               	rlcf	i2___awmod@divisor^0,f,c
  4189  00223E  3604               	rlcf	(i2___awmod@divisor+1)^0,f,c
  4190  002240  2A05               	incf	i2___awmod@counter^0,f,c
  4191  002242                     i2l1862:
  4192  002242  AE04               	btfss	(i2___awmod@divisor+1)^0,7,c
  4193  002244  EF26  F011         	goto	i2u156_41
  4194  002248  EF28  F011         	goto	i2u156_40
  4195  00224C                     i2u156_41:
  4196  00224C  EF1D  F011         	goto	i2l1860
  4197  002250                     i2u156_40:
  4198  002250                     i2l1864:
  4199  002250  5003               	movf	i2___awmod@divisor^0,w,c
  4200  002252  5C01               	subwf	i2___awmod@dividend^0,w,c
  4201  002254  5004               	movf	(i2___awmod@divisor+1)^0,w,c
  4202  002256  5802               	subwfb	(i2___awmod@dividend+1)^0,w,c
  4203  002258  A0D8               	btfss	status,0,c
  4204  00225A  EF31  F011         	goto	i2u157_41
  4205  00225E  EF33  F011         	goto	i2u157_40
  4206  002262                     i2u157_41:
  4207  002262  EF37  F011         	goto	i2l1868
  4208  002266                     i2u157_40:
  4209  002266  5003               	movf	i2___awmod@divisor^0,w,c
  4210  002268  5E01               	subwf	i2___awmod@dividend^0,f,c
  4211  00226A  5004               	movf	(i2___awmod@divisor+1)^0,w,c
  4212  00226C  5A02               	subwfb	(i2___awmod@dividend+1)^0,f,c
  4213  00226E                     i2l1868:
  4214  00226E  90D8               	bcf	status,0,c
  4215  002270  3204               	rrcf	(i2___awmod@divisor+1)^0,f,c
  4216  002272  3203               	rrcf	i2___awmod@divisor^0,f,c
  4217  002274  2E05               	decfsz	i2___awmod@counter^0,f,c
  4218  002276  EF28  F011         	goto	i2l1864
  4219  00227A                     i2l1872:
  4220  00227A  5006               	movf	i2___awmod@sign^0,w,c
  4221  00227C  B4D8               	btfsc	status,2,c
  4222  00227E  EF43  F011         	goto	i2u158_41
  4223  002282  EF45  F011         	goto	i2u158_40
  4224  002286                     i2u158_41:
  4225  002286  EF49  F011         	goto	i2l1876
  4226  00228A                     i2u158_40:
  4227  00228A  6C01               	negf	i2___awmod@dividend^0,c
  4228  00228C  1E02               	comf	(i2___awmod@dividend+1)^0,f,c
  4229  00228E  B0D8               	btfsc	status,0,c
  4230  002290  2A02               	incf	(i2___awmod@dividend+1)^0,f,c
  4231  002292                     i2l1876:
  4232  002292  C001  F001         	movff	i2___awmod@dividend,?i2___awmod
  4233  002296  C002  F002         	movff	i2___awmod@dividend+1,?i2___awmod+1
  4234  00229A  0012               	return		;funcret
  4235  00229C                     __end_ofi2___awmod:
  4236                           	callstack 0
  4237                           
  4238 ;; *************** function _rotate_piece *****************
  4239 ;; Defined at:
  4240 ;;		line 319 in file "main.c"
  4241 ;; Parameters:    Size  Location     Type
  4242 ;;		None
  4243 ;; Auto vars:     Size  Location     Type
  4244 ;;  temp            1   37[COMRAM] unsigned char 
  4245 ;;  temp            1   36[COMRAM] unsigned char 
  4246 ;;  active_piece    4    0        unsigned long 
  4247 ;;  temp            1   35[COMRAM] unsigned char 
  4248 ;;  temp            1   34[COMRAM] unsigned char 
  4249 ;;  temp            1   33[COMRAM] unsigned char 
  4250 ;;  temp            1   32[COMRAM] unsigned char 
  4251 ;;  temp            1   31[COMRAM] unsigned char 
  4252 ;;  temp            1   30[COMRAM] unsigned char 
  4253 ;;  port            4   38[COMRAM] unsigned char [4]
  4254 ;; Return value:  Size  Location     Type
  4255 ;;                  1    wreg      void 
  4256 ;; Registers used:
  4257 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4258 ;; Tracked objects:
  4259 ;;		On entry : 0/0
  4260 ;;		On exit  : 0/0
  4261 ;;		Unchanged: 0/0
  4262 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4263 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4264 ;;      Locals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4265 ;;      Temps:         20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4266 ;;      Totals:        36       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4267 ;;Total ram usage:       36 bytes
  4268 ;; Hardware stack levels used:    1
  4269 ;; Hardware stack levels required when called:    1
  4270 ;; This function calls:
  4271 ;;		i2_parse_and_assign
  4272 ;; This function is called by:
  4273 ;;		_HandleInterrupt
  4274 ;; This function uses a non-reentrant model
  4275 ;;
  4276                           
  4277                           	psect	text21
  4278  00100C                     __ptext21:
  4279                           	callstack 0
  4280  00100C                     _rotate_piece:
  4281                           	callstack 25
  4282  00100C                     
  4283                           ;main.c: 321:     uint8_t port[4];;main.c: 322:     if (active_piece == 0x00000000)
  4284  00100C  5031               	movf	_active_piece^0,w,c
  4285  00100E  1032               	iorwf	(_active_piece+1)^0,w,c
  4286  001010  1033               	iorwf	(_active_piece+2)^0,w,c
  4287  001012  1034               	iorwf	(_active_piece+3)^0,w,c
  4288  001014  A4D8               	btfss	status,2,c
  4289  001016  EF0F  F008         	goto	i2u177_41
  4290  00101A  EF11  F008         	goto	i2u177_40
  4291  00101E                     i2u177_41:
  4292  00101E  EF21  F008         	goto	i2l2016
  4293  001022                     i2u177_40:
  4294  001022                     
  4295                           ;main.c: 323:     {;main.c: 324:         parse_and_assign(active_piece_record, port);
  4296  001022  C02D  F001         	movff	_active_piece_record,i2parse_and_assign@value
  4297  001026  C02E  F002         	movff	_active_piece_record+1,i2parse_and_assign@value+1
  4298  00102A  C02F  F003         	movff	_active_piece_record+2,i2parse_and_assign@value+2
  4299  00102E  C030  F004         	movff	_active_piece_record+3,i2parse_and_assign@value+3
  4300  001032  0E27               	movlw	low rotate_piece@port
  4301  001034  6E05               	movwf	i2parse_and_assign@ports^0,c
  4302  001036  0E00               	movlw	high rotate_piece@port
  4303  001038  6E06               	movwf	(i2parse_and_assign@ports+1)^0,c
  4304  00103A  ECC0  F012         	call	i2_parse_and_assign	;wreg free
  4305                           
  4306                           ;main.c: 325:     }
  4307  00103E  EF2F  F008         	goto	i2l2018
  4308  001042                     i2l2016:
  4309                           
  4310                           ;main.c: 327:     {;main.c: 328:         parse_and_assign(active_piece, port);
  4311  001042  C031  F001         	movff	_active_piece,i2parse_and_assign@value
  4312  001046  C032  F002         	movff	_active_piece+1,i2parse_and_assign@value+1
  4313  00104A  C033  F003         	movff	_active_piece+2,i2parse_and_assign@value+2
  4314  00104E  C034  F004         	movff	_active_piece+3,i2parse_and_assign@value+3
  4315  001052  0E27               	movlw	low rotate_piece@port
  4316  001054  6E05               	movwf	i2parse_and_assign@ports^0,c
  4317  001056  0E00               	movlw	high rotate_piece@port
  4318  001058  6E06               	movwf	(i2parse_and_assign@ports+1)^0,c
  4319  00105A  ECC0  F012         	call	i2_parse_and_assign	;wreg free
  4320  00105E                     i2l2018:
  4321                           
  4322                           ;main.c: 331:     if (rotate_counter % 4 == 0)
  4323  00105E  0E03               	movlw	3
  4324  001060  1435               	andwf	_rotate_counter^0,w,c
  4325  001062  6E07               	movwf	??_rotate_piece^0,c
  4326  001064  0E00               	movlw	0
  4327  001066  1436               	andwf	(_rotate_counter+1)^0,w,c
  4328  001068  6E08               	movwf	(??_rotate_piece+1)^0,c
  4329  00106A  5007               	movf	??_rotate_piece^0,w,c
  4330  00106C  1008               	iorwf	(??_rotate_piece+1)^0,w,c
  4331  00106E  A4D8               	btfss	status,2,c
  4332  001070  EF3C  F008         	goto	i2u178_41
  4333  001074  EF3E  F008         	goto	i2u178_40
  4334  001078                     i2u178_41:
  4335  001078  EF74  F008         	goto	i2l2036
  4336  00107C                     i2u178_40:
  4337  00107C                     
  4338                           ;main.c: 332:     {;main.c: 333:         if (port[0] != 0x00)
  4339  00107C  5027               	movf	rotate_piece@port^0,w,c
  4340  00107E  B4D8               	btfsc	status,2,c
  4341  001080  EF44  F008         	goto	i2u179_41
  4342  001084  EF46  F008         	goto	i2u179_40
  4343  001088                     i2u179_41:
  4344  001088  EF4B  F008         	goto	i2l2024
  4345  00108C                     i2u179_40:
  4346  00108C                     
  4347                           ;main.c: 334:         {;main.c: 335:             port[0] = port[0] << 1;
  4348  00108C  5027               	movf	rotate_piece@port^0,w,c
  4349  00108E  2427               	addwf	rotate_piece@port^0,w,c
  4350  001090  6E27               	movwf	rotate_piece@port^0,c
  4351                           
  4352                           ;main.c: 336:         }
  4353  001092  EF45  F009         	goto	i2l2090
  4354  001096                     i2l2024:
  4355  001096  5028               	movf	(rotate_piece@port+1)^0,w,c
  4356  001098  B4D8               	btfsc	status,2,c
  4357  00109A  EF51  F008         	goto	i2u180_41
  4358  00109E  EF53  F008         	goto	i2u180_40
  4359  0010A2                     i2u180_41:
  4360  0010A2  EF58  F008         	goto	i2l2028
  4361  0010A6                     i2u180_40:
  4362  0010A6                     
  4363                           ;main.c: 338:         {;main.c: 339:             port[1] = port[1] << 1;
  4364  0010A6  5028               	movf	(rotate_piece@port+1)^0,w,c
  4365  0010A8  2428               	addwf	(rotate_piece@port+1)^0,w,c
  4366  0010AA  6E28               	movwf	(rotate_piece@port+1)^0,c
  4367                           
  4368                           ;main.c: 340:         }
  4369  0010AC  EF45  F009         	goto	i2l2090
  4370  0010B0                     i2l2028:
  4371  0010B0  5029               	movf	(rotate_piece@port+2)^0,w,c
  4372  0010B2  B4D8               	btfsc	status,2,c
  4373  0010B4  EF5E  F008         	goto	i2u181_41
  4374  0010B8  EF60  F008         	goto	i2u181_40
  4375  0010BC                     i2u181_41:
  4376  0010BC  EF65  F008         	goto	i2l2032
  4377  0010C0                     i2u181_40:
  4378  0010C0                     
  4379                           ;main.c: 342:         {;main.c: 343:             port[2] = port[2] << 1;
  4380  0010C0  5029               	movf	(rotate_piece@port+2)^0,w,c
  4381  0010C2  2429               	addwf	(rotate_piece@port+2)^0,w,c
  4382  0010C4  6E29               	movwf	(rotate_piece@port+2)^0,c
  4383                           
  4384                           ;main.c: 344:         }
  4385  0010C6  EF45  F009         	goto	i2l2090
  4386  0010CA                     i2l2032:
  4387  0010CA  502A               	movf	(rotate_piece@port+3)^0,w,c
  4388  0010CC  B4D8               	btfsc	status,2,c
  4389  0010CE  EF6B  F008         	goto	i2u182_41
  4390  0010D2  EF6D  F008         	goto	i2u182_40
  4391  0010D6                     i2u182_41:
  4392  0010D6  EF72  F008         	goto	i2l182
  4393  0010DA                     i2u182_40:
  4394  0010DA                     
  4395                           ;main.c: 346:         {;main.c: 347:             port[3] = port[3] << 1;
  4396  0010DA  502A               	movf	(rotate_piece@port+3)^0,w,c
  4397  0010DC  242A               	addwf	(rotate_piece@port+3)^0,w,c
  4398  0010DE  6E2A               	movwf	(rotate_piece@port+3)^0,c
  4399  0010E0  EF45  F009         	goto	i2l2090
  4400  0010E4                     i2l182:
  4401  0010E4  EF45  F009         	goto	i2l2090
  4402  0010E8                     i2l2036:
  4403  0010E8  0E03               	movlw	3
  4404  0010EA  1435               	andwf	_rotate_counter^0,w,c
  4405  0010EC  6E07               	movwf	??_rotate_piece^0,c
  4406  0010EE  0E00               	movlw	0
  4407  0010F0  1436               	andwf	(_rotate_counter+1)^0,w,c
  4408  0010F2  6E08               	movwf	(??_rotate_piece+1)^0,c
  4409  0010F4  0407               	decf	??_rotate_piece^0,w,c
  4410  0010F6  1008               	iorwf	(??_rotate_piece+1)^0,w,c
  4411  0010F8  A4D8               	btfss	status,2,c
  4412  0010FA  EF81  F008         	goto	i2u183_41
  4413  0010FE  EF83  F008         	goto	i2u183_40
  4414  001102                     i2u183_41:
  4415  001102  EFC3  F008         	goto	i2l2054
  4416  001106                     i2u183_40:
  4417  001106                     
  4418                           ;main.c: 351:     {;main.c: 352:         if (port[0] != 0x00)
  4419  001106  5027               	movf	rotate_piece@port^0,w,c
  4420  001108  B4D8               	btfsc	status,2,c
  4421  00110A  EF89  F008         	goto	i2u184_41
  4422  00110E  EF8B  F008         	goto	i2u184_40
  4423  001112                     i2u184_41:
  4424  001112  EF93  F008         	goto	i2l2042
  4425  001116                     i2u184_40:
  4426  001116                     
  4427                           ;main.c: 353:         {;main.c: 354:             uint8_t temp = port[0];
  4428  001116  C027  F01F         	movff	rotate_piece@port,rotate_piece@temp
  4429                           
  4430                           ;main.c: 355:             port[0] = port[1];
  4431  00111A  C028  F027         	movff	rotate_piece@port+1,rotate_piece@port
  4432                           
  4433                           ;main.c: 356:             port[1] = temp;
  4434  00111E  C01F  F028         	movff	rotate_piece@temp,rotate_piece@port+1
  4435                           
  4436                           ;main.c: 357:         }
  4437  001122  EF45  F009         	goto	i2l2090
  4438  001126                     i2l2042:
  4439  001126  5028               	movf	(rotate_piece@port+1)^0,w,c
  4440  001128  B4D8               	btfsc	status,2,c
  4441  00112A  EF99  F008         	goto	i2u185_41
  4442  00112E  EF9B  F008         	goto	i2u185_40
  4443  001132                     i2u185_41:
  4444  001132  EFA3  F008         	goto	i2l2046
  4445  001136                     i2u185_40:
  4446  001136                     
  4447                           ;main.c: 359:         {;main.c: 360:             uint8_t temp = port[1];
  4448  001136  C028  F020         	movff	rotate_piece@port+1,rotate_piece@temp_543
  4449                           
  4450                           ;main.c: 361:             port[1] = port[2];
  4451  00113A  C029  F028         	movff	rotate_piece@port+2,rotate_piece@port+1
  4452                           
  4453                           ;main.c: 362:             port[2] = temp;
  4454  00113E  C020  F029         	movff	rotate_piece@temp_543,rotate_piece@port+2
  4455                           
  4456                           ;main.c: 363:         }
  4457  001142  EF45  F009         	goto	i2l2090
  4458  001146                     i2l2046:
  4459  001146  5029               	movf	(rotate_piece@port+2)^0,w,c
  4460  001148  B4D8               	btfsc	status,2,c
  4461  00114A  EFA9  F008         	goto	i2u186_41
  4462  00114E  EFAB  F008         	goto	i2u186_40
  4463  001152                     i2u186_41:
  4464  001152  EFB3  F008         	goto	i2l2050
  4465  001156                     i2u186_40:
  4466  001156                     
  4467                           ;main.c: 365:         {;main.c: 366:             uint8_t temp = port[2];
  4468  001156  C029  F021         	movff	rotate_piece@port+2,rotate_piece@temp_544
  4469                           
  4470                           ;main.c: 367:             port[2] = port[3];
  4471  00115A  C02A  F029         	movff	rotate_piece@port+3,rotate_piece@port+2
  4472                           
  4473                           ;main.c: 368:             port[3] = temp;
  4474  00115E  C021  F02A         	movff	rotate_piece@temp_544,rotate_piece@port+3
  4475                           
  4476                           ;main.c: 369:         }
  4477  001162  EF45  F009         	goto	i2l2090
  4478  001166                     i2l2050:
  4479  001166  502A               	movf	(rotate_piece@port+3)^0,w,c
  4480  001168  B4D8               	btfsc	status,2,c
  4481  00116A  EFB9  F008         	goto	i2u187_41
  4482  00116E  EFBB  F008         	goto	i2u187_40
  4483  001172                     i2u187_41:
  4484  001172  EF72  F008         	goto	i2l182
  4485  001176                     i2u187_40:
  4486  001176                     
  4487                           ;main.c: 371:         {;main.c: 372:             uint8_t temp = port[3];
  4488  001176  C02A  F022         	movff	rotate_piece@port+3,rotate_piece@temp_545
  4489                           
  4490                           ;main.c: 373:             port[3] = port[0];
  4491  00117A  C027  F02A         	movff	rotate_piece@port,rotate_piece@port+3
  4492                           
  4493                           ;main.c: 374:             port[0] = temp;
  4494  00117E  C022  F027         	movff	rotate_piece@temp_545,rotate_piece@port
  4495  001182  EF45  F009         	goto	i2l2090
  4496  001186                     i2l2054:
  4497  001186  0E03               	movlw	3
  4498  001188  1435               	andwf	_rotate_counter^0,w,c
  4499  00118A  6E07               	movwf	??_rotate_piece^0,c
  4500  00118C  0E00               	movlw	0
  4501  00118E  1436               	andwf	(_rotate_counter+1)^0,w,c
  4502  001190  6E08               	movwf	(??_rotate_piece+1)^0,c
  4503  001192  0E02               	movlw	2
  4504  001194  1807               	xorwf	??_rotate_piece^0,w,c
  4505  001196  1008               	iorwf	(??_rotate_piece+1)^0,w,c
  4506  001198  A4D8               	btfss	status,2,c
  4507  00119A  EFD1  F008         	goto	i2u188_41
  4508  00119E  EFD3  F008         	goto	i2u188_40
  4509  0011A2                     i2u188_41:
  4510  0011A2  EF07  F009         	goto	i2l2072
  4511  0011A6                     i2u188_40:
  4512  0011A6                     
  4513                           ;main.c: 378:     {;main.c: 379:         if (port[3] != 0x00)
  4514  0011A6  502A               	movf	(rotate_piece@port+3)^0,w,c
  4515  0011A8  B4D8               	btfsc	status,2,c
  4516  0011AA  EFD9  F008         	goto	i2u189_41
  4517  0011AE  EFDB  F008         	goto	i2u189_40
  4518  0011B2                     i2u189_41:
  4519  0011B2  EFE0  F008         	goto	i2l2060
  4520  0011B6                     i2u189_40:
  4521  0011B6                     
  4522                           ;main.c: 380:         {;main.c: 381:             port[3] = port[3] >> 1;
  4523  0011B6  90D8               	bcf	status,0,c
  4524  0011B8  302A               	rrcf	(rotate_piece@port+3)^0,w,c
  4525  0011BA  6E2A               	movwf	(rotate_piece@port+3)^0,c
  4526                           
  4527                           ;main.c: 382:         }
  4528  0011BC  EF45  F009         	goto	i2l2090
  4529  0011C0                     i2l2060:
  4530  0011C0  5029               	movf	(rotate_piece@port+2)^0,w,c
  4531  0011C2  B4D8               	btfsc	status,2,c
  4532  0011C4  EFE6  F008         	goto	i2u190_41
  4533  0011C8  EFE8  F008         	goto	i2u190_40
  4534  0011CC                     i2u190_41:
  4535  0011CC  EFED  F008         	goto	i2l2064
  4536  0011D0                     i2u190_40:
  4537  0011D0                     
  4538                           ;main.c: 384:         {;main.c: 385:             port[2] = port[2] >> 1;
  4539  0011D0  90D8               	bcf	status,0,c
  4540  0011D2  3029               	rrcf	(rotate_piece@port+2)^0,w,c
  4541  0011D4  6E29               	movwf	(rotate_piece@port+2)^0,c
  4542                           
  4543                           ;main.c: 386:         }
  4544  0011D6  EF45  F009         	goto	i2l2090
  4545  0011DA                     i2l2064:
  4546  0011DA  5028               	movf	(rotate_piece@port+1)^0,w,c
  4547  0011DC  B4D8               	btfsc	status,2,c
  4548  0011DE  EFF3  F008         	goto	i2u191_41
  4549  0011E2  EFF5  F008         	goto	i2u191_40
  4550  0011E6                     i2u191_41:
  4551  0011E6  EFFA  F008         	goto	i2l2068
  4552  0011EA                     i2u191_40:
  4553  0011EA                     
  4554                           ;main.c: 388:         {;main.c: 389:             port[1] = port[1] >> 1;
  4555  0011EA  90D8               	bcf	status,0,c
  4556  0011EC  3028               	rrcf	(rotate_piece@port+1)^0,w,c
  4557  0011EE  6E28               	movwf	(rotate_piece@port+1)^0,c
  4558                           
  4559                           ;main.c: 390:         }
  4560  0011F0  EF45  F009         	goto	i2l2090
  4561  0011F4                     i2l2068:
  4562  0011F4  5027               	movf	rotate_piece@port^0,w,c
  4563  0011F6  B4D8               	btfsc	status,2,c
  4564  0011F8  EF00  F009         	goto	i2u192_41
  4565  0011FC  EF02  F009         	goto	i2u192_40
  4566  001200                     i2u192_41:
  4567  001200  EF72  F008         	goto	i2l182
  4568  001204                     i2u192_40:
  4569  001204                     
  4570                           ;main.c: 392:         {;main.c: 393:             port[0] = port[0] >> 1;
  4571  001204  90D8               	bcf	status,0,c
  4572  001206  3027               	rrcf	rotate_piece@port^0,w,c
  4573  001208  6E27               	movwf	rotate_piece@port^0,c
  4574  00120A  EF45  F009         	goto	i2l2090
  4575  00120E                     i2l2072:
  4576                           
  4577                           ;main.c: 397:     {;main.c: 398:         if (port[0] != 0x00)
  4578  00120E  5027               	movf	rotate_piece@port^0,w,c
  4579  001210  B4D8               	btfsc	status,2,c
  4580  001212  EF0D  F009         	goto	i2u193_41
  4581  001216  EF0F  F009         	goto	i2u193_40
  4582  00121A                     i2u193_41:
  4583  00121A  EF17  F009         	goto	i2l2076
  4584  00121E                     i2u193_40:
  4585  00121E                     
  4586                           ;main.c: 399:         {;main.c: 400:             uint8_t temp = port[0];
  4587  00121E  C027  F023         	movff	rotate_piece@port,rotate_piece@temp_546
  4588                           
  4589                           ;main.c: 401:             port[0] = port[1];
  4590  001222  C028  F027         	movff	rotate_piece@port+1,rotate_piece@port
  4591                           
  4592                           ;main.c: 402:             port[1] = temp;
  4593  001226  C023  F028         	movff	rotate_piece@temp_546,rotate_piece@port+1
  4594                           
  4595                           ;main.c: 403:         }
  4596  00122A  EF45  F009         	goto	i2l2090
  4597  00122E                     i2l2076:
  4598  00122E  5028               	movf	(rotate_piece@port+1)^0,w,c
  4599  001230  B4D8               	btfsc	status,2,c
  4600  001232  EF1D  F009         	goto	i2u194_41
  4601  001236  EF1F  F009         	goto	i2u194_40
  4602  00123A                     i2u194_41:
  4603  00123A  EF27  F009         	goto	i2l2082
  4604  00123E                     i2u194_40:
  4605  00123E                     
  4606                           ;main.c: 405:         {;main.c: 406:             uint8_t temp = port[1];
  4607  00123E  C028  F024         	movff	rotate_piece@port+1,rotate_piece@temp_547
  4608                           
  4609                           ;main.c: 407:             port[1] = port[2];
  4610  001242  C029  F028         	movff	rotate_piece@port+2,rotate_piece@port+1
  4611                           
  4612                           ;main.c: 408:             port[2] = temp;
  4613  001246  C024  F029         	movff	rotate_piece@temp_547,rotate_piece@port+2
  4614  00124A                     
  4615                           ;main.c: 410:         }
  4616  00124A  EF45  F009         	goto	i2l2090
  4617  00124E                     i2l2082:
  4618  00124E  5029               	movf	(rotate_piece@port+2)^0,w,c
  4619  001250  B4D8               	btfsc	status,2,c
  4620  001252  EF2D  F009         	goto	i2u195_41
  4621  001256  EF2F  F009         	goto	i2u195_40
  4622  00125A                     i2u195_41:
  4623  00125A  EF37  F009         	goto	i2l2086
  4624  00125E                     i2u195_40:
  4625  00125E                     
  4626                           ;main.c: 412:         {;main.c: 413:             uint8_t temp = port[2];
  4627  00125E  C029  F025         	movff	rotate_piece@port+2,rotate_piece@temp_549
  4628                           
  4629                           ;main.c: 414:             port[2] = port[3];
  4630  001262  C02A  F029         	movff	rotate_piece@port+3,rotate_piece@port+2
  4631                           
  4632                           ;main.c: 415:             port[3] = temp;
  4633  001266  C025  F02A         	movff	rotate_piece@temp_549,rotate_piece@port+3
  4634                           
  4635                           ;main.c: 416:         }
  4636  00126A  EF45  F009         	goto	i2l2090
  4637  00126E                     i2l2086:
  4638  00126E  502A               	movf	(rotate_piece@port+3)^0,w,c
  4639  001270  B4D8               	btfsc	status,2,c
  4640  001272  EF3D  F009         	goto	i2u196_41
  4641  001276  EF3F  F009         	goto	i2u196_40
  4642  00127A                     i2u196_41:
  4643  00127A  EF72  F008         	goto	i2l182
  4644  00127E                     i2u196_40:
  4645  00127E                     
  4646                           ;main.c: 418:         {;main.c: 419:             uint8_t temp = port[3];
  4647  00127E  C02A  F026         	movff	rotate_piece@port+3,rotate_piece@temp_550
  4648                           
  4649                           ;main.c: 420:             port[3] = port[0];
  4650  001282  C027  F02A         	movff	rotate_piece@port,rotate_piece@port+3
  4651                           
  4652                           ;main.c: 421:             port[0] = temp;
  4653  001286  C026  F027         	movff	rotate_piece@temp_550,rotate_piece@port
  4654  00128A                     i2l2090:
  4655                           
  4656                           ;main.c: 425:     rotate_counter++;
  4657  00128A  4A35               	infsnz	_rotate_counter^0,f,c
  4658  00128C  2A36               	incf	(_rotate_counter+1)^0,f,c
  4659  00128E                     
  4660                           ;main.c: 427:     active_piece = ((uint32_t)port[0] << 24) | ((uint32_t)port[1] << 16) |
      +                           ((uint32_t)port[2] << 8) | ((uint32_t)port[3]);
  4661  00128E  C029  F007         	movff	rotate_piece@port+2,??_rotate_piece
  4662  001292  6A08               	clrf	(??_rotate_piece+1)^0,c
  4663  001294  6A09               	clrf	(??_rotate_piece+2)^0,c
  4664  001296  6A0A               	clrf	(??_rotate_piece+3)^0,c
  4665  001298  C009  F00A         	movff	??_rotate_piece+2,??_rotate_piece+3
  4666  00129C  C008  F009         	movff	??_rotate_piece+1,??_rotate_piece+2
  4667  0012A0  C007  F008         	movff	??_rotate_piece,??_rotate_piece+1
  4668  0012A4  6A07               	clrf	??_rotate_piece^0,c
  4669  0012A6  C028  F00B         	movff	rotate_piece@port+1,??_rotate_piece+4
  4670  0012AA  6A0C               	clrf	(??_rotate_piece+5)^0,c
  4671  0012AC  6A0D               	clrf	(??_rotate_piece+6)^0,c
  4672  0012AE  6A0E               	clrf	(??_rotate_piece+7)^0,c
  4673  0012B0  C00C  F00E         	movff	??_rotate_piece+5,??_rotate_piece+7
  4674  0012B4  C00B  F00D         	movff	??_rotate_piece+4,??_rotate_piece+6
  4675  0012B8  6A0C               	clrf	(??_rotate_piece+5)^0,c
  4676  0012BA  6A0B               	clrf	(??_rotate_piece+4)^0,c
  4677  0012BC  C027  F00F         	movff	rotate_piece@port,??_rotate_piece+8
  4678  0012C0  6A10               	clrf	(??_rotate_piece+9)^0,c
  4679  0012C2  6A11               	clrf	(??_rotate_piece+10)^0,c
  4680  0012C4  6A12               	clrf	(??_rotate_piece+11)^0,c
  4681  0012C6  C00F  F012         	movff	??_rotate_piece+8,??_rotate_piece+11
  4682  0012CA  6A11               	clrf	(??_rotate_piece+10)^0,c
  4683  0012CC  6A10               	clrf	(??_rotate_piece+9)^0,c
  4684  0012CE  6A0F               	clrf	(??_rotate_piece+8)^0,c
  4685  0012D0  500B               	movf	(??_rotate_piece+4)^0,w,c
  4686  0012D2  100F               	iorwf	(??_rotate_piece+8)^0,w,c
  4687  0012D4  6E13               	movwf	(??_rotate_piece+12)^0,c
  4688  0012D6  500C               	movf	(??_rotate_piece+5)^0,w,c
  4689  0012D8  1010               	iorwf	(??_rotate_piece+9)^0,w,c
  4690  0012DA  6E14               	movwf	(??_rotate_piece+13)^0,c
  4691  0012DC  500D               	movf	(??_rotate_piece+6)^0,w,c
  4692  0012DE  1011               	iorwf	(??_rotate_piece+10)^0,w,c
  4693  0012E0  6E15               	movwf	(??_rotate_piece+14)^0,c
  4694  0012E2  500E               	movf	(??_rotate_piece+7)^0,w,c
  4695  0012E4  1012               	iorwf	(??_rotate_piece+11)^0,w,c
  4696  0012E6  6E16               	movwf	(??_rotate_piece+15)^0,c
  4697  0012E8  5007               	movf	??_rotate_piece^0,w,c
  4698  0012EA  1013               	iorwf	(??_rotate_piece+12)^0,w,c
  4699  0012EC  6E17               	movwf	(??_rotate_piece+16)^0,c
  4700  0012EE  5008               	movf	(??_rotate_piece+1)^0,w,c
  4701  0012F0  1014               	iorwf	(??_rotate_piece+13)^0,w,c
  4702  0012F2  6E18               	movwf	(??_rotate_piece+17)^0,c
  4703  0012F4  5009               	movf	(??_rotate_piece+2)^0,w,c
  4704  0012F6  1015               	iorwf	(??_rotate_piece+14)^0,w,c
  4705  0012F8  6E19               	movwf	(??_rotate_piece+18)^0,c
  4706  0012FA  500A               	movf	(??_rotate_piece+3)^0,w,c
  4707  0012FC  1016               	iorwf	(??_rotate_piece+15)^0,w,c
  4708  0012FE  6E1A               	movwf	(??_rotate_piece+19)^0,c
  4709  001300  502A               	movf	(rotate_piece@port+3)^0,w,c
  4710  001302  1017               	iorwf	(??_rotate_piece+16)^0,w,c
  4711  001304  6E31               	movwf	_active_piece^0,c
  4712  001306  5018               	movf	(??_rotate_piece+17)^0,w,c
  4713  001308  6E32               	movwf	(_active_piece+1)^0,c
  4714  00130A  5019               	movf	(??_rotate_piece+18)^0,w,c
  4715  00130C  6E33               	movwf	(_active_piece+2)^0,c
  4716  00130E  501A               	movf	(??_rotate_piece+19)^0,w,c
  4717  001310  6E34               	movwf	(_active_piece+3)^0,c
  4718  001312                     
  4719                           ;main.c: 428:     active_piece_record = active_piece;
  4720  001312  C031  F02D         	movff	_active_piece,_active_piece_record
  4721  001316  C032  F02E         	movff	_active_piece+1,_active_piece_record+1
  4722  00131A  C033  F02F         	movff	_active_piece+2,_active_piece_record+2
  4723  00131E  C034  F030         	movff	_active_piece+3,_active_piece_record+3
  4724  001322  0012               	return		;funcret
  4725  001324                     __end_of_rotate_piece:
  4726                           	callstack 0
  4727                           
  4728 ;; *************** function i2_parse_and_assign *****************
  4729 ;; Defined at:
  4730 ;;		line 666 in file "main.c"
  4731 ;; Parameters:    Size  Location     Type
  4732 ;;  value           4    0[COMRAM] unsigned long 
  4733 ;;  ports           2    4[COMRAM] PTR unsigned char 
  4734 ;;		 -> i2show_piece@ports(4), i2move_down@ports(4), show_piece@ports(4), move_down@ports(4), 
  4735 ;;		 -> move_up@ports(4), move_left@ports(4), move_right@ports(4), submit_piece@ports(4), 
  4736 ;;		 -> rotate_piece@port(4), 
  4737 ;; Auto vars:     Size  Location     Type
  4738 ;;		None
  4739 ;; Return value:  Size  Location     Type
  4740 ;;                  1    wreg      void 
  4741 ;; Registers used:
  4742 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4743 ;; Tracked objects:
  4744 ;;		On entry : 0/0
  4745 ;;		On exit  : 0/0
  4746 ;;		Unchanged: 0/0
  4747 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4748 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4749 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4750 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4751 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4752 ;;Total ram usage:        6 bytes
  4753 ;; Hardware stack levels used:    1
  4754 ;; This function calls:
  4755 ;;		Nothing
  4756 ;; This function is called by:
  4757 ;;		_rotate_piece
  4758 ;;		_submit_piece
  4759 ;;		i2_move_down
  4760 ;;		i2_show_piece
  4761 ;; This function uses a non-reentrant model
  4762 ;;
  4763                           
  4764                           	psect	text22
  4765  002580                     __ptext22:
  4766                           	callstack 0
  4767  002580                     i2_parse_and_assign:
  4768                           	callstack 25
  4769  002580                     
  4770                           ;main.c: 666: void parse_and_assign(uint32_t value, uint8_t *ports);main.c: 667: {;main.
      +                          c: 668:     ports[0] = (value >> 24) & 0xFF;
  4771  002580  C005  FFD9         	movff	i2parse_and_assign@ports,fsr2l
  4772  002584  C006  FFDA         	movff	i2parse_and_assign@ports+1,fsr2h
  4773  002588  C004  FFDF         	movff	i2parse_and_assign@value+3,indf2
  4774  00258C                     
  4775                           ;main.c: 669:     ports[1] = (value >> 16) & 0xFF;
  4776  00258C  EE20 F001          	lfsr	2,1
  4777  002590  5005               	movf	i2parse_and_assign@ports^0,w,c
  4778  002592  26D9               	addwf	fsr2l,f,c
  4779  002594  5006               	movf	(i2parse_and_assign@ports+1)^0,w,c
  4780  002596  22DA               	addwfc	fsr2h,f,c
  4781  002598  C003  FFDF         	movff	i2parse_and_assign@value+2,indf2
  4782  00259C                     
  4783                           ;main.c: 670:     ports[2] = (value >> 8) & 0xFF;
  4784  00259C  EE20 F002          	lfsr	2,2
  4785  0025A0  5005               	movf	i2parse_and_assign@ports^0,w,c
  4786  0025A2  26D9               	addwf	fsr2l,f,c
  4787  0025A4  5006               	movf	(i2parse_and_assign@ports+1)^0,w,c
  4788  0025A6  22DA               	addwfc	fsr2h,f,c
  4789  0025A8  C002  FFDF         	movff	i2parse_and_assign@value+1,indf2
  4790  0025AC                     
  4791                           ;main.c: 671:     ports[3] = (value & 0xFF);
  4792  0025AC  EE20 F003          	lfsr	2,3
  4793  0025B0  5005               	movf	i2parse_and_assign@ports^0,w,c
  4794  0025B2  26D9               	addwf	fsr2l,f,c
  4795  0025B4  5006               	movf	(i2parse_and_assign@ports+1)^0,w,c
  4796  0025B6  22DA               	addwfc	fsr2h,f,c
  4797  0025B8  C001  FFDF         	movff	i2parse_and_assign@value,indf2
  4798  0025BC  0012               	return		;funcret
  4799  0025BE                     __end_ofi2_parse_and_assign:
  4800                           	callstack 0
  4801                           
  4802                           	psect	rparam
  4803  0000                     
  4804                           	psect	temp
  4805  000057                     btemp:
  4806                           	callstack 0
  4807  000057                     	ds	1
  4808  0000                     int$flags	set	btemp
  4809  0000                     wtemp8	set	btemp+1
  4810  0000                     ttemp5	set	btemp+1
  4811  0000                     ttemp6	set	btemp+4
  4812  0000                     ttemp7	set	btemp+8
  4813                           
  4814                           	psect	config
  4815                           
  4816                           ; Padding undefined space
  4817  300000                     	org	3145728
  4818  300000  FF                 	db	255
  4819                           
  4820                           ;Config register CONFIG1H @ 0x300001
  4821                           ;	Oscillator Selection bits
  4822                           ;	OSC = HSPLL, HS oscillator, PLL enabled (Clock Frequency = 4 x FOSC1)
  4823                           ;	Fail-Safe Clock Monitor Enable bit
  4824                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
  4825                           ;	Internal/External Oscillator Switchover bit
  4826                           ;	IESO = OFF, Two-Speed Start-up disabled
  4827  300001                     	org	3145729
  4828  300001  06                 	db	6
  4829                           
  4830                           ;Config register CONFIG2L @ 0x300002
  4831                           ;	Power-up Timer Enable bit
  4832                           ;	PWRT = OFF, PWRT disabled
  4833                           ;	Brown-out Reset Enable bits
  4834                           ;	BOREN = OFF, Brown-out Reset disabled in hardware and software
  4835                           ;	Brown-out Voltage bits
  4836                           ;	BORV = 0x3, unprogrammed default
  4837  300002                     	org	3145730
  4838  300002  19                 	db	25
  4839                           
  4840                           ;Config register CONFIG2H @ 0x300003
  4841                           ;	Watchdog Timer
  4842                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  4843                           ;	Watchdog Timer Postscale Select bits
  4844                           ;	WDTPS = 0xF, unprogrammed default
  4845  300003                     	org	3145731
  4846  300003  1E                 	db	30
  4847                           
  4848                           ;Config register CONFIG3L @ 0x300004
  4849                           ;	unspecified, using default values
  4850                           ;	Processor Data Memory Mode Select bits
  4851                           ;	MODE = 0x3, unprogrammed default
  4852                           ;	Address Bus Width Select bits
  4853                           ;	ADDRBW = 0x3, unprogrammed default
  4854                           ;	Data Bus Width Select bit
  4855                           ;	DATABW = 0x1, unprogrammed default
  4856                           ;	External Bus Data Wait Enable bit
  4857                           ;	WAIT = 0x1, unprogrammed default
  4858  300004                     	org	3145732
  4859  300004  F3                 	db	243
  4860                           
  4861                           ;Config register CONFIG3H @ 0x300005
  4862                           ;	CCP2 MUX bit
  4863                           ;	CCP2MX = 0x1, unprogrammed default
  4864                           ;	ECCP MUX bit
  4865                           ;	ECCPMX = 0x1, unprogrammed default
  4866                           ;	Low-Power Timer1 Oscillator Enable bit
  4867                           ;	LPT1OSC = OFF, Timer1 configured for higher power operation
  4868                           ;	MCLR Pin Enable bit
  4869                           ;	MCLRE = ON, MCLR pin enabled; RG5 input pin disabled
  4870  300005                     	org	3145733
  4871  300005  83                 	db	131
  4872                           
  4873                           ;Config register CONFIG4L @ 0x300006
  4874                           ;	Stack Full/Underflow Reset Enable bit
  4875                           ;	STVREN = 0x1, unprogrammed default
  4876                           ;	Single-Supply ICSP Enable bit
  4877                           ;	LVP = OFF, Single-Supply ICSP disabled
  4878                           ;	Boot Block Size Select bits
  4879                           ;	BBSIZ = 0x0, unprogrammed default
  4880                           ;	Extended Instruction Set Enable bit
  4881                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled (Legacy mo
      +                          de)
  4882                           ;	Background Debugger Enable bit
  4883                           ;	DEBUG = OFF, Background debugger disabled, RB6 and RB7 configured as general purpose I
      +                          /O pins
  4884  300006                     	org	3145734
  4885  300006  81                 	db	129
  4886                           
  4887                           ; Padding undefined space
  4888  300007                     	org	3145735
  4889  300007  FF                 	db	255
  4890                           tosu	equ	0xFFF
  4891                           tosh	equ	0xFFE
  4892                           tosl	equ	0xFFD
  4893                           stkptr	equ	0xFFC
  4894                           pclatu	equ	0xFFB
  4895                           pclath	equ	0xFFA
  4896                           pcl	equ	0xFF9
  4897                           tblptru	equ	0xFF8
  4898                           tblptrh	equ	0xFF7
  4899                           tblptrl	equ	0xFF6
  4900                           tablat	equ	0xFF5
  4901                           prodh	equ	0xFF4
  4902                           prodl	equ	0xFF3
  4903                           indf0	equ	0xFEF
  4904                           postinc0	equ	0xFEE
  4905                           postdec0	equ	0xFED
  4906                           preinc0	equ	0xFEC
  4907                           plusw0	equ	0xFEB
  4908                           fsr0h	equ	0xFEA
  4909                           fsr0l	equ	0xFE9
  4910                           wreg	equ	0xFE8
  4911                           indf1	equ	0xFE7
  4912                           postinc1	equ	0xFE6
  4913                           postdec1	equ	0xFE5
  4914                           preinc1	equ	0xFE4
  4915                           plusw1	equ	0xFE3
  4916                           fsr1h	equ	0xFE2
  4917                           fsr1l	equ	0xFE1
  4918                           bsr	equ	0xFE0
  4919                           indf2	equ	0xFDF
  4920                           postinc2	equ	0xFDE
  4921                           postdec2	equ	0xFDD
  4922                           preinc2	equ	0xFDC
  4923                           plusw2	equ	0xFDB
  4924                           fsr2h	equ	0xFDA
  4925                           fsr2l	equ	0xFD9
  4926                           status	equ	0xFD8

Data Sizes:
    Strings     0
    Constant    10
    Data        4
    BSS         47
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     44      86
    BANK0           160     34      44
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          244      0       0
    BANK15           96      0       0

Pointer List with Targets:

    parse_and_assign@ports	PTR unsigned char  size(2) Largest target is 4
		 -> show_piece@ports(BANK0[4]), move_down@ports(BANK0[4]), move_up@ports(BANK0[4]), move_left@ports(BANK0[4]), 
		 -> move_right@ports(BANK0[4]), submit_piece@ports(COMRAM[4]), rotate_piece@port(COMRAM[4]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _HandleInterrupt in COMRAM

    _HandleInterrupt->_rotate_piece
    i2_show_piece->i2_parse_and_assign
    i2_move_down->i2_parse_and_assign
    _submit_piece->i2___awmod
    _submit_piece->i2_parse_and_assign
    _rotate_piece->i2_parse_and_assign

Critical Paths under _main in BANK0

    _main->_check_buttons_rg
    _show_piece->_parse_and_assign
    _displayNumber->___awdiv
    _check_buttons_rg->_move_left
    _check_buttons_rg->_move_right
    _move_up->_parse_and_assign
    _move_right->_parse_and_assign
    _move_left->_parse_and_assign
    _move_down->_parse_and_assign

Critical Paths under _HandleInterrupt in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _HandleInterrupt in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _HandleInterrupt in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _HandleInterrupt in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _HandleInterrupt in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _HandleInterrupt in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _HandleInterrupt in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _HandleInterrupt in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _HandleInterrupt in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _HandleInterrupt in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _HandleInterrupt in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _HandleInterrupt in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _HandleInterrupt in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _HandleInterrupt in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _HandleInterrupt in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _HandleInterrupt in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   16580
                               _Init
       _InitializeTimerAndInterrupts
                   _check_buttons_rg
                      _displayNumber
                         _show_piece
                        _spawn_piece
 ---------------------------------------------------------------------------------
 (1) _spawn_piece                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _show_piece                                           4     4      0    2786
                                              6 BANK0      4     4      0
                   _parse_and_assign
 ---------------------------------------------------------------------------------
 (1) _displayNumber                                        6     4      2    1990
                                              8 BANK0      6     4      2
                            ___awdiv
                            ___awmod
                       _displayDigit
 ---------------------------------------------------------------------------------
 (2) _displayDigit                                         5     2      3     422
                                              0 BANK0      5     2      3
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4     723
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     625
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (1) _check_buttons_rg                                     1     1      0   11804
                                             33 BANK0      1     1      0
                          _move_down
                          _move_left
                         _move_right
                            _move_up
 ---------------------------------------------------------------------------------
 (2) _move_up                                             24    24      0    2931
                                              6 BANK0     24    24      0
                   _parse_and_assign
 ---------------------------------------------------------------------------------
 (2) _move_right                                          27    27      0    2900
                                              6 BANK0     27    27      0
                   _parse_and_assign
 ---------------------------------------------------------------------------------
 (2) _move_left                                           27    27      0    2900
                                              6 BANK0     27    27      0
                   _parse_and_assign
 ---------------------------------------------------------------------------------
 (2) _move_down                                           24    24      0    2931
                                              6 BANK0     24    24      0
                   _parse_and_assign
 ---------------------------------------------------------------------------------
 (2) _parse_and_assign                                     6     0      6    2308
                                              0 BANK0      6     0      6
 ---------------------------------------------------------------------------------
 (1) _InitializeTimerAndInterrupts                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Init                                                 0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _HandleInterrupt                                      2     2      0    5044
                                             42 COMRAM     2     2      0
                       _rotate_piece
                       _submit_piece
                        i2_move_down
                       i2_show_piece
 ---------------------------------------------------------------------------------
 (5) i2_show_piece                                         4     4      0     843
                                              6 COMRAM     4     4      0
                 i2_parse_and_assign
 ---------------------------------------------------------------------------------
 (5) i2_move_down                                         24    24      0     938
                                              6 COMRAM    24    24      0
                 i2_parse_and_assign
 ---------------------------------------------------------------------------------
 (5) _submit_piece                                         4     4      0    1039
                                              6 COMRAM     4     4      0
                          i2___awmod
                 i2_parse_and_assign
                      i2_spawn_piece
 ---------------------------------------------------------------------------------
 (6) i2_spawn_piece                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (6) i2___awmod                                            6     2      4     348
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (5) _rotate_piece                                        36    36      0    2224
                                              6 COMRAM    36    36      0
                 i2_parse_and_assign
 ---------------------------------------------------------------------------------
 (6) i2_parse_and_assign                                   6     0      6     540
                                              0 COMRAM     6     0      6
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Init
   _InitializeTimerAndInterrupts
   _check_buttons_rg
     _move_down
       _parse_and_assign
     _move_left
       _parse_and_assign
     _move_right
       _parse_and_assign
     _move_up
       _parse_and_assign
   _displayNumber
     ___awdiv
     ___awmod
     _displayDigit
   _show_piece
     _parse_and_assign
   _spawn_piece

 _HandleInterrupt (ROOT)
   _rotate_piece
     i2_parse_and_assign
   _submit_piece
     i2___awmod
     i2_parse_and_assign
     i2_spawn_piece
   i2_move_down
     i2_parse_and_assign
   i2_show_piece
     i2_parse_and_assign

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             EF3      0       0      38        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0       0       8        0.0%
BITBANK14           F4      0       0      33        0.0%
BANK14              F4      0       0      34        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     22      2C       5       27.5%
BITBANK15           60      0       0      35        0.0%
BANK15              60      0       0      36        0.0%
BIGRAM_1            60      0       0      37        0.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     2C      56       1       91.5%
BITSFR_5             0      0       0     200        0.0%
SFR_5                0      0       0     200        0.0%
BITSFR_4             0      0       0     200        0.0%
SFR_4                0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      82       6        0.0%
DATA                 0      0      82       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.30 build 20200825195618 
Symbol Table                                                                                   Tue Apr 23 00:00:33 2024

                 rotate_piece@temp_550 0026                   rotate_piece@temp_543 0020  
                 rotate_piece@temp_544 0021                   rotate_piece@temp_545 0022  
                 rotate_piece@temp_546 0023                   rotate_piece@temp_547 0024  
                 rotate_piece@temp_549 0025                           ___awdiv@sign 0065  
                  __end_ofi2_move_down 1E44                          ?_displayDigit 0060  
                                  l152 25EE                                    l241 192A  
                                  l243 1940                                    l252 1F5C  
                                  l236 18DC                                    l149 2448  
                                  l270 1BCE                                    l246 1952  
                                  l239 1914                                    l264 1A90  
                                  l280 233C                                    l273 257E  
                                  l258 2072                                    l291 253E  
                                  l283 154A                                    l284 158C  
                                  l285 15CE                                    l277 230C  
                                  l294 24AA                                    l286 1610  
                                  l536 2138                                    l288 1660  
                                  l549 21EA                           _rotate_piece 100C  
                         ___awmod@sign 0065                                    wreg 000FE8  
                       ?_displayNumber 0068                                   l2400 19C8  
                                 l2330 255E                                   l2402 19D6  
                                 l2410 24FA                                   l2500 2444  
                                 l2332 256E                                   l2340 1AE8  
                                 l2404 19E4                                   l2420 2088  
                                 l2412 251A                                   l2510 25E6  
                                 l2502 25BE                                   l2326 2540  
                                 l2350 1BBE                                   l2342 1AF8  
                                 l2334 1A92                                   l2406 1A80  
                                 l2430 20AE                                   l2422 2090  
                                 l2414 252C                                   l2512 25E8  
                                 l2504 25DA                                   l2328 254C  
                                 l2344 1B06                                   l2336 1AA8  
                                 l2360 1EAC                                   l2352 1E44  
                                 l2600 185E                                   l2440 20E6  
                                 l2432 20B6                                   l2424 2094  
                                 l2416 2074                                   l2408 24F6  
                                 l2520 14EE                                   l2514 25EA  
                                 l2506 25E2                                   l2346 1B14  
                                 l2338 1ACA                                   l2370 1EC8  
                                 l2362 1EB8                                   l2354 1E5A  
                                 l2610 189E                                   l2602 186A  
                                 l2450 2112                                   l2442 20EC  
                                 l2434 20C8                                   l2426 20A2  
                                 l2418 207A                                   l2530 151C  
                                 l2522 14F6                                   l2516 25EC  
                                 l2508 25E4                                   l2348 1B22  
                                 l2380 1FB4                                   l2372 1F4C  
                                 l2364 1EBC                                   l2356 1E7C  
                                 l2620 18E0                                   l2612 18A6  
                                 l2604 187A                                   l2444 2102  
                                 l2436 20D0                                   l2452 2118  
                                 l2428 20AA                                   l2460 213A  
                                 l2540 155E                                   l2532 152E  
                                 l2524 14FC                                   l2382 1FC6  
                                 l2374 1F5E                                   l2366 1EC0  
                                 l2358 1E9A                                   l2390 1954  
                                 l2630 1922                                   l2622 18F2  
                                 l2606 188C                                   l2614 18AE  
                                 l2454 2128                                   l2446 210A  
                                 l2438 20D8                                   l2470 2168  
                                 l2462 2140                                   l2550 15A0  
                                 l2542 1570                                   l2534 1536  
                                 l2526 1502                                   l2518 14D0  
                                 l2384 1FDA                                   l2376 1F74  
                                 l2368 1EC4                                   l2392 196A  
                                 l2632 1938                                   l2624 18F6  
                                 l2616 18C0                                   l2608 188E  
                                 l2456 2130                                   l2448 210C  
                                 l2480 21A0                                   l2472 2170  
                                 l2464 214E                                   l2640 2498  
                                 l2560 15E2                                   l2552 15B2  
                                 l2544 1578                                   l2536 153A  
                                 l2528 1508                                   l2386 1FDE  
                                 l2378 1F96                                   l2394 198C  
                                 l2634 194E                                   l2626 18FE  
                                 l2618 18D4                                   l2490 21DA  
                                 l2482 21B6                                   l2474 2182  
                                 l2466 2156                                   l2570 1622  
                                 l2562 15F4                                   l2554 15BA  
                                 l2546 157C                                   l2538 1542  
                                 l2650 2604                                   l2642 25F0  
                                 l2388 2062                                   l2396 19AA  
                                 l2628 190C                                   l2492 21E2  
                                 l2484 21BE                                   l2476 218A  
                                 l2468 215A                                   l2636 244A  
                                 l2572 1634                                   l2564 15FC  
                                 l2556 15BE                                   l2548 1584  
                                 l2580 22B0                                   l2652 2608  
                                 l2644 25F8                                   l2398 19BA  
                                 l2486 21C4                                   l2478 2192  
                                 l2638 2486                                   l2574 1646  
                                 l2566 1600                                   l2558 15C6  
                                 l2590 232C                                   l2582 22C4  
                                 l2654 260C                                   l2646 25FC  
                                 l2496 23E0                                   l2592 17F0  
                                 l2488 21CA                                   l2576 1658  
                                 l2568 1608                                   l2584 22D6  
                                 l2648 2600                                   l2498 23F4  
                                 l2594 183A                                   l2586 22FC  
                                 l2578 229C                                   l2596 184A  
                                 l2588 2314                                   l2598 185A  
                                 u3000 18D4                                   u3001 18D0  
                                 u3010 18F2                                   u3011 18EE  
                                 u3020 190C                                   u3021 1908  
                                 _LATA 000F89                                   u3030 1922  
                                 _LATB 000F8A                                   u3031 191E  
                                 _LATC 000F8B                                   u3040 1938  
                                 _LATD 000F8C                                   u3041 1934  
                                 _LATE 000F8D                                   u3050 194E  
                                 _LATF 000F8E                                   u3051 194A  
                                 _LATG 000F8F                                   u2500 1B14  
                                 u2501 1B10                                   u2510 1B22  
                                 u2511 1B1E                                   u2520 1E5A  
                                 u2600 19E4                                   u2521 1E56  
                                 u2601 19E0                                   u2530 1EAC  
                                 u2531 1EA8                                   u3067 2534  
                                 u2540 1F74                                   u2620 2088  
                                 u2700 2182                                   u2541 1F70  
                                 u2621 2084                                   u2701 217E  
                                 u2470 1AA8                                   u2550 1FC6  
                                 u2630 20A2                                   u2710 21A0  
                                 u2614 250E                                   u2471 1AA4  
                                 u2551 1FC2                                   u2631 209E  
                                 u2711 219C                                   u2615 250A  
                                 u2480 1AF8                                   u2560 196A  
                                 u2640 20C8                                   u2720 21B6  
                                 u2800 15E2                                   u2481 1AF4  
                                 u2561 1966                                   u2641 20C4  
                                 u2721 21B2                                   u2801 15DE  
                                 u2490 1B06                                   u2570 19BA  
                                 u2650 20E6                                   u2730 21DA  
                                 u2810 15F4                                   u2491 1B02  
                                 u2571 19B6                                   u2651 20E2  
                                 u2731 21D6                                   u2811 15F0  
                                 u2580 19C8                                   u2660 2102  
                                 u2820 1622                                   u2740 151C  
                                 u2581 19C4                                   u2661 20FE  
                                 u2821 161E                                   u2741 1518  
                                 u2590 19D6                                   u2670 2128  
                                 u2830 1634                                   u2750 152E  
                                 u2591 19D2                                   u2671 2124  
                                 u2831 1630                                   u2751 152A  
                                 u2680 214E                                   u2840 1646  
                                 u2760 155E                                   u2905 1812  
                                 u2681 214A                                   u2841 1642  
                                 u2761 155A                                   u2690 2168  
                                 u2850 1658                                   u2770 1570  
                                 u2915 181E                                   u2907 1816  
                                 u2691 2164                                   u2851 1654  
                                 u2771 156C                                   u2940 184A  
                                 u2780 15A0                                   u2860 22B0  
                                 u2941 1846                                   u2925 182A  
                                 u2917 1822                                   u2781 159C  
                                 u2861 22AC                                   u2950 185A  
                                 u2790 15B2                                   u2870 22D6  
                                 u2951 1856                                   u2935 1836  
                                 u2927 182E                                   u2791 15AE  
                                 u2871 22D2                                   u2960 187A  
                                 u2961 1876                                   u2937 183A  
                                 u2970 188C                                   u2971 1888  
                                 u2980 189E                                   u2981 189A  
                                 u2885 17FA                                   u2990 18C0  
                                 u2991 18BC                                   u2895 1806  
                                 u2887 17FE                                   u2897 180A  
                   _active_piece_first 0082                           _submit_piece 1BD0  
                                 _Init 23E0                                   _main 25F0  
                                 fsr2h 000FDA                                   indf2 000FDF  
                                 fsr1l 000FE1                                   fsr2l 000FD9  
                                 btemp 0057               __end_of_parse_and_assign 2580  
                 __end_ofi2_show_piece 17F0                   displayDigit@position 0062  
                                 start 000E                      i2show_piece@ports 0007  
                         ___param_bank 000000                           _total_pieces 0086  
                   displayNumber@units 006C                         ??_displayDigit 0063  
                                ?_Init 0001                                  ?_main 0001  
                       _rotate_counter 0035                        __end_of___awdiv 213A  
                      __end_of___awmod 21EC                        ___awdiv@divisor 0062  
                                i2l210 1322                                  i2l214 1D0A  
                                i2l162 13AA                                  i2l171 14C4  
                                i2l182 10E4                                  i2l270 1E42  
                                i2l280 23DE                                  i2l273 25BC  
                                i2l283 16D8                                  i2l284 171A  
                                i2l277 23AE                                  i2l285 175C  
                                i2l286 179E                                  i2l288 17EE  
                                i2l549 229A                        ___awdiv@counter 0064  
                                _TMR0H 000FD7                                  _TMR0L 000FD6  
                                _PORTA 000F80                                  _PORTB 000F81  
                                _PORTC 000F82                                  _PORTD 000F83  
                                _PORTE 000F84                                  _PORTF 000F85  
                                _PORTG 000F86                                  _PORTH 000F87  
                                _PORTJ 000F88                                  _TRISA 000F92  
                                _TRISB 000F93                                  _TRISC 000F94  
                                _TRISD 000F95                                  _TRISE 000F96  
                                _TRISF 000F97                                  _TRISG 000F98  
                                _TRISH 000F99                                  _TRISJ 000F9A  
                  _active_piece_record 002D                                  _prevB 0051  
                      __end_of_move_up 1A92                                  tablat 000FF5  
                                ttemp5 0058                                  ttemp6 005B  
                                ttemp7 005F                                  status 000FD8  
                                wtemp8 0058                     __size_ofi2___awmod 00B0  
                __end_ofi2_spawn_piece 23E0                            i2_move_down 1D0C  
                      __initialization 24AC                           __end_of_Init 244A  
                     _check_buttons_rg 17F0                           __end_of_main 2620  
                  displayNumber@number 0068                      ??_HandleInterrupt 002B  
                               ??_Init 0060                                 ??_main 0082  
                        __activetblptr 000001                        ??_displayNumber 006A  
                   i2_parse_and_assign 2580                       ___awdiv@dividend 0060  
                               i2l2020 107C                                 i2l2012 100C  
                               i2l2030 10C0                                 i2l2022 108C  
                               i2l2014 1022                                 i2l2040 1116  
                               i2l2032 10CA                                 i2l2024 1096  
                               i2l2016 1042                                 i2l2200 16EC  
                               i2l2050 1166                                 i2l2042 1126  
                               i2l2034 10DA                                 i2l2026 10A6  
                               i2l2018 105E                                 i2l2210 172E  
                               i2l2202 16FE                                 i2l2060 11C0  
                               i2l2052 1176                                 i2l2044 1136  
                               i2l2028 10B0                                 i2l2036 10E8  
                               i2l2220 1770                                 i2l2212 1740  
                               i2l2204 1706                                 i2l2300 1488  
                               i2l2070 1204                                 i2l2062 11D0  
                               i2l2046 1146                                 i2l2038 1106  
                               i2l2054 1186                                 i2l2230 17B0  
                               i2l2222 1782                                 i2l2214 1748  
                               i2l2206 170A                                 i2l2310 14BC  
                               i2l2302 149A                                 i2l2080 124A  
                               i2l2064 11DA                                 i2l2056 11A6  
                               i2l2072 120E                                 i2l2048 1156  
                               i2l2160 1D0C                                 i2l2232 17C2  
                               i2l2224 178A                                 i2l2216 174C  
                               i2l2208 1712                                 i2l2304 149E  
                               i2l2240 133C                                 i2l2082 124E  
                               i2l2074 121E                                 i2l2066 11EA  
                               i2l2058 11B6                                 i2l2090 128A  
                               i2l2170 1D7A                                 i2l2162 1D22  
                               i2l2234 17D4                                 i2l2226 178E  
                               i2l2218 1754                                 i2l2306 14A6  
                               i2l2250 136C                                 i2l2242 134A  
                               i2l2092 128E                                 i2l2084 125E  
                               i2l2076 122E                                 i2l2068 11F4  
                               i2l2172 1D88                                 i2l2164 1D42  
                               i2l2236 17E6                                 i2l2228 1796  
                               i2l2180 167E                                 i2l2308 14B8  
                               i2l2252 1388                                 i2l2260 139A  
                               i2l2244 134E                                 i2l2094 1312  
                               i2l2086 126E                                 i2l2078 123E  
                               i2l2174 1D96                                 i2l2166 1D5E  
                               i2l2190 16AA                                 i2l2182 1684  
                               i2l2270 13C2                                 i2l2262 13A8  
                               i2l2254 1394                                 i2l2246 1350  
                               i2l2238 132E                                 i2l2088 127E  
                               i2l2176 1E32                                 i2l2168 1D6C  
                               i2l2192 16BC                                 i2l2184 168A  
                               i2l2280 140C                                 i2l2272 13C6  
                               i2l2264 13B8                                 i2l2256 1396  
                               i2l2248 135E                                 i2l2194 16C4  
                               i2l2186 1690                                 i2l2178 1662  
                               i2l2290 145E                                 i2l2282 142C  
                               i2l2274 13D8                                 i2l2266 13BC  
                               i2l2258 1398                                 i2l2196 16C8  
                               i2l2188 1696                                 i2l2292 1462  
                               i2l2284 1440                                 i2l2276 13E0  
                               i2l2268 13BE                                 i2l1822 2580  
                               i2l1830 233E                                 i2l1910 1C1C  
                               i2l1902 1BD0                                 i2l2198 16D0  
                               i2l2294 146A                                 i2l2286 1444  
                               i2l2278 1404                                 i2l1824 258C  
                               i2l1840 23B6                                 i2l1832 2352  
                               i2l1920 1C60                                 i2l1912 1C38  
                               i2l2296 147C                                 i2l2288 144C  
                               i2l1826 259C                                 i2l1850 2206  
                               i2l1842 23CE                                 i2l1834 2366  
                               i2l1930 1CA6                                 i2l1922 1C80  
                               i2l1914 1C42                                 i2l1906 1BE6  
                               i2l2298 1480                                 i2l1828 25AC  
                               i2l1860 223A                                 i2l1852 220A  
                               i2l1844 21EC                                 i2l1836 2378  
                               i2l1940 1CDA                                 i2l1932 1CB8  
                               i2l1924 1C88                                 i2l1916 1C4C  
                               i2l1908 1BFC                                 i2l1870 2274  
                               i2l1862 2242                                 i2l1854 2218  
                               i2l1846 21F0                                 i2l1838 239E  
                               i2l1950 1D06                                 i2l1942 1CE2  
                               i2l1934 1CBC                                 i2l1926 1C9A  
                               i2l1918 1C56                                 i2l1864 2250  
                               i2l1872 227A                                 i2l1856 2220  
                               i2l1848 21FE                                 i2l1944 1CF4  
                               i2l1936 1CC4                                 i2l1928 1C9E  
                               i2l1874 228A                                 i2l1866 2266  
                               i2l1858 2232                                 i2l1946 1CF8  
                               i2l1938 1CD6                                 i2l1876 2292  
                               i2l1868 226E                                 i2l1948 1D00  
                     i2move_down@ports 001B                    ?i2_parse_and_assign 0001  
                           _Temp_Press 008A                              ??___awdiv 0064  
                            ??___awmod 0064                                 clear_0 24D2  
                               clear_1 24DE                       ___awdiv@quotient 0066  
                      ___awmod@divisor 0062                        ___awmod@counter 0064  
                 ??i2_parse_and_assign 0007                           __pdataCOMRAM 0052  
                    __end_ofi2___awmod 229C                           __mediumconst 0000  
                               tblptrh 000FF7                                 tblptrl 000FF6  
                               tblptru 000FF8                              ??_move_up 0066  
                       i2___awmod@sign 0006                  __size_ofi2_show_piece 018E  
                 __end_of_displayDigit 2540                             __accesstop 0060  
              __end_of__initialization 24E4                      displayDigit@digit 0060  
                        ___rparam_used 000001                           ?_spawn_piece 0001  
                       __pcstackCOMRAM 0001                           _active_piece 0031  
                         i2_show_piece 1662                             _can_submit 0052  
                           __pbssBANK0 0082                             __pnvCOMRAM 0056  
                    ?_parse_and_assign 0060                     ??_parse_and_assign 0066  
                       move_left@temp1 007C                         move_left@temp2 007B  
                           _blink_flag 0043                         move_left@ports 007D  
                       move_down@ports 007A                     __size_of_move_left 0116  
                   __size_of_move_down 013E               __end_of_check_buttons_rg 1954  
                      show_piece@ports 0066                        _HandleInterrupt 0008  
                              __Hparam 0000                                __Lparam 0000  
                         ?i2_move_down 0001                                ___awdiv 2074  
                              ___awmod 213A                           __psmallconst 1000  
                              __pcinit 24AC                                __ramtop 1000  
                              __ptext0 25F0                                __ptext1 229C  
                              __ptext2 14D0                                __ptext3 244A  
                              __ptext4 24F6                                __ptext5 213A  
                              __ptext6 2074                                __ptext7 17F0  
                              __ptext8 1954                                __ptext9 1E44  
                            _T0CONbits 000FD5                       ___awmod@dividend 0060  
                              _move_up 1954                  __size_of_displayDigit 004A  
                            _LATC_flag 003F                              _LATD_flag 003D  
                            _LATE_flag 003B                              _LATF_flag 0039  
                       __pintcode_body 1324                   end_of_initialization 24E4  
                    submit_piece@ports 0007                      __end_of_move_left 2074  
                    __end_of_move_down 1BD0                                int_func 1324  
                           _move_right 1E44                                postdec1 000FE5  
                 __size_of_spawn_piece 00A2                                postinc0 000FEE  
                         _displayDigit 24F6                             _prev_piece 0054  
                            _PORTBbits 000F81                              _PORTGbits 000F86  
                           _show_piece 14D0                    _two_seconds_counter 0041  
    check_buttons_rg@currentButtonRead 0081                 __size_ofi2_spawn_piece 00A2  
                __end_of_displayNumber 24AC                              i2___awmod 21EC  
              __end_of_HandleInterrupt 14D0                      displayNumber@tens 006A  
                        __pidataCOMRAM 2620                          ?_rotate_piece 0001  
          __size_ofi2_parse_and_assign 003E                    start_initialization 24AC  
 __end_of_InitializeTimerAndInterrupts 25F0  __size_of_InitializeTimerAndInterrupts 0032  
         _InitializeTimerAndInterrupts 25BE                   __end_of_segmentCodes 100B  
                         _Button_Press 008B                             ?i2___awmod 0001  
                        ?_submit_piece 0001                            ?_move_right 0001  
                        i2_spawn_piece 233E                   __size_ofi2_move_down 0138  
                       ??_rotate_piece 0007              __size_of_parse_and_assign 0040  
                          ?_show_piece 0001                            __pbssCOMRAM 002D  
                        __pcstackBANK0 0060                      ?_check_buttons_rg 0001  
                     ?_HandleInterrupt 0001          ?_InitializeTimerAndInterrupts 0001  
                       ??_submit_piece 0007                     ??_check_buttons_rg 0081  
                       ?i2_spawn_piece 0001                              __pintcode 0008  
                             ?___awdiv 0060                               ?___awmod 0060  
                parse_and_assign@value 0060                  parse_and_assign@ports 0064  
                          __smallconst 1000                              _is_active 0037  
                             ?_move_up 0001                    __size_of_move_right 011A  
                          ??i2___awmod 0005                               _LATC_old 004C  
                             _LATD_old 004B                               _LATE_old 004A  
                             _LATF_old 0049                  check_buttons_rg@state 0089  
                  __size_of_show_piece 0192                               i2u220_40 1D88  
                             i2u220_41 1D84                               i2u221_40 1D96  
                             i2u221_41 1D92                               i2u230_40 17B0  
                             i2u222_40 16AA                               i2u230_41 17AC  
                             i2u222_41 16A6                               i2u151_40 2352  
                             i2u231_40 17C2                               i2u223_40 16BC  
                             i2u151_41 234E                               i2u231_41 17BE  
                             i2u223_41 16B8                               i2u152_40 2378  
                             i2u160_40 1BFC                               i2u232_40 17D4  
                             i2u224_40 16EC                               i2u240_40 13B8  
                             i2u152_41 2374                               i2u160_41 1BF8  
                             i2u232_41 17D0                               i2u224_41 16E8  
                             i2u240_41 13B4                               i2u153_40 21FE  
                             i2u161_40 1C9A                               i2u217_40 1D22  
                             i2u233_40 17E6                               i2u225_40 16FE  
                             i2u241_40 13D8                               i2u153_41 21FA  
                             i2u161_41 1C96                               i2u217_41 1D1E  
                             i2u233_41 17E2                               i2u225_41 16FA  
                             i2u241_41 13D4                               i2u154_40 2218  
                             i2u162_40 1CB8                               i2u218_40 1D6C  
                             i2u226_40 172E                               i2u242_40 1440  
                             i2u234_40 133C                               i2u154_41 2214  
                             i2u162_41 1CB4                               i2u218_41 1D68  
                             i2u226_41 172A                               i2u242_41 143C  
                             i2u234_41 1338                               i2u155_40 2232  
                             i2u163_40 1CD6                               i2u219_40 1D7A  
                             i2u227_40 1740                               i2u243_40 145E  
                             i2u235_40 134A                               i2u155_41 222E  
                             i2u163_41 1CD2                               i2u219_41 1D76  
                             i2u227_41 173C                               i2u243_41 145A  
                             i2u235_41 1346                               i2u180_40 10A6  
                             i2u156_40 2250                               i2u164_40 1CF4  
                             i2u228_40 1770                               i2u244_40 147C  
                             i2u236_40 135E                               i2u180_41 10A2  
                             i2u156_41 224C                               i2u164_41 1CF0  
                             i2u228_41 176C                               i2u244_41 1478  
                             i2u236_41 135A                              _move_left 1F5E  
                            _move_down 1A92                               i2u181_40 10C0  
                             i2u157_40 2266                               i2u229_40 1782  
                             i2u245_40 149A                               i2u237_40 136C  
                             i2u181_41 10BC                               i2u157_41 2262  
                             i2u229_41 177E                               i2u245_41 1496  
                             i2u237_41 1368                               i2u190_40 11D0  
                             i2u182_40 10DA                               i2u158_40 228A  
                             i2u246_40 14B8                               i2u238_40 1388  
                             i2u190_41 11CC                               i2u182_41 10D6  
                             i2u158_41 2286                               i2u246_41 14B4  
                             i2u238_41 1384                               i2u191_40 11EA  
                             i2u183_40 1106                               i2u159_40 1BE2  
                             i2u239_40 13A8                               i2u191_41 11E6  
                             i2u183_41 1102                               i2u159_41 1BDE  
                             i2u239_41 13A4                               i2u192_40 1204  
                             i2u184_40 1116                               i2u192_41 1200  
                             i2u184_41 1112                               i2u193_40 121E  
                             i2u185_40 1136                               i2u177_40 1022  
                             i2u193_41 121A                               i2u185_41 1132  
                             i2u177_41 101E                               i2u194_40 123E  
                             i2u186_40 1156                               i2u178_40 107C  
                             i2u194_41 123A                               i2u186_41 1152  
                             i2u178_41 1078                               i2u195_40 125E  
                             i2u187_40 1176                               i2u179_40 108C  
                             i2u195_41 125A                               i2u187_41 1172  
                             i2u179_41 1088                               i2u196_40 127E  
                             i2u188_40 11A6                               i2u196_41 127A  
                             i2u188_41 11A2                               i2u189_40 11B6  
                             i2u189_41 11B2                               _RCONbits 000FD0  
                          _lastRBState 0056                            _INTCON3bits 000FF0  
                            copy_data0 24C0                     i2___awmod@dividend 0001  
                 __end_of_rotate_piece 1324                        ??i2_spawn_piece 0001  
       ??_InitializeTimerAndInterrupts 0060                          ??_spawn_piece 0060  
                             __Hrparam 0000                             ?_move_left 0001  
                           ?_move_down 0001                               __Lrparam 0000  
                         __Lsmallconst 1000                           _segmentCodes 1001  
                     __size_of___awdiv 00C6                       __size_of___awmod 00B2  
                 __end_of_submit_piece 1D0C                       _parse_and_assign 2540  
                        ?i2_show_piece 0001                            _buttonCount 0047  
                          _buttonState 0048                        move_right@temp0 007C  
                      move_right@temp1 007B                        move_right@temp2 007A  
                      move_right@ports 007D            check_buttons_rg@buttonCount 0088  
                             __ptext10 1F5E                               __ptext11 1A92  
                             __ptext20 21EC                               __ptext12 2540  
                             __ptext21 100C                               __ptext13 25BE  
                             __ptext22 2580                               __ptext14 23E0  
                             __ptext16 1662                               __ptext17 1D0C  
                             __ptext18 1BD0                               __ptext19 233E  
                     __size_of_move_up 013E                          __size_of_Init 006A  
                         move_up@ports 007A                          __size_of_main 0030  
                         ??_move_right 0066                         _port_c_decimal 0045  
                             int$flags 0057                       rotate_piece@temp 001F  
                     rotate_piece@port 0027                 __size_of_displayNumber 0062  
              i2parse_and_assign@value 0001             __end_ofi2_parse_and_assign 25BE  
              i2parse_and_assign@ports 0005                    __end_of_spawn_piece 233E  
                           _LATC_value 0050                             _LATD_value 004F  
                           _LATE_value 004E                         ??i2_show_piece 0007  
                           _LATF_value 004D                           ??_show_piece 0066  
                    i2___awmod@divisor 0003                      i2___awmod@counter 0005  
                           _INTCONbits 000FF2                     __end_of_move_right 1F5E  
                             intlevel2 0000                          ??i2_move_down 0007  
                   __end_of_show_piece 1662                            ??_move_left 0066  
                          ??_move_down 0066              __size_of_check_buttons_rg 0164  
                __size_of_rotate_piece 0318                          _displayNumber 244A  
             __size_of_HandleInterrupt 14C8                            _spawn_piece 229C  
                __size_of_submit_piece 013C  
