

Microchip MPLAB XC8 Assembler V2.30 build 20200825195618 
                                                                                               Mon Apr 22 13:29:57 2024

Microchip MPLAB XC8 C Compiler v2.30 (Free license) build 20200825195618 Og1 
     1                           	processor	18F8722
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     6                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    13                           	psect	text0,global,reloc=2,class=CODE,delta=1
    14                           	psect	text1,global,reloc=2,class=CODE,delta=1
    15                           	psect	text2,global,reloc=2,class=CODE,delta=1
    16                           	psect	text3,global,reloc=2,class=CODE,delta=1
    17                           	psect	text4,global,reloc=2,class=CODE,delta=1
    18                           	psect	text5,global,reloc=2,class=CODE,delta=1
    19                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=1
    20                           	psect	text7,global,reloc=2,class=CODE,delta=1
    21                           	psect	text8,global,reloc=2,class=CODE,delta=1
    22                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    23                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    27                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    28                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    29                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    30  0000                     
    31                           ; Version 2.20
    32                           ; Generated 12/02/2020 GMT
    33                           ; 
    34                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    35                           ; All rights reserved.
    36                           ; 
    37                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    38                           ; 
    39                           ; Redistribution and use in source and binary forms, with or without modification, are
    40                           ; permitted provided that the following conditions are met:
    41                           ; 
    42                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    43                           ;        conditions and the following disclaimer.
    44                           ; 
    45                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    46                           ;        of conditions and the following disclaimer in the documentation and/or other
    47                           ;        materials provided with the distribution.
    48                           ; 
    49                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    50                           ;        software without specific prior written permission.
    51                           ; 
    52                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    53                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    54                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    55                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    56                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    57                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    58                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    59                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    60                           ; 
    61                           ; 
    62                           ; Code-generator required, PIC18F8722 Definitions
    63                           ; 
    64                           ; SFR Addresses
    65  0000                     
    66                           	psect	idataBANK0
    67  0009CE                     __pidataBANK0:
    68                           	callstack 0
    69                           
    70                           ;initializer for _prev_piece
    71  0009CE  0002               	dw	2
    72                           
    73                           	psect	nvCOMRAM
    74  000052                     __pnvCOMRAM:
    75                           	callstack 0
    76  000052                     _lastRBState:
    77                           	callstack 0
    78  000052                     	ds	1
    79  0000                     _PORTGbits	set	3974
    80  0000                     _TMR0H	set	4055
    81  0000                     _TMR0L	set	4054
    82  0000                     _T0CONbits	set	4053
    83  0000                     _RCONbits	set	4048
    84  0000                     _INTCONbits	set	4082
    85  0000                     _PORTG	set	3974
    86  0000                     _LATG	set	3983
    87  0000                     _TRISG	set	3992
    88  0000                     _PORTF	set	3973
    89  0000                     _LATF	set	3982
    90  0000                     _TRISF	set	3991
    91  0000                     _PORTE	set	3972
    92  0000                     _LATE	set	3981
    93  0000                     _TRISE	set	3990
    94  0000                     _PORTD	set	3971
    95  0000                     _LATD	set	3980
    96  0000                     _TRISD	set	3989
    97  0000                     _PORTC	set	3970
    98  0000                     _LATC	set	3979
    99  0000                     _TRISC	set	3988
   100  0000                     _LATB	set	3978
   101  0000                     _PORTB	set	3969
   102  0000                     _TRISB	set	3987
   103  0000                     _PORTA	set	3968
   104  0000                     _LATA	set	3977
   105  0000                     _TRISA	set	3986
   106                           
   107                           ; #config settings
   108                           
   109                           	psect	cinit
   110  000912                     __pcinit:
   111                           	callstack 0
   112  000912                     start_initialization:
   113                           	callstack 0
   114  000912                     __initialization:
   115                           	callstack 0
   116                           
   117                           ; Initialize objects allocated to BANK0 (2 bytes)
   118                           ; load TBLPTR registers with __pidataBANK0
   119  000912  0ECE               	movlw	low __pidataBANK0
   120  000914  6EF6               	movwf	tblptrl,c
   121  000916  0E09               	movlw	high __pidataBANK0
   122  000918  6EF7               	movwf	tblptrh,c
   123  00091A  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   124  00091C  6EF8               	movwf	tblptru,c
   125  00091E  0009               	tblrd		*+	;fetch initializer
   126  000920  CFF5 F077          	movff	tablat,__pdataBANK0
   127  000924  0009               	tblrd		*+	;fetch initializer
   128  000926  CFF5 F078          	movff	tablat,__pdataBANK0+1
   129                           
   130                           ; Clear objects allocated to BANK0 (10 bytes)
   131  00092A  EE00  F06D         	lfsr	0,__pbssBANK0
   132  00092E  0E0A               	movlw	10
   133  000930                     clear_0:
   134  000930  6AEE               	clrf	postinc0,c
   135  000932  06E8               	decf	wreg,f,c
   136  000934  E1FD               	bnz	clear_0
   137                           
   138                           ; Clear objects allocated to COMRAM (35 bytes)
   139  000936  EE00  F02F         	lfsr	0,__pbssCOMRAM
   140  00093A  0E23               	movlw	35
   141  00093C                     clear_1:
   142  00093C  6AEE               	clrf	postinc0,c
   143  00093E  06E8               	decf	wreg,f,c
   144  000940  E1FD               	bnz	clear_1
   145  000942                     end_of_initialization:
   146                           	callstack 0
   147  000942                     __end_of__initialization:
   148                           	callstack 0
   149  000942  9053               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   150  000944  9253               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   151  000946  0100               	movlb	0
   152  000948  EF6A  F004         	goto	_main	;jump to C main() function
   153                           
   154                           	psect	bssCOMRAM
   155  00002F                     __pbssCOMRAM:
   156                           	callstack 0
   157  00002F                     _active_piece_record:
   158                           	callstack 0
   159  00002F                     	ds	4
   160  000033                     _is_at_bottom:
   161                           	callstack 0
   162  000033                     	ds	2
   163  000035                     _LATF_flag:
   164                           	callstack 0
   165  000035                     	ds	2
   166  000037                     _LATE_flag:
   167                           	callstack 0
   168  000037                     	ds	2
   169  000039                     _LATD_flag:
   170                           	callstack 0
   171  000039                     	ds	2
   172  00003B                     _LATC_flag:
   173                           	callstack 0
   174  00003B                     	ds	2
   175  00003D                     _two_seconds_counter:
   176                           	callstack 0
   177  00003D                     	ds	2
   178  00003F                     _blink_flag:
   179                           	callstack 0
   180  00003F                     	ds	2
   181  000041                     _port_c_decimal:
   182                           	callstack 0
   183  000041                     	ds	2
   184  000043                     _buttonCount:
   185                           	callstack 0
   186  000043                     	ds	1
   187  000044                     _buttonState:
   188                           	callstack 0
   189  000044                     	ds	1
   190  000045                     _LATF_old:
   191                           	callstack 0
   192  000045                     	ds	1
   193  000046                     _LATE_old:
   194                           	callstack 0
   195  000046                     	ds	1
   196  000047                     _LATD_old:
   197                           	callstack 0
   198  000047                     	ds	1
   199  000048                     _LATC_old:
   200                           	callstack 0
   201  000048                     	ds	1
   202  000049                     _LATF_value:
   203                           	callstack 0
   204  000049                     	ds	1
   205  00004A                     _LATE_value:
   206                           	callstack 0
   207  00004A                     	ds	1
   208  00004B                     _LATD_value:
   209                           	callstack 0
   210  00004B                     	ds	1
   211  00004C                     _LATC_value:
   212                           	callstack 0
   213  00004C                     	ds	1
   214  00004D                     _prevB:
   215                           	callstack 0
   216  00004D                     	ds	1
   217  00004E                     _active_piece:
   218                           	callstack 0
   219  00004E                     	ds	4
   220                           
   221                           	psect	bssBANK0
   222  00006D                     __pbssBANK0:
   223                           	callstack 0
   224  00006D                     _is_active:
   225                           	callstack 0
   226  00006D                     	ds	2
   227  00006F                     ProcessButtonPress@buttonCount:
   228                           	callstack 0
   229  00006F                     	ds	1
   230  000070                     ProcessButtonPress@state:
   231                           	callstack 0
   232  000070                     	ds	1
   233  000071                     _Temp_Press:
   234                           	callstack 0
   235  000071                     	ds	1
   236  000072                     _Button_Press:
   237                           	callstack 0
   238  000072                     	ds	1
   239  000073                     parse_and_assign@ports:
   240                           	callstack 0
   241  000073                     	ds	4
   242                           
   243                           	psect	dataBANK0
   244  000077                     __pdataBANK0:
   245                           	callstack 0
   246  000077                     _prev_piece:
   247                           	callstack 0
   248  000077                     	ds	2
   249                           
   250                           	psect	cstackBANK0
   251  000060                     __pcstackBANK0:
   252                           	callstack 0
   253  000060                     ?_parse_and_assign:
   254                           	callstack 0
   255  000060                     ?___awmod:
   256                           	callstack 0
   257  000060                     ___awmod@dividend:
   258                           	callstack 0
   259  000060                     parse_and_assign@value:
   260                           	callstack 0
   261                           
   262                           ; 4 bytes @ 0x0
   263  000060                     	ds	2
   264  000062                     ___awmod@divisor:
   265                           	callstack 0
   266                           
   267                           ; 2 bytes @ 0x2
   268  000062                     	ds	2
   269  000064                     parse_and_assign@byte0:
   270                           	callstack 0
   271  000064                     ___awmod@counter:
   272                           	callstack 0
   273                           
   274                           ; 1 bytes @ 0x4
   275  000064                     	ds	1
   276  000065                     parse_and_assign@byte1:
   277                           	callstack 0
   278  000065                     ___awmod@sign:
   279                           	callstack 0
   280                           
   281                           ; 1 bytes @ 0x5
   282  000065                     	ds	1
   283  000066                     parse_and_assign@byte2:
   284                           	callstack 0
   285                           
   286                           ; 1 bytes @ 0x6
   287  000066                     	ds	1
   288  000067                     parse_and_assign@byte3:
   289                           	callstack 0
   290                           
   291                           ; 1 bytes @ 0x7
   292  000067                     	ds	1
   293  000068                     submit_piece@ports:
   294                           	callstack 0
   295  000068                     show_piece@ports:
   296                           	callstack 0
   297                           
   298                           ; 2 bytes @ 0x8
   299  000068                     	ds	2
   300  00006A                     ProcessButtonPress@currentButtonRead:
   301                           	callstack 0
   302                           
   303                           ; 1 bytes @ 0xA
   304  00006A                     	ds	1
   305  00006B                     ??_main:
   306                           
   307                           ; 1 bytes @ 0xB
   308  00006B                     	ds	2
   309                           
   310                           	psect	cstackCOMRAM
   311  000001                     __pcstackCOMRAM:
   312                           	callstack 0
   313  000001                     ?i2_parse_and_assign:
   314                           	callstack 0
   315  000001                     i2parse_and_assign@value:
   316                           	callstack 0
   317                           
   318                           ; 4 bytes @ 0x0
   319  000001                     	ds	4
   320  000005                     i2parse_and_assign@byte0:
   321                           	callstack 0
   322                           
   323                           ; 1 bytes @ 0x4
   324  000005                     	ds	1
   325  000006                     i2parse_and_assign@byte1:
   326                           	callstack 0
   327                           
   328                           ; 1 bytes @ 0x5
   329  000006                     	ds	1
   330  000007                     i2parse_and_assign@byte2:
   331                           	callstack 0
   332                           
   333                           ; 1 bytes @ 0x6
   334  000007                     	ds	1
   335  000008                     i2parse_and_assign@byte3:
   336                           	callstack 0
   337                           
   338                           ; 1 bytes @ 0x7
   339  000008                     	ds	1
   340  000009                     shift_down_piece@active_piece:
   341                           	callstack 0
   342                           
   343                           ; 2 bytes @ 0x8
   344  000009                     	ds	2
   345  00000B                     ??_shift_down_piece:
   346                           
   347                           ; 1 bytes @ 0xA
   348  00000B                     	ds	28
   349  000027                     shift_down_piece@byte0:
   350                           	callstack 0
   351                           
   352                           ; 1 bytes @ 0x26
   353  000027                     	ds	1
   354  000028                     shift_down_piece@byte1:
   355                           	callstack 0
   356                           
   357                           ; 1 bytes @ 0x27
   358  000028                     	ds	1
   359  000029                     shift_down_piece@byte2:
   360                           	callstack 0
   361                           
   362                           ; 1 bytes @ 0x28
   363  000029                     	ds	1
   364  00002A                     shift_down_piece@byte3:
   365                           	callstack 0
   366                           
   367                           ; 1 bytes @ 0x29
   368  00002A                     	ds	1
   369  00002B                     shift_down_piece@ports:
   370                           	callstack 0
   371                           
   372                           ; 2 bytes @ 0x2A
   373  00002B                     	ds	2
   374  00002D                     ??_HandleInterrupt:
   375                           
   376                           ; 1 bytes @ 0x2C
   377  00002D                     	ds	2
   378                           
   379 ;;
   380 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   381 ;;
   382 ;; *************** function _main *****************
   383 ;; Defined at:
   384 ;;		line 499 in file "main.c"
   385 ;; Parameters:    Size  Location     Type
   386 ;;		None
   387 ;; Auto vars:     Size  Location     Type
   388 ;;		None
   389 ;; Return value:  Size  Location     Type
   390 ;;                  1    wreg      void 
   391 ;; Registers used:
   392 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
   393 ;; Tracked objects:
   394 ;;		On entry : 0/0
   395 ;;		On exit  : 0/0
   396 ;;		Unchanged: 0/0
   397 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   398 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   399 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   400 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   401 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   402 ;;Total ram usage:        2 bytes
   403 ;; Hardware stack levels required when called:    6
   404 ;; This function calls:
   405 ;;		_Init
   406 ;;		_InitializeTimerAndInterrupts
   407 ;;		_ProcessButtonPress
   408 ;;		_show_piece
   409 ;;		_spawn_piece
   410 ;; This function is called by:
   411 ;;		Startup code after reset
   412 ;; This function uses a non-reentrant model
   413 ;;
   414                           
   415                           	psect	text0
   416  0008D4                     __ptext0:
   417                           	callstack 0
   418  0008D4                     _main:
   419                           	callstack 25
   420  0008D4                     
   421                           ;main.c: 501:     Init();
   422  0008D4  EC3D  F004         	call	_Init	;wreg free
   423  0008D8                     
   424                           ;main.c: 504:     _delay((unsigned long)((1000)*((40UL * (1000UL * 1000UL))/4000.0)));
   425  0008D8  0E33               	movlw	51
   426  0008DA  0100               	movlb	0	; () banked
   427  0008DC  6F6C               	movwf	(??_main+1)& (0+255),b
   428  0008DE  0EBB               	movlw	187
   429  0008E0  6F6B               	movwf	??_main& (0+255),b
   430  0008E2  0EDF               	movlw	223
   431  0008E4                     u1307:
   432  0008E4  2EE8               	decfsz	wreg,f,c
   433  0008E6  D7FE               	bra	u1307
   434  0008E8  2F6B               	decfsz	??_main& (0+255),f,b
   435  0008EA  D7FC               	bra	u1307
   436  0008EC  2F6C               	decfsz	(??_main+1)& (0+255),f,b
   437  0008EE  D7FA               	bra	u1307
   438  0008F0  D000               	nop2	
   439  0008F2                     
   440                           ;main.c: 506:     InitializeTimerAndInterrupts();
   441  0008F2  ECBC  F004         	call	_InitializeTimerAndInterrupts	;wreg free
   442  0008F6                     
   443                           ;main.c: 507:     TMR0L = 0x69;
   444  0008F6  0E69               	movlw	105
   445  0008F8  6ED6               	movwf	214,c	;volatile
   446  0008FA                     
   447                           ;main.c: 508:     TMR0H = 0x67;
   448  0008FA  0E67               	movlw	103
   449  0008FC  6ED7               	movwf	215,c	;volatile
   450  0008FE                     
   451                           ;main.c: 510:     spawn_piece();
   452  0008FE  EC00  F004         	call	_spawn_piece	;wreg free
   453  000902                     l1672:
   454                           
   455                           ;main.c: 513:     {;main.c: 514:         ProcessButtonPress();
   456  000902  EC2D  F003         	call	_ProcessButtonPress	;wreg free
   457  000906                     
   458                           ;main.c: 515:         show_piece();
   459  000906  EC09  F000         	call	_show_piece	;wreg free
   460  00090A  EF81  F004         	goto	l1672
   461  00090E  EF07  F000         	goto	start
   462  000912                     __end_of_main:
   463                           	callstack 0
   464                           
   465 ;; *************** function _show_piece *****************
   466 ;; Defined at:
   467 ;;		line 451 in file "main.c"
   468 ;; Parameters:    Size  Location     Type
   469 ;;		None
   470 ;; Auto vars:     Size  Location     Type
   471 ;;  ports           2    8[BANK0 ] PTR unsigned char 
   472 ;;		 -> parse_and_assign@ports(4), 
   473 ;; Return value:  Size  Location     Type
   474 ;;                  1    wreg      void 
   475 ;; Registers used:
   476 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
   477 ;; Tracked objects:
   478 ;;		On entry : 0/0
   479 ;;		On exit  : 0/0
   480 ;;		Unchanged: 0/0
   481 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   482 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   483 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   484 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   485 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   486 ;;Total ram usage:        2 bytes
   487 ;; Hardware stack levels used:    1
   488 ;; Hardware stack levels required when called:    4
   489 ;; This function calls:
   490 ;;		_parse_and_assign
   491 ;; This function is called by:
   492 ;;		_main
   493 ;; This function uses a non-reentrant model
   494 ;;
   495                           
   496                           	psect	text1
   497  000012                     __ptext1:
   498                           	callstack 0
   499  000012                     _show_piece:
   500                           	callstack 26
   501  000012                     
   502                           ;main.c: 453:     uint8_t *ports = parse_and_assign(active_piece);
   503  000012  C04E  F060         	movff	_active_piece,parse_and_assign@value
   504  000016  C04F  F061         	movff	_active_piece+1,parse_and_assign@value+1
   505  00001A  C050  F062         	movff	_active_piece+2,parse_and_assign@value+2
   506  00001E  C051  F063         	movff	_active_piece+3,parse_and_assign@value+3
   507  000022  ECA6  F004         	call	_parse_and_assign	;wreg free
   508  000026  C060  F068         	movff	?_parse_and_assign,show_piece@ports
   509  00002A  C061  F069         	movff	?_parse_and_assign+1,show_piece@ports+1
   510  00002E                     
   511                           ;main.c: 454:     LATC = ports[0] | LATC_value;
   512  00002E  C068  FFD9         	movff	show_piece@ports,fsr2l
   513  000032  C069  FFDA         	movff	show_piece@ports+1,fsr2h
   514  000036  50DF               	movf	indf2,w,c
   515  000038  104C               	iorwf	_LATC_value^0,w,c
   516  00003A  6E8B               	movwf	139,c	;volatile
   517  00003C                     
   518                           ;main.c: 455:     LATD = ports[1] | LATD_value;
   519  00003C  0100               	movlb	0	; () banked
   520  00003E  EE20 F001          	lfsr	2,1
   521  000042  5168               	movf	show_piece@ports& (0+255),w,b
   522  000044  26D9               	addwf	fsr2l,f,c
   523  000046  5169               	movf	(show_piece@ports+1)& (0+255),w,b
   524  000048  22DA               	addwfc	fsr2h,f,c
   525  00004A  50DF               	movf	indf2,w,c
   526  00004C  104B               	iorwf	_LATD_value^0,w,c
   527  00004E  6E8C               	movwf	140,c	;volatile
   528  000050                     
   529                           ; BSR set to: 0
   530                           ;main.c: 456:     LATE = ports[2] | LATE_value;
   531  000050  EE20 F002          	lfsr	2,2
   532  000054  5168               	movf	show_piece@ports& (0+255),w,b
   533  000056  26D9               	addwf	fsr2l,f,c
   534  000058  5169               	movf	(show_piece@ports+1)& (0+255),w,b
   535  00005A  22DA               	addwfc	fsr2h,f,c
   536  00005C  50DF               	movf	indf2,w,c
   537  00005E  104A               	iorwf	_LATE_value^0,w,c
   538  000060  6E8D               	movwf	141,c	;volatile
   539  000062                     
   540                           ; BSR set to: 0
   541                           ;main.c: 457:     LATF = ports[3] | LATF_value;
   542  000062  EE20 F003          	lfsr	2,3
   543  000066  5168               	movf	show_piece@ports& (0+255),w,b
   544  000068  26D9               	addwf	fsr2l,f,c
   545  00006A  5169               	movf	(show_piece@ports+1)& (0+255),w,b
   546  00006C  22DA               	addwfc	fsr2h,f,c
   547  00006E  50DF               	movf	indf2,w,c
   548  000070  1049               	iorwf	_LATF_value^0,w,c
   549  000072  6E8E               	movwf	142,c	;volatile
   550  000074                     
   551                           ; BSR set to: 0
   552                           ;main.c: 460:     if ((ports[0] & LATC_value) && LATC_flag == 0)
   553  000074  C068  FFD9         	movff	show_piece@ports,fsr2l
   554  000078  C069  FFDA         	movff	show_piece@ports+1,fsr2h
   555  00007C  50DF               	movf	indf2,w,c
   556  00007E  144C               	andwf	_LATC_value^0,w,c
   557  000080  0900               	iorlw	0
   558  000082  B4D8               	btfsc	status,2,c
   559  000084  EF46  F000         	goto	u1181
   560  000088  EF48  F000         	goto	u1180
   561  00008C                     u1181:
   562  00008C  EF5F  F000         	goto	l1620
   563  000090                     u1180:
   564  000090                     
   565                           ; BSR set to: 0
   566  000090  503B               	movf	_LATC_flag^0,w,c
   567  000092  103C               	iorwf	(_LATC_flag+1)^0,w,c
   568  000094  A4D8               	btfss	status,2,c
   569  000096  EF4F  F000         	goto	u1191
   570  00009A  EF51  F000         	goto	u1190
   571  00009E                     u1191:
   572  00009E  EF5F  F000         	goto	l1620
   573  0000A2                     u1190:
   574  0000A2                     
   575                           ; BSR set to: 0
   576                           ;main.c: 461:     {;main.c: 462:         LATC_flag = 1;
   577  0000A2  0E00               	movlw	0
   578  0000A4  6E3C               	movwf	(_LATC_flag+1)^0,c
   579  0000A6  0E01               	movlw	1
   580  0000A8  6E3B               	movwf	_LATC_flag^0,c
   581  0000AA                     
   582                           ; BSR set to: 0
   583                           ;main.c: 463:         LATC_old = LATC_value;
   584  0000AA  C04C  F048         	movff	_LATC_value,_LATC_old
   585  0000AE                     
   586                           ; BSR set to: 0
   587                           ;main.c: 465:         LATC_value = PORTC & ~ports[0];
   588  0000AE  C068  FFD9         	movff	show_piece@ports,fsr2l
   589  0000B2  C069  FFDA         	movff	show_piece@ports+1,fsr2h
   590  0000B6  50DF               	movf	indf2,w,c
   591  0000B8  0AFF               	xorlw	255
   592  0000BA  1482               	andwf	130,w,c	;volatile
   593  0000BC  6E4C               	movwf	_LATC_value^0,c
   594  0000BE                     l1620:
   595                           
   596                           ; BSR set to: 0
   597                           ;main.c: 467:     if ((ports[1] & LATD_value) && LATD_flag == 0)
   598  0000BE  EE20 F001          	lfsr	2,1
   599  0000C2  5168               	movf	show_piece@ports& (0+255),w,b
   600  0000C4  26D9               	addwf	fsr2l,f,c
   601  0000C6  5169               	movf	(show_piece@ports+1)& (0+255),w,b
   602  0000C8  22DA               	addwfc	fsr2h,f,c
   603  0000CA  50DF               	movf	indf2,w,c
   604  0000CC  144B               	andwf	_LATD_value^0,w,c
   605  0000CE  0900               	iorlw	0
   606  0000D0  B4D8               	btfsc	status,2,c
   607  0000D2  EF6D  F000         	goto	u1201
   608  0000D6  EF6F  F000         	goto	u1200
   609  0000DA                     u1201:
   610  0000DA  EF88  F000         	goto	l1630
   611  0000DE                     u1200:
   612  0000DE                     
   613                           ; BSR set to: 0
   614  0000DE  5039               	movf	_LATD_flag^0,w,c
   615  0000E0  103A               	iorwf	(_LATD_flag+1)^0,w,c
   616  0000E2  A4D8               	btfss	status,2,c
   617  0000E4  EF76  F000         	goto	u1211
   618  0000E8  EF78  F000         	goto	u1210
   619  0000EC                     u1211:
   620  0000EC  EF88  F000         	goto	l1630
   621  0000F0                     u1210:
   622  0000F0                     
   623                           ; BSR set to: 0
   624                           ;main.c: 468:     {;main.c: 469:         LATD_flag = 1;
   625  0000F0  0E00               	movlw	0
   626  0000F2  6E3A               	movwf	(_LATD_flag+1)^0,c
   627  0000F4  0E01               	movlw	1
   628  0000F6  6E39               	movwf	_LATD_flag^0,c
   629  0000F8                     
   630                           ; BSR set to: 0
   631                           ;main.c: 470:         LATD_old = LATD_value;
   632  0000F8  C04B  F047         	movff	_LATD_value,_LATD_old
   633  0000FC                     
   634                           ; BSR set to: 0
   635                           ;main.c: 472:         LATD_value = PORTD & ~ports[1];
   636  0000FC  EE20 F001          	lfsr	2,1
   637  000100  5168               	movf	show_piece@ports& (0+255),w,b
   638  000102  26D9               	addwf	fsr2l,f,c
   639  000104  5169               	movf	(show_piece@ports+1)& (0+255),w,b
   640  000106  22DA               	addwfc	fsr2h,f,c
   641  000108  50DF               	movf	indf2,w,c
   642  00010A  0AFF               	xorlw	255
   643  00010C  1483               	andwf	131,w,c	;volatile
   644  00010E  6E4B               	movwf	_LATD_value^0,c
   645  000110                     l1630:
   646                           
   647                           ; BSR set to: 0
   648                           ;main.c: 474:     if ((ports[2] & LATE_value) && LATE_flag == 0)
   649  000110  EE20 F002          	lfsr	2,2
   650  000114  5168               	movf	show_piece@ports& (0+255),w,b
   651  000116  26D9               	addwf	fsr2l,f,c
   652  000118  5169               	movf	(show_piece@ports+1)& (0+255),w,b
   653  00011A  22DA               	addwfc	fsr2h,f,c
   654  00011C  50DF               	movf	indf2,w,c
   655  00011E  144A               	andwf	_LATE_value^0,w,c
   656  000120  0900               	iorlw	0
   657  000122  B4D8               	btfsc	status,2,c
   658  000124  EF96  F000         	goto	u1221
   659  000128  EF98  F000         	goto	u1220
   660  00012C                     u1221:
   661  00012C  EFB1  F000         	goto	l1640
   662  000130                     u1220:
   663  000130                     
   664                           ; BSR set to: 0
   665  000130  5037               	movf	_LATE_flag^0,w,c
   666  000132  1038               	iorwf	(_LATE_flag+1)^0,w,c
   667  000134  A4D8               	btfss	status,2,c
   668  000136  EF9F  F000         	goto	u1231
   669  00013A  EFA1  F000         	goto	u1230
   670  00013E                     u1231:
   671  00013E  EFB1  F000         	goto	l1640
   672  000142                     u1230:
   673  000142                     
   674                           ; BSR set to: 0
   675                           ;main.c: 475:     {;main.c: 476:         LATE_flag = 1;
   676  000142  0E00               	movlw	0
   677  000144  6E38               	movwf	(_LATE_flag+1)^0,c
   678  000146  0E01               	movlw	1
   679  000148  6E37               	movwf	_LATE_flag^0,c
   680  00014A                     
   681                           ; BSR set to: 0
   682                           ;main.c: 477:         LATE_old = LATE_value;
   683  00014A  C04A  F046         	movff	_LATE_value,_LATE_old
   684  00014E                     
   685                           ; BSR set to: 0
   686                           ;main.c: 479:         LATE_value = PORTE & ~ports[2];
   687  00014E  EE20 F002          	lfsr	2,2
   688  000152  5168               	movf	show_piece@ports& (0+255),w,b
   689  000154  26D9               	addwf	fsr2l,f,c
   690  000156  5169               	movf	(show_piece@ports+1)& (0+255),w,b
   691  000158  22DA               	addwfc	fsr2h,f,c
   692  00015A  50DF               	movf	indf2,w,c
   693  00015C  0AFF               	xorlw	255
   694  00015E  1484               	andwf	132,w,c	;volatile
   695  000160  6E4A               	movwf	_LATE_value^0,c
   696  000162                     l1640:
   697                           
   698                           ; BSR set to: 0
   699                           ;main.c: 481:     if ((ports[3] & LATF_value) && LATF_flag == 0)
   700  000162  EE20 F003          	lfsr	2,3
   701  000166  5168               	movf	show_piece@ports& (0+255),w,b
   702  000168  26D9               	addwf	fsr2l,f,c
   703  00016A  5169               	movf	(show_piece@ports+1)& (0+255),w,b
   704  00016C  22DA               	addwfc	fsr2h,f,c
   705  00016E  50DF               	movf	indf2,w,c
   706  000170  1449               	andwf	_LATF_value^0,w,c
   707  000172  0900               	iorlw	0
   708  000174  B4D8               	btfsc	status,2,c
   709  000176  EFBF  F000         	goto	u1241
   710  00017A  EFC1  F000         	goto	u1240
   711  00017E                     u1241:
   712  00017E  EFDA  F000         	goto	l1650
   713  000182                     u1240:
   714  000182                     
   715                           ; BSR set to: 0
   716  000182  5035               	movf	_LATF_flag^0,w,c
   717  000184  1036               	iorwf	(_LATF_flag+1)^0,w,c
   718  000186  A4D8               	btfss	status,2,c
   719  000188  EFC8  F000         	goto	u1251
   720  00018C  EFCA  F000         	goto	u1250
   721  000190                     u1251:
   722  000190  EFDA  F000         	goto	l1650
   723  000194                     u1250:
   724  000194                     
   725                           ; BSR set to: 0
   726                           ;main.c: 482:     {;main.c: 483:         LATF_flag = 1;
   727  000194  0E00               	movlw	0
   728  000196  6E36               	movwf	(_LATF_flag+1)^0,c
   729  000198  0E01               	movlw	1
   730  00019A  6E35               	movwf	_LATF_flag^0,c
   731  00019C                     
   732                           ; BSR set to: 0
   733                           ;main.c: 484:         LATF_old = LATF_value;
   734  00019C  C049  F045         	movff	_LATF_value,_LATF_old
   735  0001A0                     
   736                           ; BSR set to: 0
   737                           ;main.c: 486:         LATF_value = PORTF & ~ports[3];
   738  0001A0  EE20 F003          	lfsr	2,3
   739  0001A4  5168               	movf	show_piece@ports& (0+255),w,b
   740  0001A6  26D9               	addwf	fsr2l,f,c
   741  0001A8  5169               	movf	(show_piece@ports+1)& (0+255),w,b
   742  0001AA  22DA               	addwfc	fsr2h,f,c
   743  0001AC  50DF               	movf	indf2,w,c
   744  0001AE  0AFF               	xorlw	255
   745  0001B0  1485               	andwf	133,w,c	;volatile
   746  0001B2  6E49               	movwf	_LATF_value^0,c
   747  0001B4                     l1650:
   748                           
   749                           ; BSR set to: 0
   750                           ;main.c: 490:     if (ports[0] & 0x80 || ports[1] & 0x80 || ports[2] & 0x80 || ports[3] 
      +                          & 0x80)
   751  0001B4  C068  FFD9         	movff	show_piece@ports,fsr2l
   752  0001B8  C069  FFDA         	movff	show_piece@ports+1,fsr2h
   753  0001BC  BEDF               	btfsc	indf2,7,c
   754  0001BE  EFE3  F000         	goto	u1261
   755  0001C2  EFE5  F000         	goto	u1260
   756  0001C6                     u1261:
   757  0001C6  EF0C  F001         	goto	l1658
   758  0001CA                     u1260:
   759  0001CA                     
   760                           ; BSR set to: 0
   761  0001CA  EE20 F001          	lfsr	2,1
   762  0001CE  5168               	movf	show_piece@ports& (0+255),w,b
   763  0001D0  26D9               	addwf	fsr2l,f,c
   764  0001D2  5169               	movf	(show_piece@ports+1)& (0+255),w,b
   765  0001D4  22DA               	addwfc	fsr2h,f,c
   766  0001D6  BEDF               	btfsc	indf2,7,c
   767  0001D8  EFF0  F000         	goto	u1271
   768  0001DC  EFF2  F000         	goto	u1270
   769  0001E0                     u1271:
   770  0001E0  EF0C  F001         	goto	l1658
   771  0001E4                     u1270:
   772  0001E4                     
   773                           ; BSR set to: 0
   774  0001E4  EE20 F002          	lfsr	2,2
   775  0001E8  5168               	movf	show_piece@ports& (0+255),w,b
   776  0001EA  26D9               	addwf	fsr2l,f,c
   777  0001EC  5169               	movf	(show_piece@ports+1)& (0+255),w,b
   778  0001EE  22DA               	addwfc	fsr2h,f,c
   779  0001F0  BEDF               	btfsc	indf2,7,c
   780  0001F2  EFFD  F000         	goto	u1281
   781  0001F6  EFFF  F000         	goto	u1280
   782  0001FA                     u1281:
   783  0001FA  EF0C  F001         	goto	l1658
   784  0001FE                     u1280:
   785  0001FE                     
   786                           ; BSR set to: 0
   787  0001FE  EE20 F003          	lfsr	2,3
   788  000202  5168               	movf	show_piece@ports& (0+255),w,b
   789  000204  26D9               	addwf	fsr2l,f,c
   790  000206  5169               	movf	(show_piece@ports+1)& (0+255),w,b
   791  000208  22DA               	addwfc	fsr2h,f,c
   792  00020A  AEDF               	btfss	indf2,7,c
   793  00020C  EF0A  F001         	goto	u1291
   794  000210  EF0C  F001         	goto	u1290
   795  000214                     u1291:
   796  000214  EF10  F001         	goto	l188
   797  000218                     u1290:
   798  000218                     l1658:
   799                           
   800                           ; BSR set to: 0
   801                           ;main.c: 491:     {;main.c: 492:         is_at_bottom = 1;
   802  000218  0E00               	movlw	0
   803  00021A  6E34               	movwf	(_is_at_bottom+1)^0,c
   804  00021C  0E01               	movlw	1
   805  00021E  6E33               	movwf	_is_at_bottom^0,c
   806  000220                     l188:
   807                           
   808                           ; BSR set to: 0
   809  000220  0012               	return		;funcret
   810  000222                     __end_of_show_piece:
   811                           	callstack 0
   812                           
   813 ;; *************** function _ProcessButtonPress *****************
   814 ;; Defined at:
   815 ;;		line 341 in file "main.c"
   816 ;; Parameters:    Size  Location     Type
   817 ;;		None
   818 ;; Auto vars:     Size  Location     Type
   819 ;;  currentButto    1   10[BANK0 ] struct .
   820 ;; Return value:  Size  Location     Type
   821 ;;                  1    wreg      void 
   822 ;; Registers used:
   823 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
   824 ;; Tracked objects:
   825 ;;		On entry : 0/0
   826 ;;		On exit  : 0/0
   827 ;;		Unchanged: 0/0
   828 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   829 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   830 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   831 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   832 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   833 ;;Total ram usage:        1 bytes
   834 ;; Hardware stack levels used:    1
   835 ;; Hardware stack levels required when called:    5
   836 ;; This function calls:
   837 ;;		_submit_piece
   838 ;; This function is called by:
   839 ;;		_main
   840 ;; This function uses a non-reentrant model
   841 ;;
   842                           
   843                           	psect	text2
   844  00065A                     __ptext2:
   845                           	callstack 0
   846  00065A                     _ProcessButtonPress:
   847                           	callstack 25
   848  00065A                     
   849                           ;main.c: 343:     static ButtonState state = Waiting;;main.c: 344:     static uint8_t bu
      +                          ttonCount = 0;;main.c: 345:     Button_Type currentButtonRead;;main.c: 348:     currentB
      +                          uttonRead.RG0 = PORTGbits.RG0;
   850  00065A  A086               	btfss	134,0,c	;volatile
   851  00065C  D003               	bra	u1065
   852  00065E  0100               	movlb	0	; () banked
   853  000660  816A               	bsf	ProcessButtonPress@currentButtonRead& (0+255),0,b
   854  000662  D002               	bra	u1067
   855  000664                     u1065:
   856  000664  0100               	movlb	0	; () banked
   857  000666  916A               	bcf	ProcessButtonPress@currentButtonRead& (0+255),0,b
   858  000668                     u1067:
   859                           
   860                           ;main.c: 349:     currentButtonRead.RG1 = PORTGbits.RG1;
   861  000668  A286               	btfss	134,1,c	;volatile
   862  00066A  D002               	bra	u1075
   863  00066C  836A               	bsf	ProcessButtonPress@currentButtonRead& (0+255),1,b
   864  00066E  D002               	bra	u1077
   865  000670                     u1075:
   866  000670  0100               	movlb	0	; () banked
   867  000672  936A               	bcf	ProcessButtonPress@currentButtonRead& (0+255),1,b
   868  000674                     u1077:
   869                           
   870                           ;main.c: 350:     currentButtonRead.RG2 = PORTGbits.RG2;
   871  000674  A486               	btfss	134,2,c	;volatile
   872  000676  D002               	bra	u1085
   873  000678  856A               	bsf	ProcessButtonPress@currentButtonRead& (0+255),2,b
   874  00067A  D002               	bra	u1087
   875  00067C                     u1085:
   876  00067C  0100               	movlb	0	; () banked
   877  00067E  956A               	bcf	ProcessButtonPress@currentButtonRead& (0+255),2,b
   878  000680                     u1087:
   879                           
   880                           ;main.c: 351:     currentButtonRead.RG3 = PORTGbits.RG3;
   881  000680  A686               	btfss	134,3,c	;volatile
   882  000682  D002               	bra	u1095
   883  000684  876A               	bsf	ProcessButtonPress@currentButtonRead& (0+255),3,b
   884  000686  D002               	bra	u1097
   885  000688                     u1095:
   886  000688  0100               	movlb	0	; () banked
   887  00068A  976A               	bcf	ProcessButtonPress@currentButtonRead& (0+255),3,b
   888  00068C                     u1097:
   889  00068C                     
   890                           ; BSR set to: 0
   891                           ;main.c: 353:     if (state == Waiting)
   892  00068C  5170               	movf	ProcessButtonPress@state& (0+255),w,b
   893  00068E  A4D8               	btfss	status,2,c
   894  000690  EF4C  F003         	goto	u1101
   895  000694  EF4E  F003         	goto	u1100
   896  000698                     u1101:
   897  000698  EF5E  F003         	goto	l1574
   898  00069C                     u1100:
   899  00069C                     
   900                           ; BSR set to: 0
   901                           ;main.c: 354:     {;main.c: 355:         if (currentButtonRead.Full != 0)
   902  00069C  516A               	movf	ProcessButtonPress@currentButtonRead& (0+255),w,b
   903  00069E  B4D8               	btfsc	status,2,c
   904  0006A0  EF54  F003         	goto	u1111
   905  0006A4  EF56  F003         	goto	u1110
   906  0006A8                     u1111:
   907  0006A8  EFA6  F003         	goto	l163
   908  0006AC                     u1110:
   909  0006AC                     
   910                           ; BSR set to: 0
   911                           ;main.c: 356:         {;main.c: 357:             state = Detected;
   912  0006AC  0E01               	movlw	1
   913  0006AE  6F70               	movwf	ProcessButtonPress@state& (0+255),b
   914  0006B0                     
   915                           ; BSR set to: 0
   916                           ;main.c: 358:             Temp_Press = currentButtonRead;
   917  0006B0  C06A  F071         	movff	ProcessButtonPress@currentButtonRead,_Temp_Press
   918                           
   919                           ;main.c: 359:             buttonCount = 0;
   920  0006B4  0E00               	movlw	0
   921  0006B6  6F6F               	movwf	ProcessButtonPress@buttonCount& (0+255),b
   922  0006B8  EFA6  F003         	goto	l163
   923  0006BC                     l1574:
   924                           
   925                           ; BSR set to: 0
   926  0006BC  0570               	decf	ProcessButtonPress@state& (0+255),w,b
   927  0006BE  A4D8               	btfss	status,2,c
   928  0006C0  EF64  F003         	goto	u1121
   929  0006C4  EF66  F003         	goto	u1120
   930  0006C8                     u1121:
   931  0006C8  EF80  F003         	goto	l1586
   932  0006CC                     u1120:
   933  0006CC                     
   934                           ; BSR set to: 0
   935                           ;main.c: 363:     {;main.c: 364:         if (currentButtonRead.Full == Temp_Press.Full)
   936  0006CC  5171               	movf	_Temp_Press& (0+255),w,b
   937  0006CE  196A               	xorwf	ProcessButtonPress@currentButtonRead& (0+255),w,b
   938  0006D0  A4D8               	btfss	status,2,c
   939  0006D2  EF6D  F003         	goto	u1131
   940  0006D6  EF6F  F003         	goto	u1130
   941  0006DA                     u1131:
   942  0006DA  EF7C  F003         	goto	l1584
   943  0006DE                     u1130:
   944  0006DE                     
   945                           ; BSR set to: 0
   946                           ;main.c: 365:         {;main.c: 366:             buttonCount++;
   947  0006DE  2B6F               	incf	ProcessButtonPress@buttonCount& (0+255),f,b
   948  0006E0                     
   949                           ; BSR set to: 0
   950                           ;main.c: 367:             if (buttonCount >= 1)
   951  0006E0  516F               	movf	ProcessButtonPress@buttonCount& (0+255),w,b
   952  0006E2  B4D8               	btfsc	status,2,c
   953  0006E4  EF76  F003         	goto	u1141
   954  0006E8  EF78  F003         	goto	u1140
   955  0006EC                     u1141:
   956  0006EC  EFA6  F003         	goto	l163
   957  0006F0                     u1140:
   958  0006F0                     
   959                           ; BSR set to: 0
   960                           ;main.c: 368:             {;main.c: 369:                 state = WaitForRelease;
   961  0006F0  0E02               	movlw	2
   962  0006F2  6F70               	movwf	ProcessButtonPress@state& (0+255),b
   963  0006F4  EFA6  F003         	goto	l163
   964  0006F8                     l1584:
   965                           
   966                           ; BSR set to: 0
   967                           ;main.c: 373:         {;main.c: 374:             state = Waiting;
   968  0006F8  0E00               	movlw	0
   969  0006FA  6F70               	movwf	ProcessButtonPress@state& (0+255),b
   970  0006FC  EFA6  F003         	goto	l163
   971  000700                     l1586:
   972                           
   973                           ; BSR set to: 0
   974  000700  0E02               	movlw	2
   975  000702  1970               	xorwf	ProcessButtonPress@state& (0+255),w,b
   976  000704  A4D8               	btfss	status,2,c
   977  000706  EF87  F003         	goto	u1151
   978  00070A  EF89  F003         	goto	u1150
   979  00070E                     u1151:
   980  00070E  EF95  F003         	goto	l1592
   981  000712                     u1150:
   982  000712                     
   983                           ; BSR set to: 0
   984                           ;main.c: 378:     {;main.c: 379:         if (currentButtonRead.Full == 0)
   985  000712  516A               	movf	ProcessButtonPress@currentButtonRead& (0+255),w,b
   986  000714  A4D8               	btfss	status,2,c
   987  000716  EF8F  F003         	goto	u1161
   988  00071A  EF91  F003         	goto	u1160
   989  00071E                     u1161:
   990  00071E  EFA6  F003         	goto	l163
   991  000722                     u1160:
   992  000722                     
   993                           ; BSR set to: 0
   994                           ;main.c: 380:         {;main.c: 381:             state = Update;
   995  000722  0E03               	movlw	3
   996  000724  6F70               	movwf	ProcessButtonPress@state& (0+255),b
   997  000726  EFA6  F003         	goto	l163
   998  00072A                     l1592:
   999                           
  1000                           ; BSR set to: 0
  1001  00072A  0E03               	movlw	3
  1002  00072C  1970               	xorwf	ProcessButtonPress@state& (0+255),w,b
  1003  00072E  A4D8               	btfss	status,2,c
  1004  000730  EF9C  F003         	goto	u1171
  1005  000734  EF9E  F003         	goto	u1170
  1006  000738                     u1171:
  1007  000738  EFA6  F003         	goto	l163
  1008  00073C                     u1170:
  1009  00073C                     
  1010                           ; BSR set to: 0
  1011                           ;main.c: 385:     {;main.c: 386:         Button_Press = Temp_Press;
  1012  00073C  C071  F072         	movff	_Temp_Press,_Button_Press
  1013  000740                     
  1014                           ; BSR set to: 0
  1015                           ;main.c: 387:         state = Waiting;
  1016  000740  0E00               	movlw	0
  1017  000742  6F70               	movwf	ProcessButtonPress@state& (0+255),b
  1018                           
  1019                           ;main.c: 388:         buttonCount = 0;
  1020  000744  0E00               	movlw	0
  1021  000746  6F6F               	movwf	ProcessButtonPress@buttonCount& (0+255),b
  1022  000748                     
  1023                           ; BSR set to: 0
  1024                           ;main.c: 389:         submit_piece();
  1025  000748  EC85  F002         	call	_submit_piece	;wreg free
  1026  00074C                     l163:
  1027  00074C  0012               	return		;funcret
  1028  00074E                     __end_of_ProcessButtonPress:
  1029                           	callstack 0
  1030                           
  1031 ;; *************** function _submit_piece *****************
  1032 ;; Defined at:
  1033 ;;		line 293 in file "main.c"
  1034 ;; Parameters:    Size  Location     Type
  1035 ;;		None
  1036 ;; Auto vars:     Size  Location     Type
  1037 ;;  ports           2    8[BANK0 ] PTR unsigned char 
  1038 ;;		 -> parse_and_assign@ports(4), 
  1039 ;; Return value:  Size  Location     Type
  1040 ;;                  1    wreg      void 
  1041 ;; Registers used:
  1042 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1043 ;; Tracked objects:
  1044 ;;		On entry : 0/0
  1045 ;;		On exit  : 0/0
  1046 ;;		Unchanged: 0/0
  1047 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1048 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1049 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1050 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1051 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1052 ;;Total ram usage:        2 bytes
  1053 ;; Hardware stack levels used:    1
  1054 ;; Hardware stack levels required when called:    4
  1055 ;; This function calls:
  1056 ;;		___awmod
  1057 ;;		_parse_and_assign
  1058 ;;		_spawn_piece
  1059 ;; This function is called by:
  1060 ;;		_ProcessButtonPress
  1061 ;; This function uses a non-reentrant model
  1062 ;;
  1063                           
  1064                           	psect	text3
  1065  00050A                     __ptext3:
  1066                           	callstack 0
  1067  00050A                     _submit_piece:
  1068                           	callstack 25
  1069  00050A                     
  1070                           ;main.c: 296:     uint8_t *ports;;main.c: 298:     if (active_piece == 0x00000000)
  1071  00050A  504E               	movf	_active_piece^0,w,c
  1072  00050C  104F               	iorwf	(_active_piece+1)^0,w,c
  1073  00050E  1050               	iorwf	(_active_piece+2)^0,w,c
  1074  000510  1051               	iorwf	(_active_piece+3)^0,w,c
  1075  000512  A4D8               	btfss	status,2,c
  1076  000514  EF8E  F002         	goto	u1011
  1077  000518  EF90  F002         	goto	u1010
  1078  00051C                     u1011:
  1079  00051C  EFA0  F002         	goto	l1514
  1080  000520                     u1010:
  1081  000520                     
  1082                           ;main.c: 299:     {;main.c: 300:         ports = parse_and_assign(active_piece_record);
  1083  000520  C02F  F060         	movff	_active_piece_record,parse_and_assign@value
  1084  000524  C030  F061         	movff	_active_piece_record+1,parse_and_assign@value+1
  1085  000528  C031  F062         	movff	_active_piece_record+2,parse_and_assign@value+2
  1086  00052C  C032  F063         	movff	_active_piece_record+3,parse_and_assign@value+3
  1087  000530  ECA6  F004         	call	_parse_and_assign	;wreg free
  1088  000534  C060  F068         	movff	?_parse_and_assign,submit_piece@ports
  1089  000538  C061  F069         	movff	?_parse_and_assign+1,submit_piece@ports+1
  1090                           
  1091                           ;main.c: 301:     }
  1092  00053C  EFAE  F002         	goto	l1516
  1093  000540                     l1514:
  1094                           
  1095                           ;main.c: 303:     {;main.c: 304:         ports = parse_and_assign(active_piece);
  1096  000540  C04E  F060         	movff	_active_piece,parse_and_assign@value
  1097  000544  C04F  F061         	movff	_active_piece+1,parse_and_assign@value+1
  1098  000548  C050  F062         	movff	_active_piece+2,parse_and_assign@value+2
  1099  00054C  C051  F063         	movff	_active_piece+3,parse_and_assign@value+3
  1100  000550  ECA6  F004         	call	_parse_and_assign	;wreg free
  1101  000554  C060  F068         	movff	?_parse_and_assign,submit_piece@ports
  1102  000558  C061  F069         	movff	?_parse_and_assign+1,submit_piece@ports+1
  1103  00055C                     l1516:
  1104                           
  1105                           ;main.c: 307:     LATC_value = PORTC | LATC_old | ports[0];
  1106  00055C  C068  FFD9         	movff	submit_piece@ports,fsr2l
  1107  000560  C069  FFDA         	movff	submit_piece@ports+1,fsr2h
  1108  000564  50DF               	movf	indf2,w,c
  1109  000566  1082               	iorwf	130,w,c	;volatile
  1110  000568  1048               	iorwf	_LATC_old^0,w,c
  1111  00056A  6E4C               	movwf	_LATC_value^0,c
  1112  00056C                     
  1113                           ;main.c: 308:     LATD_value = PORTD | LATD_old | ports[1];
  1114  00056C  0100               	movlb	0	; () banked
  1115  00056E  EE20 F001          	lfsr	2,1
  1116  000572  5168               	movf	submit_piece@ports& (0+255),w,b
  1117  000574  26D9               	addwf	fsr2l,f,c
  1118  000576  5169               	movf	(submit_piece@ports+1)& (0+255),w,b
  1119  000578  22DA               	addwfc	fsr2h,f,c
  1120  00057A  50DF               	movf	indf2,w,c
  1121  00057C  1083               	iorwf	131,w,c	;volatile
  1122  00057E  1047               	iorwf	_LATD_old^0,w,c
  1123  000580  6E4B               	movwf	_LATD_value^0,c
  1124  000582                     
  1125                           ; BSR set to: 0
  1126                           ;main.c: 309:     LATE_value = PORTE | LATE_old | ports[2];
  1127  000582  EE20 F002          	lfsr	2,2
  1128  000586  5168               	movf	submit_piece@ports& (0+255),w,b
  1129  000588  26D9               	addwf	fsr2l,f,c
  1130  00058A  5169               	movf	(submit_piece@ports+1)& (0+255),w,b
  1131  00058C  22DA               	addwfc	fsr2h,f,c
  1132  00058E  50DF               	movf	indf2,w,c
  1133  000590  1084               	iorwf	132,w,c	;volatile
  1134  000592  1046               	iorwf	_LATE_old^0,w,c
  1135  000594  6E4A               	movwf	_LATE_value^0,c
  1136  000596                     
  1137                           ; BSR set to: 0
  1138                           ;main.c: 310:     LATF_value = PORTF | LATF_old | ports[3];
  1139  000596  EE20 F003          	lfsr	2,3
  1140  00059A  5168               	movf	submit_piece@ports& (0+255),w,b
  1141  00059C  26D9               	addwf	fsr2l,f,c
  1142  00059E  5169               	movf	(submit_piece@ports+1)& (0+255),w,b
  1143  0005A0  22DA               	addwfc	fsr2h,f,c
  1144  0005A2  50DF               	movf	indf2,w,c
  1145  0005A4  1085               	iorwf	133,w,c	;volatile
  1146  0005A6  1045               	iorwf	_LATF_old^0,w,c
  1147  0005A8  6E49               	movwf	_LATF_value^0,c
  1148                           
  1149                           ;main.c: 312:     prev_piece = (prev_piece + 1) % 3;
  1150  0005AA  0E01               	movlw	1
  1151  0005AC  2577               	addwf	_prev_piece& (0+255),w,b
  1152  0005AE  6F60               	movwf	___awmod@dividend& (0+255),b
  1153  0005B0  0E00               	movlw	0
  1154  0005B2  2178               	addwfc	(_prev_piece+1)& (0+255),w,b
  1155  0005B4  6F61               	movwf	(___awmod@dividend+1)& (0+255),b
  1156  0005B6  0E00               	movlw	0
  1157  0005B8  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  1158  0005BA  0E03               	movlw	3
  1159  0005BC  6F62               	movwf	___awmod@divisor& (0+255),b
  1160  0005BE  ECA7  F003         	call	___awmod	;wreg free
  1161  0005C2  C060  F077         	movff	?___awmod,_prev_piece
  1162  0005C6  C061  F078         	movff	?___awmod+1,_prev_piece+1
  1163  0005CA                     
  1164                           ;main.c: 314:     is_active = 0;
  1165  0005CA  0E00               	movlw	0
  1166  0005CC  0100               	movlb	0	; () banked
  1167  0005CE  6F6E               	movwf	(_is_active+1)& (0+255),b
  1168  0005D0  0E00               	movlw	0
  1169  0005D2  6F6D               	movwf	_is_active& (0+255),b
  1170  0005D4                     
  1171                           ; BSR set to: 0
  1172                           ;main.c: 315:     is_at_bottom = 0;
  1173  0005D4  0E00               	movlw	0
  1174  0005D6  6E34               	movwf	(_is_at_bottom+1)^0,c
  1175  0005D8  0E00               	movlw	0
  1176  0005DA  6E33               	movwf	_is_at_bottom^0,c
  1177  0005DC                     
  1178                           ; BSR set to: 0
  1179                           ;main.c: 318:     if (LATC_flag == 1)
  1180  0005DC  043B               	decf	_LATC_flag^0,w,c
  1181  0005DE  103C               	iorwf	(_LATC_flag+1)^0,w,c
  1182  0005E0  A4D8               	btfss	status,2,c
  1183  0005E2  EFF5  F002         	goto	u1021
  1184  0005E6  EFF7  F002         	goto	u1020
  1185  0005EA                     u1021:
  1186  0005EA  EFFD  F002         	goto	l1534
  1187  0005EE                     u1020:
  1188  0005EE                     
  1189                           ; BSR set to: 0
  1190                           ;main.c: 319:     {;main.c: 320:         LATC = LATC_old;
  1191  0005EE  C048  FF8B         	movff	_LATC_old,3979	;volatile
  1192  0005F2                     
  1193                           ; BSR set to: 0
  1194                           ;main.c: 321:         LATC_flag = 0;
  1195  0005F2  0E00               	movlw	0
  1196  0005F4  6E3C               	movwf	(_LATC_flag+1)^0,c
  1197  0005F6  0E00               	movlw	0
  1198  0005F8  6E3B               	movwf	_LATC_flag^0,c
  1199  0005FA                     l1534:
  1200                           
  1201                           ; BSR set to: 0
  1202                           ;main.c: 323:     if (LATD_flag == 1)
  1203  0005FA  0439               	decf	_LATD_flag^0,w,c
  1204  0005FC  103A               	iorwf	(_LATD_flag+1)^0,w,c
  1205  0005FE  A4D8               	btfss	status,2,c
  1206  000600  EF04  F003         	goto	u1031
  1207  000604  EF06  F003         	goto	u1030
  1208  000608                     u1031:
  1209  000608  EF0C  F003         	goto	l1540
  1210  00060C                     u1030:
  1211  00060C                     
  1212                           ; BSR set to: 0
  1213                           ;main.c: 324:     {;main.c: 325:         LATD = LATD_old;
  1214  00060C  C047  FF8C         	movff	_LATD_old,3980	;volatile
  1215  000610                     
  1216                           ; BSR set to: 0
  1217                           ;main.c: 326:         LATD_flag = 0;
  1218  000610  0E00               	movlw	0
  1219  000612  6E3A               	movwf	(_LATD_flag+1)^0,c
  1220  000614  0E00               	movlw	0
  1221  000616  6E39               	movwf	_LATD_flag^0,c
  1222  000618                     l1540:
  1223                           
  1224                           ; BSR set to: 0
  1225                           ;main.c: 328:     if (LATE_flag == 1)
  1226  000618  0437               	decf	_LATE_flag^0,w,c
  1227  00061A  1038               	iorwf	(_LATE_flag+1)^0,w,c
  1228  00061C  A4D8               	btfss	status,2,c
  1229  00061E  EF13  F003         	goto	u1041
  1230  000622  EF15  F003         	goto	u1040
  1231  000626                     u1041:
  1232  000626  EF1B  F003         	goto	l1546
  1233  00062A                     u1040:
  1234  00062A                     
  1235                           ; BSR set to: 0
  1236                           ;main.c: 329:     {;main.c: 330:         LATE = LATE_old;
  1237  00062A  C046  FF8D         	movff	_LATE_old,3981	;volatile
  1238  00062E                     
  1239                           ; BSR set to: 0
  1240                           ;main.c: 331:         LATE_flag = 0;
  1241  00062E  0E00               	movlw	0
  1242  000630  6E38               	movwf	(_LATE_flag+1)^0,c
  1243  000632  0E00               	movlw	0
  1244  000634  6E37               	movwf	_LATE_flag^0,c
  1245  000636                     l1546:
  1246                           
  1247                           ; BSR set to: 0
  1248                           ;main.c: 333:     if (LATF_flag == 1)
  1249  000636  0435               	decf	_LATF_flag^0,w,c
  1250  000638  1036               	iorwf	(_LATF_flag+1)^0,w,c
  1251  00063A  A4D8               	btfss	status,2,c
  1252  00063C  EF22  F003         	goto	u1051
  1253  000640  EF24  F003         	goto	u1050
  1254  000644                     u1051:
  1255  000644  EF2A  F003         	goto	l1552
  1256  000648                     u1050:
  1257  000648                     
  1258                           ; BSR set to: 0
  1259                           ;main.c: 334:     {;main.c: 335:         LATF = LATF_old;
  1260  000648  C045  FF8E         	movff	_LATF_old,3982	;volatile
  1261  00064C                     
  1262                           ; BSR set to: 0
  1263                           ;main.c: 336:         LATF_flag = 0;
  1264  00064C  0E00               	movlw	0
  1265  00064E  6E36               	movwf	(_LATF_flag+1)^0,c
  1266  000650  0E00               	movlw	0
  1267  000652  6E35               	movwf	_LATF_flag^0,c
  1268  000654                     l1552:
  1269                           
  1270                           ; BSR set to: 0
  1271                           ;main.c: 338:     spawn_piece();
  1272  000654  EC00  F004         	call	_spawn_piece	;wreg free
  1273  000658  0012               	return		;funcret
  1274  00065A                     __end_of_submit_piece:
  1275                           	callstack 0
  1276                           
  1277 ;; *************** function _spawn_piece *****************
  1278 ;; Defined at:
  1279 ;;		line 432 in file "main.c"
  1280 ;; Parameters:    Size  Location     Type
  1281 ;;		None
  1282 ;; Auto vars:     Size  Location     Type
  1283 ;;		None
  1284 ;; Return value:  Size  Location     Type
  1285 ;;                  1    wreg      void 
  1286 ;; Registers used:
  1287 ;;		wreg, status,2, status,0
  1288 ;; Tracked objects:
  1289 ;;		On entry : 0/0
  1290 ;;		On exit  : 0/0
  1291 ;;		Unchanged: 0/0
  1292 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1293 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1294 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1295 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1296 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1297 ;;Total ram usage:        0 bytes
  1298 ;; Hardware stack levels used:    1
  1299 ;; Hardware stack levels required when called:    3
  1300 ;; This function calls:
  1301 ;;		Nothing
  1302 ;; This function is called by:
  1303 ;;		_submit_piece
  1304 ;;		_main
  1305 ;; This function uses a non-reentrant model
  1306 ;;
  1307                           
  1308                           	psect	text4
  1309  000800                     __ptext4:
  1310                           	callstack 0
  1311  000800                     _spawn_piece:
  1312                           	callstack 27
  1313  000800                     
  1314                           ;main.c: 435:     if (prev_piece == 2)
  1315  000800  0E02               	movlw	2
  1316  000802  0100               	movlb	0	; () banked
  1317  000804  1977               	xorwf	_prev_piece& (0+255),w,b
  1318  000806  1178               	iorwf	(_prev_piece+1)& (0+255),w,b
  1319  000808  A4D8               	btfss	status,2,c
  1320  00080A  EF09  F004         	goto	u931
  1321  00080E  EF0B  F004         	goto	u930
  1322  000812                     u931:
  1323  000812  EF15  F004         	goto	l1468
  1324  000816                     u930:
  1325  000816                     
  1326                           ; BSR set to: 0
  1327                           ;main.c: 436:     {;main.c: 437:         active_piece = 0x01000000;
  1328  000816  0E00               	movlw	0
  1329  000818  6E4E               	movwf	_active_piece^0,c
  1330  00081A  0E00               	movlw	0
  1331  00081C  6E4F               	movwf	(_active_piece+1)^0,c
  1332  00081E  0E00               	movlw	0
  1333  000820  6E50               	movwf	(_active_piece+2)^0,c
  1334  000822  0E01               	movlw	1
  1335  000824  6E51               	movwf	(_active_piece+3)^0,c
  1336                           
  1337                           ;main.c: 438:     }
  1338  000826  EF30  F004         	goto	l175
  1339  00082A                     l1468:
  1340                           
  1341                           ; BSR set to: 0
  1342  00082A  0577               	decf	_prev_piece& (0+255),w,b
  1343  00082C  1178               	iorwf	(_prev_piece+1)& (0+255),w,b
  1344  00082E  A4D8               	btfss	status,2,c
  1345  000830  EF1C  F004         	goto	u941
  1346  000834  EF1E  F004         	goto	u940
  1347  000838                     u941:
  1348  000838  EF28  F004         	goto	l1472
  1349  00083C                     u940:
  1350  00083C                     
  1351                           ; BSR set to: 0
  1352                           ;main.c: 440:     {;main.c: 441:         active_piece = 0x01030000;
  1353  00083C  0E00               	movlw	0
  1354  00083E  6E4E               	movwf	_active_piece^0,c
  1355  000840  0E00               	movlw	0
  1356  000842  6E4F               	movwf	(_active_piece+1)^0,c
  1357  000844  0E03               	movlw	3
  1358  000846  6E50               	movwf	(_active_piece+2)^0,c
  1359  000848  0E01               	movlw	1
  1360  00084A  6E51               	movwf	(_active_piece+3)^0,c
  1361                           
  1362                           ;main.c: 442:     }
  1363  00084C  EF30  F004         	goto	l175
  1364  000850                     l1472:
  1365                           
  1366                           ; BSR set to: 0
  1367                           ;main.c: 444:     {;main.c: 445:         active_piece = 0x03030000;
  1368  000850  0E00               	movlw	0
  1369  000852  6E4E               	movwf	_active_piece^0,c
  1370  000854  0E00               	movlw	0
  1371  000856  6E4F               	movwf	(_active_piece+1)^0,c
  1372  000858  0E03               	movlw	3
  1373  00085A  6E50               	movwf	(_active_piece+2)^0,c
  1374  00085C  0E03               	movlw	3
  1375  00085E  6E51               	movwf	(_active_piece+3)^0,c
  1376  000860                     l175:
  1377                           
  1378                           ; BSR set to: 0
  1379                           ;main.c: 447:     is_active = 1;
  1380  000860  0E00               	movlw	0
  1381  000862  6F6E               	movwf	(_is_active+1)& (0+255),b
  1382  000864  0E01               	movlw	1
  1383  000866  6F6D               	movwf	_is_active& (0+255),b
  1384                           
  1385                           ;main.c: 448:     active_piece_record = 0x00000000;
  1386  000868  0E00               	movlw	0
  1387  00086A  6E2F               	movwf	_active_piece_record^0,c
  1388  00086C  0E00               	movlw	0
  1389  00086E  6E30               	movwf	(_active_piece_record+1)^0,c
  1390  000870  0E00               	movlw	0
  1391  000872  6E31               	movwf	(_active_piece_record+2)^0,c
  1392  000874  0E00               	movlw	0
  1393  000876  6E32               	movwf	(_active_piece_record+3)^0,c
  1394  000878                     
  1395                           ; BSR set to: 0
  1396  000878  0012               	return		;funcret
  1397  00087A                     __end_of_spawn_piece:
  1398                           	callstack 0
  1399                           
  1400 ;; *************** function _parse_and_assign *****************
  1401 ;; Defined at:
  1402 ;;		line 412 in file "main.c"
  1403 ;; Parameters:    Size  Location     Type
  1404 ;;  value           4    0[BANK0 ] unsigned long 
  1405 ;; Auto vars:     Size  Location     Type
  1406 ;;  byte3           1    7[BANK0 ] unsigned char 
  1407 ;;  byte2           1    6[BANK0 ] unsigned char 
  1408 ;;  byte1           1    5[BANK0 ] unsigned char 
  1409 ;;  byte0           1    4[BANK0 ] unsigned char 
  1410 ;; Return value:  Size  Location     Type
  1411 ;;                  2    0[BANK0 ] PTR unsigned char 
  1412 ;; Registers used:
  1413 ;;		wreg, status,2, status,0
  1414 ;; Tracked objects:
  1415 ;;		On entry : 0/0
  1416 ;;		On exit  : 0/0
  1417 ;;		Unchanged: 0/0
  1418 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1419 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1420 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1421 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1422 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1423 ;;Total ram usage:        8 bytes
  1424 ;; Hardware stack levels used:    1
  1425 ;; Hardware stack levels required when called:    3
  1426 ;; This function calls:
  1427 ;;		Nothing
  1428 ;; This function is called by:
  1429 ;;		_submit_piece
  1430 ;;		_show_piece
  1431 ;; This function uses a non-reentrant model
  1432 ;;
  1433                           
  1434                           	psect	text5
  1435  00094C                     __ptext5:
  1436                           	callstack 0
  1437  00094C                     _parse_and_assign:
  1438                           	callstack 26
  1439  00094C                     
  1440                           ;main.c: 412: uint8_t *parse_and_assign(uint32_t value);main.c: 413: {;main.c: 414:     
      +                          static uint8_t ports[4];;main.c: 417:     uint8_t byte0 = (value >> 24) & 0xFF;
  1441  00094C  C063  F064         	movff	parse_and_assign@value+3,parse_and_assign@byte0
  1442                           
  1443                           ;main.c: 418:     uint8_t byte1 = (value >> 16) & 0xFF;
  1444  000950  C062  F065         	movff	parse_and_assign@value+2,parse_and_assign@byte1
  1445                           
  1446                           ;main.c: 419:     uint8_t byte2 = (value >> 8) & 0xFF;
  1447  000954  C061  F066         	movff	parse_and_assign@value+1,parse_and_assign@byte2
  1448                           
  1449                           ;main.c: 420:     uint8_t byte3 = (value >> 0) & 0xFF;
  1450  000958  C060  F067         	movff	parse_and_assign@value,parse_and_assign@byte3
  1451                           
  1452                           ;main.c: 423:     ports[0] = byte0;
  1453  00095C  C064  F073         	movff	parse_and_assign@byte0,parse_and_assign@ports
  1454                           
  1455                           ;main.c: 424:     ports[1] = byte1;
  1456  000960  C065  F074         	movff	parse_and_assign@byte1,parse_and_assign@ports+1
  1457                           
  1458                           ;main.c: 425:     ports[2] = byte2;
  1459  000964  C066  F075         	movff	parse_and_assign@byte2,parse_and_assign@ports+2
  1460                           
  1461                           ;main.c: 426:     ports[3] = byte3;
  1462  000968  C067  F076         	movff	parse_and_assign@byte3,parse_and_assign@ports+3
  1463  00096C                     
  1464                           ;main.c: 429:     return ports;
  1465  00096C  0E73               	movlw	low parse_and_assign@ports
  1466  00096E  0100               	movlb	0	; () banked
  1467  000970  6F60               	movwf	?_parse_and_assign& (0+255),b
  1468  000972  0E00               	movlw	high parse_and_assign@ports
  1469  000974  6F61               	movwf	(?_parse_and_assign+1)& (0+255),b
  1470  000976                     
  1471                           ; BSR set to: 0
  1472  000976  0012               	return		;funcret
  1473  000978                     __end_of_parse_and_assign:
  1474                           	callstack 0
  1475                           
  1476 ;; *************** function ___awmod *****************
  1477 ;; Defined at:
  1478 ;;		line 7 in file "/opt/microchip/xc8/v2.30/pic/sources/c99/common/awmod.c"
  1479 ;; Parameters:    Size  Location     Type
  1480 ;;  dividend        2    0[BANK0 ] int 
  1481 ;;  divisor         2    2[BANK0 ] int 
  1482 ;; Auto vars:     Size  Location     Type
  1483 ;;  sign            1    5[BANK0 ] unsigned char 
  1484 ;;  counter         1    4[BANK0 ] unsigned char 
  1485 ;; Return value:  Size  Location     Type
  1486 ;;                  2    0[BANK0 ] int 
  1487 ;; Registers used:
  1488 ;;		wreg, status,2, status,0
  1489 ;; Tracked objects:
  1490 ;;		On entry : 0/0
  1491 ;;		On exit  : 0/0
  1492 ;;		Unchanged: 0/0
  1493 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1494 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1495 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1496 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1497 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1498 ;;Total ram usage:        6 bytes
  1499 ;; Hardware stack levels used:    1
  1500 ;; Hardware stack levels required when called:    3
  1501 ;; This function calls:
  1502 ;;		Nothing
  1503 ;; This function is called by:
  1504 ;;		_submit_piece
  1505 ;; This function uses a non-reentrant model
  1506 ;;
  1507                           
  1508                           	psect	text6
  1509  00074E                     __ptext6:
  1510                           	callstack 0
  1511  00074E                     ___awmod:
  1512                           	callstack 25
  1513  00074E  0E00               	movlw	0
  1514  000750  0100               	movlb	0	; () banked
  1515  000752  6F65               	movwf	___awmod@sign& (0+255),b
  1516  000754                     
  1517                           ; BSR set to: 0
  1518  000754  BF61               	btfsc	(___awmod@dividend+1)& (0+255),7,b
  1519  000756  EFB1  F003         	goto	u950
  1520  00075A  EFAF  F003         	goto	u951
  1521  00075E                     u951:
  1522  00075E  EFB7  F003         	goto	l1482
  1523  000762                     u950:
  1524  000762                     
  1525                           ; BSR set to: 0
  1526  000762  6D60               	negf	___awmod@dividend& (0+255),b
  1527  000764  1F61               	comf	(___awmod@dividend+1)& (0+255),f,b
  1528  000766  B0D8               	btfsc	status,0,c
  1529  000768  2B61               	incf	(___awmod@dividend+1)& (0+255),f,b
  1530  00076A                     
  1531                           ; BSR set to: 0
  1532  00076A  0E01               	movlw	1
  1533  00076C  6F65               	movwf	___awmod@sign& (0+255),b
  1534  00076E                     l1482:
  1535                           
  1536                           ; BSR set to: 0
  1537  00076E  BF63               	btfsc	(___awmod@divisor+1)& (0+255),7,b
  1538  000770  EFBE  F003         	goto	u960
  1539  000774  EFBC  F003         	goto	u961
  1540  000778                     u961:
  1541  000778  EFC2  F003         	goto	l1486
  1542  00077C                     u960:
  1543  00077C                     
  1544                           ; BSR set to: 0
  1545  00077C  6D62               	negf	___awmod@divisor& (0+255),b
  1546  00077E  1F63               	comf	(___awmod@divisor+1)& (0+255),f,b
  1547  000780  B0D8               	btfsc	status,0,c
  1548  000782  2B63               	incf	(___awmod@divisor+1)& (0+255),f,b
  1549  000784                     l1486:
  1550                           
  1551                           ; BSR set to: 0
  1552  000784  5162               	movf	___awmod@divisor& (0+255),w,b
  1553  000786  1163               	iorwf	(___awmod@divisor+1)& (0+255),w,b
  1554  000788  B4D8               	btfsc	status,2,c
  1555  00078A  EFC9  F003         	goto	u971
  1556  00078E  EFCB  F003         	goto	u970
  1557  000792                     u971:
  1558  000792  EFEF  F003         	goto	l1502
  1559  000796                     u970:
  1560  000796                     
  1561                           ; BSR set to: 0
  1562  000796  0E01               	movlw	1
  1563  000798  6F64               	movwf	___awmod@counter& (0+255),b
  1564  00079A  EFD3  F003         	goto	l1492
  1565  00079E                     l1490:
  1566                           
  1567                           ; BSR set to: 0
  1568  00079E  90D8               	bcf	status,0,c
  1569  0007A0  3762               	rlcf	___awmod@divisor& (0+255),f,b
  1570  0007A2  3763               	rlcf	(___awmod@divisor+1)& (0+255),f,b
  1571  0007A4  2B64               	incf	___awmod@counter& (0+255),f,b
  1572  0007A6                     l1492:
  1573                           
  1574                           ; BSR set to: 0
  1575  0007A6  AF63               	btfss	(___awmod@divisor+1)& (0+255),7,b
  1576  0007A8  EFD8  F003         	goto	u981
  1577  0007AC  EFDA  F003         	goto	u980
  1578  0007B0                     u981:
  1579  0007B0  EFCF  F003         	goto	l1490
  1580  0007B4                     u980:
  1581  0007B4                     l1494:
  1582                           
  1583                           ; BSR set to: 0
  1584  0007B4  5162               	movf	___awmod@divisor& (0+255),w,b
  1585  0007B6  5D60               	subwf	___awmod@dividend& (0+255),w,b
  1586  0007B8  5163               	movf	(___awmod@divisor+1)& (0+255),w,b
  1587  0007BA  5961               	subwfb	(___awmod@dividend+1)& (0+255),w,b
  1588  0007BC  A0D8               	btfss	status,0,c
  1589  0007BE  EFE3  F003         	goto	u991
  1590  0007C2  EFE5  F003         	goto	u990
  1591  0007C6                     u991:
  1592  0007C6  EFE9  F003         	goto	l1498
  1593  0007CA                     u990:
  1594  0007CA                     
  1595                           ; BSR set to: 0
  1596  0007CA  5162               	movf	___awmod@divisor& (0+255),w,b
  1597  0007CC  5F60               	subwf	___awmod@dividend& (0+255),f,b
  1598  0007CE  5163               	movf	(___awmod@divisor+1)& (0+255),w,b
  1599  0007D0  5B61               	subwfb	(___awmod@dividend+1)& (0+255),f,b
  1600  0007D2                     l1498:
  1601                           
  1602                           ; BSR set to: 0
  1603  0007D2  90D8               	bcf	status,0,c
  1604  0007D4  3363               	rrcf	(___awmod@divisor+1)& (0+255),f,b
  1605  0007D6  3362               	rrcf	___awmod@divisor& (0+255),f,b
  1606  0007D8                     
  1607                           ; BSR set to: 0
  1608  0007D8  2F64               	decfsz	___awmod@counter& (0+255),f,b
  1609  0007DA  EFDA  F003         	goto	l1494
  1610  0007DE                     l1502:
  1611                           
  1612                           ; BSR set to: 0
  1613  0007DE  5165               	movf	___awmod@sign& (0+255),w,b
  1614  0007E0  B4D8               	btfsc	status,2,c
  1615  0007E2  EFF5  F003         	goto	u1001
  1616  0007E6  EFF7  F003         	goto	u1000
  1617  0007EA                     u1001:
  1618  0007EA  EFFB  F003         	goto	l1506
  1619  0007EE                     u1000:
  1620  0007EE                     
  1621                           ; BSR set to: 0
  1622  0007EE  6D60               	negf	___awmod@dividend& (0+255),b
  1623  0007F0  1F61               	comf	(___awmod@dividend+1)& (0+255),f,b
  1624  0007F2  B0D8               	btfsc	status,0,c
  1625  0007F4  2B61               	incf	(___awmod@dividend+1)& (0+255),f,b
  1626  0007F6                     l1506:
  1627                           
  1628                           ; BSR set to: 0
  1629  0007F6  C060  F060         	movff	___awmod@dividend,?___awmod
  1630  0007FA  C061  F061         	movff	___awmod@dividend+1,?___awmod+1
  1631  0007FE                     
  1632                           ; BSR set to: 0
  1633  0007FE  0012               	return		;funcret
  1634  000800                     __end_of___awmod:
  1635                           	callstack 0
  1636                           
  1637 ;; *************** function _InitializeTimerAndInterrupts *****************
  1638 ;; Defined at:
  1639 ;;		line 148 in file "main.c"
  1640 ;; Parameters:    Size  Location     Type
  1641 ;;		None
  1642 ;; Auto vars:     Size  Location     Type
  1643 ;;		None
  1644 ;; Return value:  Size  Location     Type
  1645 ;;                  1    wreg      void 
  1646 ;; Registers used:
  1647 ;;		wreg, status,2
  1648 ;; Tracked objects:
  1649 ;;		On entry : 0/0
  1650 ;;		On exit  : 0/0
  1651 ;;		Unchanged: 0/0
  1652 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1653 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1654 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1655 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1656 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1657 ;;Total ram usage:        0 bytes
  1658 ;; Hardware stack levels used:    1
  1659 ;; Hardware stack levels required when called:    3
  1660 ;; This function calls:
  1661 ;;		Nothing
  1662 ;; This function is called by:
  1663 ;;		_main
  1664 ;; This function uses a non-reentrant model
  1665 ;;
  1666                           
  1667                           	psect	text7
  1668  000978                     __ptext7:
  1669                           	callstack 0
  1670  000978                     _InitializeTimerAndInterrupts:
  1671                           	callstack 27
  1672  000978                     
  1673                           ;main.c: 152:     INTCONbits.GIE = 1;
  1674  000978  8EF2               	bsf	242,7,c	;volatile
  1675                           
  1676                           ;main.c: 153:     INTCONbits.PEIE = 1;
  1677  00097A  8CF2               	bsf	242,6,c	;volatile
  1678                           
  1679                           ;main.c: 154:     INTCONbits.TMR0IE = 1;
  1680  00097C  8AF2               	bsf	242,5,c	;volatile
  1681                           
  1682                           ;main.c: 155:     INTCONbits.INT0IE = 0;
  1683  00097E  98F2               	bcf	242,4,c	;volatile
  1684                           
  1685                           ;main.c: 156:     INTCONbits.RBIF = 0;
  1686  000980  90F2               	bcf	242,0,c	;volatile
  1687                           
  1688                           ;main.c: 157:     INTCONbits.RBIE = 1;
  1689  000982  86F2               	bsf	242,3,c	;volatile
  1690                           
  1691                           ;main.c: 158:     INTCONbits.TMR0IF = 0;
  1692  000984  94F2               	bcf	242,2,c	;volatile
  1693                           
  1694                           ;main.c: 159:     INTCONbits.INT0IF = 0;
  1695  000986  92F2               	bcf	242,1,c	;volatile
  1696                           
  1697                           ;main.c: 162:     RCONbits.IPEN = 0;
  1698  000988  9ED0               	bcf	208,7,c	;volatile
  1699                           
  1700                           ;main.c: 165:     T0CONbits.TMR0ON = 1;
  1701  00098A  8ED5               	bsf	213,7,c	;volatile
  1702                           
  1703                           ;main.c: 166:     T0CONbits.T08BIT = 0;
  1704  00098C  9CD5               	bcf	213,6,c	;volatile
  1705                           
  1706                           ;main.c: 167:     T0CONbits.T0CS = 0;
  1707  00098E  9AD5               	bcf	213,5,c	;volatile
  1708                           
  1709                           ;main.c: 168:     T0CONbits.T0SE = 0;
  1710  000990  98D5               	bcf	213,4,c	;volatile
  1711                           
  1712                           ;main.c: 169:     T0CONbits.PSA = 0;
  1713  000992  96D5               	bcf	213,3,c	;volatile
  1714                           
  1715                           ;main.c: 170:     T0CONbits.T0PS2 = 1;
  1716  000994  84D5               	bsf	213,2,c	;volatile
  1717                           
  1718                           ;main.c: 171:     T0CONbits.T0PS1 = 0;
  1719  000996  92D5               	bcf	213,1,c	;volatile
  1720                           
  1721                           ;main.c: 172:     T0CONbits.T0PS0 = 1;
  1722  000998  80D5               	bsf	213,0,c	;volatile
  1723  00099A                     
  1724                           ;main.c: 175:     TMR0L = 0x69;
  1725  00099A  0E69               	movlw	105
  1726  00099C  6ED6               	movwf	214,c	;volatile
  1727                           
  1728                           ;main.c: 176:     TMR0H = 0x67;
  1729  00099E  0E67               	movlw	103
  1730  0009A0  6ED7               	movwf	215,c	;volatile
  1731  0009A2  0012               	return		;funcret
  1732  0009A4                     __end_of_InitializeTimerAndInterrupts:
  1733                           	callstack 0
  1734                           
  1735 ;; *************** function _Init *****************
  1736 ;; Defined at:
  1737 ;;		line 105 in file "main.c"
  1738 ;; Parameters:    Size  Location     Type
  1739 ;;		None
  1740 ;; Auto vars:     Size  Location     Type
  1741 ;;		None
  1742 ;; Return value:  Size  Location     Type
  1743 ;;                  1    wreg      void 
  1744 ;; Registers used:
  1745 ;;		wreg, status,2
  1746 ;; Tracked objects:
  1747 ;;		On entry : 0/0
  1748 ;;		On exit  : 0/0
  1749 ;;		Unchanged: 0/0
  1750 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1751 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1752 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1753 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1754 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1755 ;;Total ram usage:        0 bytes
  1756 ;; Hardware stack levels used:    1
  1757 ;; Hardware stack levels required when called:    3
  1758 ;; This function calls:
  1759 ;;		Nothing
  1760 ;; This function is called by:
  1761 ;;		_main
  1762 ;; This function uses a non-reentrant model
  1763 ;;
  1764                           
  1765                           	psect	text8
  1766  00087A                     __ptext8:
  1767                           	callstack 0
  1768  00087A                     _Init:
  1769                           	callstack 27
  1770  00087A                     
  1771                           ;main.c: 109:     TRISA = 0x0F;
  1772  00087A  0E0F               	movlw	15
  1773  00087C  6E92               	movwf	146,c	;volatile
  1774                           
  1775                           ;main.c: 110:     LATA = 0x00;
  1776  00087E  0E00               	movlw	0
  1777  000880  6E89               	movwf	137,c	;volatile
  1778                           
  1779                           ;main.c: 111:     PORTA = 0x00;
  1780  000882  0E00               	movlw	0
  1781  000884  6E80               	movwf	128,c	;volatile
  1782                           
  1783                           ;main.c: 114:     TRISB = 0xF0;
  1784  000886  0EF0               	movlw	240
  1785  000888  6E93               	movwf	147,c	;volatile
  1786                           
  1787                           ;main.c: 115:     PORTB = 0x00;
  1788  00088A  0E00               	movlw	0
  1789  00088C  6E81               	movwf	129,c	;volatile
  1790  00088E                     
  1791                           ;main.c: 116:     LATB = PORTB;
  1792  00088E  CF81 FF8A          	movff	3969,3978	;volatile
  1793                           
  1794                           ;main.c: 121:     TRISC = 0x00;
  1795  000892  0E00               	movlw	0
  1796  000894  6E94               	movwf	148,c	;volatile
  1797                           
  1798                           ;main.c: 122:     LATC = 0x00;
  1799  000896  0E00               	movlw	0
  1800  000898  6E8B               	movwf	139,c	;volatile
  1801                           
  1802                           ;main.c: 123:     PORTC = 0x00;
  1803  00089A  0E00               	movlw	0
  1804  00089C  6E82               	movwf	130,c	;volatile
  1805                           
  1806                           ;main.c: 126:     TRISD = 0x00;
  1807  00089E  0E00               	movlw	0
  1808  0008A0  6E95               	movwf	149,c	;volatile
  1809                           
  1810                           ;main.c: 127:     LATD = 0x00;
  1811  0008A2  0E00               	movlw	0
  1812  0008A4  6E8C               	movwf	140,c	;volatile
  1813                           
  1814                           ;main.c: 128:     PORTD = 0x00;
  1815  0008A6  0E00               	movlw	0
  1816  0008A8  6E83               	movwf	131,c	;volatile
  1817                           
  1818                           ;main.c: 131:     TRISE = 0x00;
  1819  0008AA  0E00               	movlw	0
  1820  0008AC  6E96               	movwf	150,c	;volatile
  1821                           
  1822                           ;main.c: 132:     LATE = 0x00;
  1823  0008AE  0E00               	movlw	0
  1824  0008B0  6E8D               	movwf	141,c	;volatile
  1825                           
  1826                           ;main.c: 133:     PORTE = 0x00;
  1827  0008B2  0E00               	movlw	0
  1828  0008B4  6E84               	movwf	132,c	;volatile
  1829                           
  1830                           ;main.c: 136:     TRISF = 0x00;
  1831  0008B6  0E00               	movlw	0
  1832  0008B8  6E97               	movwf	151,c	;volatile
  1833                           
  1834                           ;main.c: 137:     LATF = 0x00;
  1835  0008BA  0E00               	movlw	0
  1836  0008BC  6E8E               	movwf	142,c	;volatile
  1837                           
  1838                           ;main.c: 138:     PORTF = 0x00;
  1839  0008BE  0E00               	movlw	0
  1840  0008C0  6E85               	movwf	133,c	;volatile
  1841                           
  1842                           ;main.c: 141:     TRISG = 0x0F;
  1843  0008C2  0E0F               	movlw	15
  1844  0008C4  6E98               	movwf	152,c	;volatile
  1845                           
  1846                           ;main.c: 142:     LATG = 0x00;
  1847  0008C6  0E00               	movlw	0
  1848  0008C8  6E8F               	movwf	143,c	;volatile
  1849                           
  1850                           ;main.c: 143:     PORTG = 0x00;
  1851  0008CA  0E00               	movlw	0
  1852  0008CC  6E86               	movwf	134,c	;volatile
  1853  0008CE                     
  1854                           ;main.c: 145:     lastRBState = PORTB;
  1855  0008CE  CF81 F052          	movff	3969,_lastRBState	;volatile
  1856  0008D2  0012               	return		;funcret
  1857  0008D4                     __end_of_Init:
  1858                           	callstack 0
  1859                           
  1860 ;; *************** function _HandleInterrupt *****************
  1861 ;; Defined at:
  1862 ;;		line 183 in file "main.c"
  1863 ;; Parameters:    Size  Location     Type
  1864 ;;		None
  1865 ;; Auto vars:     Size  Location     Type
  1866 ;;		None
  1867 ;; Return value:  Size  Location     Type
  1868 ;;                  1    wreg      void 
  1869 ;; Registers used:
  1870 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1871 ;; Tracked objects:
  1872 ;;		On entry : 0/0
  1873 ;;		On exit  : 0/0
  1874 ;;		Unchanged: 0/0
  1875 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1876 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1877 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1878 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1879 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1880 ;;Total ram usage:        2 bytes
  1881 ;; Hardware stack levels used:    1
  1882 ;; Hardware stack levels required when called:    2
  1883 ;; This function calls:
  1884 ;;		_shift_down_piece
  1885 ;; This function is called by:
  1886 ;;		Interrupt level 2
  1887 ;; This function uses a non-reentrant model
  1888 ;;
  1889                           
  1890                           	psect	intcode
  1891  000008                     __pintcode:
  1892                           	callstack 0
  1893  000008                     _HandleInterrupt:
  1894                           	callstack 25
  1895                           
  1896                           ;incstack = 0
  1897  000008  8253               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  1898  00000A  EDD8  F001         	call	int_func,f	;refresh shadow registers
  1899                           
  1900                           	psect	intcode_body
  1901  0003B0                     __pintcode_body:
  1902                           	callstack 25
  1903  0003B0                     int_func:
  1904                           	callstack 25
  1905  0003B0  0006               	pop		; remove dummy address from shadow register refresh
  1906  0003B2  CFD9 F02D          	movff	fsr2l,??_HandleInterrupt
  1907  0003B6  CFDA F02E          	movff	fsr2h,??_HandleInterrupt+1
  1908  0003BA                     
  1909                           ;main.c: 186:     if (INTCONbits.RBIF == 1)
  1910  0003BA  A0F2               	btfss	242,0,c	;volatile
  1911  0003BC  EFE2  F001         	goto	i2u84_41
  1912  0003C0  EFE4  F001         	goto	i2u84_40
  1913  0003C4                     i2u84_41:
  1914  0003C4  EFE5  F001         	goto	i2l125
  1915  0003C8                     i2u84_40:
  1916  0003C8                     
  1917                           ;main.c: 187:     {;main.c: 230:         INTCONbits.RBIF = 0;
  1918  0003C8  90F2               	bcf	242,0,c	;volatile
  1919  0003CA                     i2l125:
  1920                           
  1921                           ;main.c: 233:     if (INTCONbits.TMR0IF == 1)
  1922  0003CA  A4F2               	btfss	242,2,c	;volatile
  1923  0003CC  EFEA  F001         	goto	i2u85_41
  1924  0003D0  EFEC  F001         	goto	i2u85_40
  1925  0003D4                     i2u85_41:
  1926  0003D4  EF7F  F002         	goto	i2l135
  1927  0003D8                     i2u85_40:
  1928  0003D8                     
  1929                           ;main.c: 234:     {;main.c: 236:         two_seconds_counter++;
  1930  0003D8  4A3D               	infsnz	_two_seconds_counter^0,f,c
  1931  0003DA  2A3E               	incf	(_two_seconds_counter+1)^0,f,c
  1932  0003DC                     
  1933                           ;main.c: 237:         INTCONbits.TMR0IF = 0;
  1934  0003DC  94F2               	bcf	242,2,c	;volatile
  1935  0003DE                     
  1936                           ;main.c: 238:         TMR0L = 0x69;
  1937  0003DE  0E69               	movlw	105
  1938  0003E0  6ED6               	movwf	214,c	;volatile
  1939  0003E2                     
  1940                           ;main.c: 239:         TMR0H = 0x67;
  1941  0003E2  0E67               	movlw	103
  1942  0003E4  6ED7               	movwf	215,c	;volatile
  1943  0003E6                     
  1944                           ;main.c: 240:         if (blink_flag == 0)
  1945  0003E6  503F               	movf	_blink_flag^0,w,c
  1946  0003E8  1040               	iorwf	(_blink_flag+1)^0,w,c
  1947  0003EA  A4D8               	btfss	status,2,c
  1948  0003EC  EFFA  F001         	goto	i2u86_41
  1949  0003F0  EFFC  F001         	goto	i2u86_40
  1950  0003F4                     i2u86_41:
  1951  0003F4  EF12  F002         	goto	i2l1406
  1952  0003F8                     i2u86_40:
  1953  0003F8                     
  1954                           ;main.c: 241:         {;main.c: 243:             blink_flag = 1;
  1955  0003F8  0E00               	movlw	0
  1956  0003FA  6E40               	movwf	(_blink_flag+1)^0,c
  1957  0003FC  0E01               	movlw	1
  1958  0003FE  6E3F               	movwf	_blink_flag^0,c
  1959  000400                     
  1960                           ;main.c: 244:             active_piece_record = active_piece;
  1961  000400  C04E  F02F         	movff	_active_piece,_active_piece_record
  1962  000404  C04F  F030         	movff	_active_piece+1,_active_piece_record+1
  1963  000408  C050  F031         	movff	_active_piece+2,_active_piece_record+2
  1964  00040C  C051  F032         	movff	_active_piece+3,_active_piece_record+3
  1965                           
  1966                           ;main.c: 245:             active_piece = 0x00000000;
  1967  000410  0E00               	movlw	0
  1968  000412  6E4E               	movwf	_active_piece^0,c
  1969  000414  0E00               	movlw	0
  1970  000416  6E4F               	movwf	(_active_piece+1)^0,c
  1971  000418  0E00               	movlw	0
  1972  00041A  6E50               	movwf	(_active_piece+2)^0,c
  1973  00041C  0E00               	movlw	0
  1974  00041E  6E51               	movwf	(_active_piece+3)^0,c
  1975                           
  1976                           ;main.c: 246:         }
  1977  000420  EF26  F002         	goto	i2l1410
  1978  000424                     i2l1406:
  1979                           
  1980                           ;main.c: 248:         {;main.c: 250:             blink_flag = 0;
  1981  000424  0E00               	movlw	0
  1982  000426  6E40               	movwf	(_blink_flag+1)^0,c
  1983  000428  0E00               	movlw	0
  1984  00042A  6E3F               	movwf	_blink_flag^0,c
  1985  00042C                     
  1986                           ;main.c: 251:             active_piece = active_piece_record;
  1987  00042C  C02F  F04E         	movff	_active_piece_record,_active_piece
  1988  000430  C030  F04F         	movff	_active_piece_record+1,_active_piece+1
  1989  000434  C031  F050         	movff	_active_piece_record+2,_active_piece+2
  1990  000438  C032  F051         	movff	_active_piece_record+3,_active_piece+3
  1991                           
  1992                           ;main.c: 252:             active_piece_record = 0x00000000;
  1993  00043C  0E00               	movlw	0
  1994  00043E  6E2F               	movwf	_active_piece_record^0,c
  1995  000440  0E00               	movlw	0
  1996  000442  6E30               	movwf	(_active_piece_record+1)^0,c
  1997  000444  0E00               	movlw	0
  1998  000446  6E31               	movwf	(_active_piece_record+2)^0,c
  1999  000448  0E00               	movlw	0
  2000  00044A  6E32               	movwf	(_active_piece_record+3)^0,c
  2001  00044C                     i2l1410:
  2002                           
  2003                           ;main.c: 255:         if (two_seconds_counter == 8)
  2004  00044C  0E08               	movlw	8
  2005  00044E  183D               	xorwf	_two_seconds_counter^0,w,c
  2006  000450  103E               	iorwf	(_two_seconds_counter+1)^0,w,c
  2007  000452  A4D8               	btfss	status,2,c
  2008  000454  EF2E  F002         	goto	i2u87_41
  2009  000458  EF30  F002         	goto	i2u87_40
  2010  00045C                     i2u87_41:
  2011  00045C  EF43  F002         	goto	i2l1418
  2012  000460                     i2u87_40:
  2013  000460                     
  2014                           ;main.c: 256:         {;main.c: 258:             if (is_at_bottom == 0)
  2015  000460  5033               	movf	_is_at_bottom^0,w,c
  2016  000462  1034               	iorwf	(_is_at_bottom+1)^0,w,c
  2017  000464  A4D8               	btfss	status,2,c
  2018  000466  EF37  F002         	goto	i2u88_41
  2019  00046A  EF39  F002         	goto	i2u88_40
  2020  00046E                     i2u88_41:
  2021  00046E  EF3F  F002         	goto	i2l1416
  2022  000472                     i2u88_40:
  2023  000472                     
  2024                           ;main.c: 259:             {;main.c: 260:                 shift_down_piece(&active_piece)
      +                          ;
  2025  000472  0E4E               	movlw	low _active_piece
  2026  000474  6E09               	movwf	shift_down_piece@active_piece^0,c
  2027  000476  0E00               	movlw	high _active_piece
  2028  000478  6E0A               	movwf	(shift_down_piece@active_piece+1)^0,c
  2029  00047A  EC11  F001         	call	_shift_down_piece	;wreg free
  2030  00047E                     i2l1416:
  2031                           
  2032                           ;main.c: 263:             two_seconds_counter = 0;
  2033  00047E  0E00               	movlw	0
  2034  000480  6E3E               	movwf	(_two_seconds_counter+1)^0,c
  2035  000482  0E00               	movlw	0
  2036  000484  6E3D               	movwf	_two_seconds_counter^0,c
  2037  000486                     i2l1418:
  2038                           
  2039                           ;main.c: 266:         if (LATC_flag == 1)
  2040  000486  043B               	decf	_LATC_flag^0,w,c
  2041  000488  103C               	iorwf	(_LATC_flag+1)^0,w,c
  2042  00048A  A4D8               	btfss	status,2,c
  2043  00048C  EF4A  F002         	goto	i2u89_41
  2044  000490  EF4C  F002         	goto	i2u89_40
  2045  000494                     i2u89_41:
  2046  000494  EF52  F002         	goto	i2l1424
  2047  000498                     i2u89_40:
  2048  000498                     
  2049                           ;main.c: 267:         {;main.c: 268:             LATC_value = LATC_old;
  2050  000498  C048  F04C         	movff	_LATC_old,_LATC_value
  2051  00049C                     
  2052                           ;main.c: 269:             LATC_flag = 0;
  2053  00049C  0E00               	movlw	0
  2054  00049E  6E3C               	movwf	(_LATC_flag+1)^0,c
  2055  0004A0  0E00               	movlw	0
  2056  0004A2  6E3B               	movwf	_LATC_flag^0,c
  2057  0004A4                     i2l1424:
  2058                           
  2059                           ;main.c: 271:         if (LATD_flag == 1)
  2060  0004A4  0439               	decf	_LATD_flag^0,w,c
  2061  0004A6  103A               	iorwf	(_LATD_flag+1)^0,w,c
  2062  0004A8  A4D8               	btfss	status,2,c
  2063  0004AA  EF59  F002         	goto	i2u90_41
  2064  0004AE  EF5B  F002         	goto	i2u90_40
  2065  0004B2                     i2u90_41:
  2066  0004B2  EF61  F002         	goto	i2l1430
  2067  0004B6                     i2u90_40:
  2068  0004B6                     
  2069                           ;main.c: 272:         {;main.c: 273:             LATD_value = LATD_old;
  2070  0004B6  C047  F04B         	movff	_LATD_old,_LATD_value
  2071  0004BA                     
  2072                           ;main.c: 274:             LATD_flag = 0;
  2073  0004BA  0E00               	movlw	0
  2074  0004BC  6E3A               	movwf	(_LATD_flag+1)^0,c
  2075  0004BE  0E00               	movlw	0
  2076  0004C0  6E39               	movwf	_LATD_flag^0,c
  2077  0004C2                     i2l1430:
  2078                           
  2079                           ;main.c: 276:         if (LATE_flag == 1)
  2080  0004C2  0437               	decf	_LATE_flag^0,w,c
  2081  0004C4  1038               	iorwf	(_LATE_flag+1)^0,w,c
  2082  0004C6  A4D8               	btfss	status,2,c
  2083  0004C8  EF68  F002         	goto	i2u91_41
  2084  0004CC  EF6A  F002         	goto	i2u91_40
  2085  0004D0                     i2u91_41:
  2086  0004D0  EF70  F002         	goto	i2l1436
  2087  0004D4                     i2u91_40:
  2088  0004D4                     
  2089                           ;main.c: 277:         {;main.c: 278:             LATE_value = LATE_old;
  2090  0004D4  C046  F04A         	movff	_LATE_old,_LATE_value
  2091  0004D8                     
  2092                           ;main.c: 279:             LATE_flag = 0;
  2093  0004D8  0E00               	movlw	0
  2094  0004DA  6E38               	movwf	(_LATE_flag+1)^0,c
  2095  0004DC  0E00               	movlw	0
  2096  0004DE  6E37               	movwf	_LATE_flag^0,c
  2097  0004E0                     i2l1436:
  2098                           
  2099                           ;main.c: 281:         if (LATF_flag == 1)
  2100  0004E0  0435               	decf	_LATF_flag^0,w,c
  2101  0004E2  1036               	iorwf	(_LATF_flag+1)^0,w,c
  2102  0004E4  A4D8               	btfss	status,2,c
  2103  0004E6  EF77  F002         	goto	i2u92_41
  2104  0004EA  EF79  F002         	goto	i2u92_40
  2105  0004EE                     i2u92_41:
  2106  0004EE  EF7F  F002         	goto	i2l135
  2107  0004F2                     i2u92_40:
  2108  0004F2                     
  2109                           ;main.c: 282:         {;main.c: 283:             LATF_value = LATF_old;
  2110  0004F2  C045  F049         	movff	_LATF_old,_LATF_value
  2111  0004F6                     
  2112                           ;main.c: 284:             LATF_flag = 0;
  2113  0004F6  0E00               	movlw	0
  2114  0004F8  6E36               	movwf	(_LATF_flag+1)^0,c
  2115  0004FA  0E00               	movlw	0
  2116  0004FC  6E35               	movwf	_LATF_flag^0,c
  2117  0004FE                     i2l135:
  2118  0004FE  C02E  FFDA         	movff	??_HandleInterrupt+1,fsr2h
  2119  000502  C02D  FFD9         	movff	??_HandleInterrupt,fsr2l
  2120  000506  9253               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  2121  000508  0011               	retfie		f
  2122  00050A                     __end_of_HandleInterrupt:
  2123                           	callstack 0
  2124                           
  2125 ;; *************** function _shift_down_piece *****************
  2126 ;; Defined at:
  2127 ;;		line 393 in file "main.c"
  2128 ;; Parameters:    Size  Location     Type
  2129 ;;  active_piece    2    8[COMRAM] PTR unsigned long 
  2130 ;;		 -> active_piece(4), 
  2131 ;; Auto vars:     Size  Location     Type
  2132 ;;  ports           2   42[COMRAM] PTR unsigned char 
  2133 ;;		 -> parse_and_assign@ports(4), 
  2134 ;;  byte3           1   41[COMRAM] unsigned char 
  2135 ;;  byte2           1   40[COMRAM] unsigned char 
  2136 ;;  byte1           1   39[COMRAM] unsigned char 
  2137 ;;  byte0           1   38[COMRAM] unsigned char 
  2138 ;; Return value:  Size  Location     Type
  2139 ;;                  1    wreg      void 
  2140 ;; Registers used:
  2141 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2142 ;; Tracked objects:
  2143 ;;		On entry : 0/0
  2144 ;;		On exit  : 0/0
  2145 ;;		Unchanged: 0/0
  2146 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2147 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2148 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2149 ;;      Temps:         28       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2150 ;;      Totals:        36       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2151 ;;Total ram usage:       36 bytes
  2152 ;; Hardware stack levels used:    1
  2153 ;; Hardware stack levels required when called:    1
  2154 ;; This function calls:
  2155 ;;		i2_parse_and_assign
  2156 ;; This function is called by:
  2157 ;;		_HandleInterrupt
  2158 ;; This function uses a non-reentrant model
  2159 ;;
  2160                           
  2161                           	psect	text10
  2162  000222                     __ptext10:
  2163                           	callstack 0
  2164  000222                     _shift_down_piece:
  2165                           	callstack 25
  2166  000222                     
  2167                           ;main.c: 393: void shift_down_piece(uint32_t *active_piece);main.c: 394: {;main.c: 395: 
      +                              uint8_t *ports = parse_and_assign(*active_piece);
  2168  000222  C009  FFD9         	movff	shift_down_piece@active_piece,fsr2l
  2169  000226  C00A  FFDA         	movff	shift_down_piece@active_piece+1,fsr2h
  2170  00022A  CFDE F001          	movff	postinc2,i2parse_and_assign@value
  2171  00022E  CFDE F002          	movff	postinc2,i2parse_and_assign@value+1
  2172  000232  CFDE F003          	movff	postinc2,i2parse_and_assign@value+2
  2173  000236  CFDE F004          	movff	postinc2,i2parse_and_assign@value+3
  2174  00023A  ECD2  F004         	call	i2_parse_and_assign	;wreg free
  2175  00023E  C001  F02B         	movff	?i2_parse_and_assign,shift_down_piece@ports
  2176  000242  C002  F02C         	movff	?i2_parse_and_assign+1,shift_down_piece@ports+1
  2177  000246                     
  2178                           ;main.c: 397:     uint8_t byte0 = (uint8_t)(ports[0] << 1);
  2179  000246  C02B  FFD9         	movff	shift_down_piece@ports,fsr2l
  2180  00024A  C02C  FFDA         	movff	shift_down_piece@ports+1,fsr2h
  2181  00024E  50DF               	movf	indf2,w,c
  2182  000250  6E0B               	movwf	??_shift_down_piece^0,c
  2183  000252  90D8               	bcf	status,0,c
  2184  000254  340B               	rlcf	??_shift_down_piece^0,w,c
  2185  000256  6E27               	movwf	shift_down_piece@byte0^0,c
  2186  000258                     
  2187                           ;main.c: 398:     uint8_t byte1 = (uint8_t)(ports[1] << 1);
  2188  000258  EE20 F001          	lfsr	2,1
  2189  00025C  502B               	movf	shift_down_piece@ports^0,w,c
  2190  00025E  26D9               	addwf	fsr2l,f,c
  2191  000260  502C               	movf	(shift_down_piece@ports+1)^0,w,c
  2192  000262  22DA               	addwfc	fsr2h,f,c
  2193  000264  50DF               	movf	indf2,w,c
  2194  000266  6E0B               	movwf	??_shift_down_piece^0,c
  2195  000268  90D8               	bcf	status,0,c
  2196  00026A  340B               	rlcf	??_shift_down_piece^0,w,c
  2197  00026C  6E28               	movwf	shift_down_piece@byte1^0,c
  2198  00026E                     
  2199                           ;main.c: 399:     uint8_t byte2 = (uint8_t)(ports[2] << 1);
  2200  00026E  EE20 F002          	lfsr	2,2
  2201  000272  502B               	movf	shift_down_piece@ports^0,w,c
  2202  000274  26D9               	addwf	fsr2l,f,c
  2203  000276  502C               	movf	(shift_down_piece@ports+1)^0,w,c
  2204  000278  22DA               	addwfc	fsr2h,f,c
  2205  00027A  50DF               	movf	indf2,w,c
  2206  00027C  6E0B               	movwf	??_shift_down_piece^0,c
  2207  00027E  90D8               	bcf	status,0,c
  2208  000280  340B               	rlcf	??_shift_down_piece^0,w,c
  2209  000282  6E29               	movwf	shift_down_piece@byte2^0,c
  2210  000284                     
  2211                           ;main.c: 400:     uint8_t byte3 = (uint8_t)(ports[3] << 1);
  2212  000284  EE20 F003          	lfsr	2,3
  2213  000288  502B               	movf	shift_down_piece@ports^0,w,c
  2214  00028A  26D9               	addwf	fsr2l,f,c
  2215  00028C  502C               	movf	(shift_down_piece@ports+1)^0,w,c
  2216  00028E  22DA               	addwfc	fsr2h,f,c
  2217  000290  50DF               	movf	indf2,w,c
  2218  000292  6E0B               	movwf	??_shift_down_piece^0,c
  2219  000294  90D8               	bcf	status,0,c
  2220  000296  340B               	rlcf	??_shift_down_piece^0,w,c
  2221  000298  6E2A               	movwf	shift_down_piece@byte3^0,c
  2222  00029A                     
  2223                           ;main.c: 403:     ports[0] = byte0;
  2224  00029A  C02B  FFD9         	movff	shift_down_piece@ports,fsr2l
  2225  00029E  C02C  FFDA         	movff	shift_down_piece@ports+1,fsr2h
  2226  0002A2  C027  FFDF         	movff	shift_down_piece@byte0,indf2
  2227  0002A6                     
  2228                           ;main.c: 404:     ports[1] = byte1;
  2229  0002A6  EE20 F001          	lfsr	2,1
  2230  0002AA  502B               	movf	shift_down_piece@ports^0,w,c
  2231  0002AC  26D9               	addwf	fsr2l,f,c
  2232  0002AE  502C               	movf	(shift_down_piece@ports+1)^0,w,c
  2233  0002B0  22DA               	addwfc	fsr2h,f,c
  2234  0002B2  C028  FFDF         	movff	shift_down_piece@byte1,indf2
  2235  0002B6                     
  2236                           ;main.c: 405:     ports[2] = byte2;
  2237  0002B6  EE20 F002          	lfsr	2,2
  2238  0002BA  502B               	movf	shift_down_piece@ports^0,w,c
  2239  0002BC  26D9               	addwf	fsr2l,f,c
  2240  0002BE  502C               	movf	(shift_down_piece@ports+1)^0,w,c
  2241  0002C0  22DA               	addwfc	fsr2h,f,c
  2242  0002C2  C029  FFDF         	movff	shift_down_piece@byte2,indf2
  2243  0002C6                     
  2244                           ;main.c: 406:     ports[3] = byte3;
  2245  0002C6  EE20 F003          	lfsr	2,3
  2246  0002CA  502B               	movf	shift_down_piece@ports^0,w,c
  2247  0002CC  26D9               	addwf	fsr2l,f,c
  2248  0002CE  502C               	movf	(shift_down_piece@ports+1)^0,w,c
  2249  0002D0  22DA               	addwfc	fsr2h,f,c
  2250  0002D2  C02A  FFDF         	movff	shift_down_piece@byte3,indf2
  2251  0002D6                     
  2252                           ;main.c: 409:     *active_piece = ((uint32_t)ports[0] << 24) | ((uint32_t)ports[1] << 16
      +                          ) | ((uint32_t)ports[2] << 8) | ((uint32_t)ports[3]);
  2253  0002D6  EE20 F002          	lfsr	2,2
  2254  0002DA  502B               	movf	shift_down_piece@ports^0,w,c
  2255  0002DC  26D9               	addwf	fsr2l,f,c
  2256  0002DE  502C               	movf	(shift_down_piece@ports+1)^0,w,c
  2257  0002E0  22DA               	addwfc	fsr2h,f,c
  2258  0002E2  50DF               	movf	indf2,w,c
  2259  0002E4  6E0B               	movwf	??_shift_down_piece^0,c
  2260  0002E6  C00B  F00C         	movff	??_shift_down_piece,??_shift_down_piece+1
  2261  0002EA  6A0D               	clrf	(??_shift_down_piece+2)^0,c
  2262  0002EC  6A0E               	clrf	(??_shift_down_piece+3)^0,c
  2263  0002EE  6A0F               	clrf	(??_shift_down_piece+4)^0,c
  2264  0002F0  C00E  F00F         	movff	??_shift_down_piece+3,??_shift_down_piece+4
  2265  0002F4  C00D  F00E         	movff	??_shift_down_piece+2,??_shift_down_piece+3
  2266  0002F8  C00C  F00D         	movff	??_shift_down_piece+1,??_shift_down_piece+2
  2267  0002FC  6A0C               	clrf	(??_shift_down_piece+1)^0,c
  2268  0002FE  EE20 F001          	lfsr	2,1
  2269  000302  502B               	movf	shift_down_piece@ports^0,w,c
  2270  000304  26D9               	addwf	fsr2l,f,c
  2271  000306  502C               	movf	(shift_down_piece@ports+1)^0,w,c
  2272  000308  22DA               	addwfc	fsr2h,f,c
  2273  00030A  50DF               	movf	indf2,w,c
  2274  00030C  6E10               	movwf	(??_shift_down_piece+5)^0,c
  2275  00030E  C010  F011         	movff	??_shift_down_piece+5,??_shift_down_piece+6
  2276  000312  6A12               	clrf	(??_shift_down_piece+7)^0,c
  2277  000314  6A13               	clrf	(??_shift_down_piece+8)^0,c
  2278  000316  6A14               	clrf	(??_shift_down_piece+9)^0,c
  2279  000318  C012  F014         	movff	??_shift_down_piece+7,??_shift_down_piece+9
  2280  00031C  C011  F013         	movff	??_shift_down_piece+6,??_shift_down_piece+8
  2281  000320  6A12               	clrf	(??_shift_down_piece+7)^0,c
  2282  000322  6A11               	clrf	(??_shift_down_piece+6)^0,c
  2283  000324  C02B  FFD9         	movff	shift_down_piece@ports,fsr2l
  2284  000328  C02C  FFDA         	movff	shift_down_piece@ports+1,fsr2h
  2285  00032C  50DF               	movf	indf2,w,c
  2286  00032E  6E15               	movwf	(??_shift_down_piece+10)^0,c
  2287  000330  C015  F016         	movff	??_shift_down_piece+10,??_shift_down_piece+11
  2288  000334  6A17               	clrf	(??_shift_down_piece+12)^0,c
  2289  000336  6A18               	clrf	(??_shift_down_piece+13)^0,c
  2290  000338  6A19               	clrf	(??_shift_down_piece+14)^0,c
  2291  00033A  C016  F019         	movff	??_shift_down_piece+11,??_shift_down_piece+14
  2292  00033E  6A18               	clrf	(??_shift_down_piece+13)^0,c
  2293  000340  6A17               	clrf	(??_shift_down_piece+12)^0,c
  2294  000342  6A16               	clrf	(??_shift_down_piece+11)^0,c
  2295  000344  5011               	movf	(??_shift_down_piece+6)^0,w,c
  2296  000346  1016               	iorwf	(??_shift_down_piece+11)^0,w,c
  2297  000348  6E1A               	movwf	(??_shift_down_piece+15)^0,c
  2298  00034A  5012               	movf	(??_shift_down_piece+7)^0,w,c
  2299  00034C  1017               	iorwf	(??_shift_down_piece+12)^0,w,c
  2300  00034E  6E1B               	movwf	(??_shift_down_piece+16)^0,c
  2301  000350  5013               	movf	(??_shift_down_piece+8)^0,w,c
  2302  000352  1018               	iorwf	(??_shift_down_piece+13)^0,w,c
  2303  000354  6E1C               	movwf	(??_shift_down_piece+17)^0,c
  2304  000356  5014               	movf	(??_shift_down_piece+9)^0,w,c
  2305  000358  1019               	iorwf	(??_shift_down_piece+14)^0,w,c
  2306  00035A  6E1D               	movwf	(??_shift_down_piece+18)^0,c
  2307  00035C  500C               	movf	(??_shift_down_piece+1)^0,w,c
  2308  00035E  101A               	iorwf	(??_shift_down_piece+15)^0,w,c
  2309  000360  6E1E               	movwf	(??_shift_down_piece+19)^0,c
  2310  000362  500D               	movf	(??_shift_down_piece+2)^0,w,c
  2311  000364  101B               	iorwf	(??_shift_down_piece+16)^0,w,c
  2312  000366  6E1F               	movwf	(??_shift_down_piece+20)^0,c
  2313  000368  500E               	movf	(??_shift_down_piece+3)^0,w,c
  2314  00036A  101C               	iorwf	(??_shift_down_piece+17)^0,w,c
  2315  00036C  6E20               	movwf	(??_shift_down_piece+21)^0,c
  2316  00036E  500F               	movf	(??_shift_down_piece+4)^0,w,c
  2317  000370  101D               	iorwf	(??_shift_down_piece+18)^0,w,c
  2318  000372  6E21               	movwf	(??_shift_down_piece+22)^0,c
  2319  000374  EE20 F003          	lfsr	2,3
  2320  000378  502B               	movf	shift_down_piece@ports^0,w,c
  2321  00037A  26D9               	addwf	fsr2l,f,c
  2322  00037C  502C               	movf	(shift_down_piece@ports+1)^0,w,c
  2323  00037E  22DA               	addwfc	fsr2h,f,c
  2324  000380  50DF               	movf	indf2,w,c
  2325  000382  6E22               	movwf	(??_shift_down_piece+23)^0,c
  2326  000384  5022               	movf	(??_shift_down_piece+23)^0,w,c
  2327  000386  101E               	iorwf	(??_shift_down_piece+19)^0,w,c
  2328  000388  6E23               	movwf	(??_shift_down_piece+24)^0,c
  2329  00038A  501F               	movf	(??_shift_down_piece+20)^0,w,c
  2330  00038C  6E24               	movwf	(??_shift_down_piece+25)^0,c
  2331  00038E  5020               	movf	(??_shift_down_piece+21)^0,w,c
  2332  000390  6E25               	movwf	(??_shift_down_piece+26)^0,c
  2333  000392  5021               	movf	(??_shift_down_piece+22)^0,w,c
  2334  000394  6E26               	movwf	(??_shift_down_piece+27)^0,c
  2335  000396  C009  FFD9         	movff	shift_down_piece@active_piece,fsr2l
  2336  00039A  C00A  FFDA         	movff	shift_down_piece@active_piece+1,fsr2h
  2337  00039E  C023  FFDE         	movff	??_shift_down_piece+24,postinc2
  2338  0003A2  C024  FFDE         	movff	??_shift_down_piece+25,postinc2
  2339  0003A6  C025  FFDE         	movff	??_shift_down_piece+26,postinc2
  2340  0003AA  C026  FFDE         	movff	??_shift_down_piece+27,postinc2
  2341  0003AE  0012               	return		;funcret
  2342  0003B0                     __end_of_shift_down_piece:
  2343                           	callstack 0
  2344                           
  2345 ;; *************** function i2_parse_and_assign *****************
  2346 ;; Defined at:
  2347 ;;		line 412 in file "main.c"
  2348 ;; Parameters:    Size  Location     Type
  2349 ;;  value           4    0[COMRAM] unsigned long 
  2350 ;; Auto vars:     Size  Location     Type
  2351 ;;  byte3           1    7[COMRAM] unsigned char 
  2352 ;;  byte2           1    6[COMRAM] unsigned char 
  2353 ;;  byte1           1    5[COMRAM] unsigned char 
  2354 ;;  byte0           1    4[COMRAM] unsigned char 
  2355 ;; Return value:  Size  Location     Type
  2356 ;;                  2    0[COMRAM] PTR unsigned char 
  2357 ;; Registers used:
  2358 ;;		wreg, status,2, status,0
  2359 ;; Tracked objects:
  2360 ;;		On entry : 0/0
  2361 ;;		On exit  : 0/0
  2362 ;;		Unchanged: 0/0
  2363 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2364 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2365 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2366 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2367 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2368 ;;Total ram usage:        8 bytes
  2369 ;; Hardware stack levels used:    1
  2370 ;; This function calls:
  2371 ;;		Nothing
  2372 ;; This function is called by:
  2373 ;;		_shift_down_piece
  2374 ;; This function uses a non-reentrant model
  2375 ;;
  2376                           
  2377                           	psect	text11
  2378  0009A4                     __ptext11:
  2379                           	callstack 0
  2380  0009A4                     i2_parse_and_assign:
  2381                           	callstack 25
  2382  0009A4                     
  2383                           ;main.c: 412: uint8_t *parse_and_assign(uint32_t value);main.c: 413: {;main.c: 414:     
      +                          static uint8_t ports[4];;main.c: 417:     uint8_t byte0 = (value >> 24) & 0xFF;
  2384  0009A4  C004  F005         	movff	i2parse_and_assign@value+3,i2parse_and_assign@byte0
  2385                           
  2386                           ;main.c: 418:     uint8_t byte1 = (value >> 16) & 0xFF;
  2387  0009A8  C003  F006         	movff	i2parse_and_assign@value+2,i2parse_and_assign@byte1
  2388                           
  2389                           ;main.c: 419:     uint8_t byte2 = (value >> 8) & 0xFF;
  2390  0009AC  C002  F007         	movff	i2parse_and_assign@value+1,i2parse_and_assign@byte2
  2391                           
  2392                           ;main.c: 420:     uint8_t byte3 = (value >> 0) & 0xFF;
  2393  0009B0  C001  F008         	movff	i2parse_and_assign@value,i2parse_and_assign@byte3
  2394                           
  2395                           ;main.c: 423:     ports[0] = byte0;
  2396  0009B4  C005  F073         	movff	i2parse_and_assign@byte0,parse_and_assign@ports
  2397                           
  2398                           ;main.c: 424:     ports[1] = byte1;
  2399  0009B8  C006  F074         	movff	i2parse_and_assign@byte1,parse_and_assign@ports+1
  2400                           
  2401                           ;main.c: 425:     ports[2] = byte2;
  2402  0009BC  C007  F075         	movff	i2parse_and_assign@byte2,parse_and_assign@ports+2
  2403                           
  2404                           ;main.c: 426:     ports[3] = byte3;
  2405  0009C0  C008  F076         	movff	i2parse_and_assign@byte3,parse_and_assign@ports+3
  2406  0009C4                     
  2407                           ;main.c: 429:     return ports;
  2408  0009C4  0E73               	movlw	low parse_and_assign@ports
  2409  0009C6  6E01               	movwf	?i2_parse_and_assign^0,c
  2410  0009C8  0E00               	movlw	high parse_and_assign@ports
  2411  0009CA  6E02               	movwf	(?i2_parse_and_assign+1)^0,c
  2412  0009CC  0012               	return		;funcret
  2413  0009CE                     __end_ofi2_parse_and_assign:
  2414                           	callstack 0
  2415  0000                     
  2416                           	psect	rparam
  2417  0000                     
  2418                           	psect	temp
  2419  000053                     btemp:
  2420                           	callstack 0
  2421  000053                     	ds	1
  2422  0000                     int$flags	set	btemp
  2423  0000                     wtemp8	set	btemp+1
  2424  0000                     ttemp5	set	btemp+1
  2425  0000                     ttemp6	set	btemp+4
  2426  0000                     ttemp7	set	btemp+8
  2427                           
  2428                           	psect	config
  2429                           
  2430                           ; Padding undefined space
  2431  300000                     	org	3145728
  2432  300000  FF                 	db	255
  2433                           
  2434                           ;Config register CONFIG1H @ 0x300001
  2435                           ;	Oscillator Selection bits
  2436                           ;	OSC = HSPLL, HS oscillator, PLL enabled (Clock Frequency = 4 x FOSC1)
  2437                           ;	Fail-Safe Clock Monitor Enable bit
  2438                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
  2439                           ;	Internal/External Oscillator Switchover bit
  2440                           ;	IESO = OFF, Two-Speed Start-up disabled
  2441  300001                     	org	3145729
  2442  300001  06                 	db	6
  2443                           
  2444                           ;Config register CONFIG2L @ 0x300002
  2445                           ;	Power-up Timer Enable bit
  2446                           ;	PWRT = OFF, PWRT disabled
  2447                           ;	Brown-out Reset Enable bits
  2448                           ;	BOREN = OFF, Brown-out Reset disabled in hardware and software
  2449                           ;	Brown-out Voltage bits
  2450                           ;	BORV = 0x3, unprogrammed default
  2451  300002                     	org	3145730
  2452  300002  19                 	db	25
  2453                           
  2454                           ;Config register CONFIG2H @ 0x300003
  2455                           ;	Watchdog Timer
  2456                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  2457                           ;	Watchdog Timer Postscale Select bits
  2458                           ;	WDTPS = 0xF, unprogrammed default
  2459  300003                     	org	3145731
  2460  300003  1E                 	db	30
  2461                           
  2462                           ;Config register CONFIG3L @ 0x300004
  2463                           ;	unspecified, using default values
  2464                           ;	Processor Data Memory Mode Select bits
  2465                           ;	MODE = 0x3, unprogrammed default
  2466                           ;	Address Bus Width Select bits
  2467                           ;	ADDRBW = 0x3, unprogrammed default
  2468                           ;	Data Bus Width Select bit
  2469                           ;	DATABW = 0x1, unprogrammed default
  2470                           ;	External Bus Data Wait Enable bit
  2471                           ;	WAIT = 0x1, unprogrammed default
  2472  300004                     	org	3145732
  2473  300004  F3                 	db	243
  2474                           
  2475                           ;Config register CONFIG3H @ 0x300005
  2476                           ;	CCP2 MUX bit
  2477                           ;	CCP2MX = 0x1, unprogrammed default
  2478                           ;	ECCP MUX bit
  2479                           ;	ECCPMX = 0x1, unprogrammed default
  2480                           ;	Low-Power Timer1 Oscillator Enable bit
  2481                           ;	LPT1OSC = OFF, Timer1 configured for higher power operation
  2482                           ;	MCLR Pin Enable bit
  2483                           ;	MCLRE = ON, MCLR pin enabled; RG5 input pin disabled
  2484  300005                     	org	3145733
  2485  300005  83                 	db	131
  2486                           
  2487                           ;Config register CONFIG4L @ 0x300006
  2488                           ;	Stack Full/Underflow Reset Enable bit
  2489                           ;	STVREN = 0x1, unprogrammed default
  2490                           ;	Single-Supply ICSP Enable bit
  2491                           ;	LVP = OFF, Single-Supply ICSP disabled
  2492                           ;	Boot Block Size Select bits
  2493                           ;	BBSIZ = 0x0, unprogrammed default
  2494                           ;	Extended Instruction Set Enable bit
  2495                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled (Legacy mo
      +                          de)
  2496                           ;	Background Debugger Enable bit
  2497                           ;	DEBUG = OFF, Background debugger disabled, RB6 and RB7 configured as general purpose I
      +                          /O pins
  2498  300006                     	org	3145734
  2499  300006  81                 	db	129
  2500                           
  2501                           ; Padding undefined space
  2502  300007                     	org	3145735
  2503  300007  FF                 	db	255
  2504                           tosu	equ	0xFFF
  2505                           tosh	equ	0xFFE
  2506                           tosl	equ	0xFFD
  2507                           stkptr	equ	0xFFC
  2508                           pclatu	equ	0xFFB
  2509                           pclath	equ	0xFFA
  2510                           pcl	equ	0xFF9
  2511                           tblptru	equ	0xFF8
  2512                           tblptrh	equ	0xFF7
  2513                           tblptrl	equ	0xFF6
  2514                           tablat	equ	0xFF5
  2515                           prodh	equ	0xFF4
  2516                           prodl	equ	0xFF3
  2517                           indf0	equ	0xFEF
  2518                           postinc0	equ	0xFEE
  2519                           postdec0	equ	0xFED
  2520                           preinc0	equ	0xFEC
  2521                           plusw0	equ	0xFEB
  2522                           fsr0h	equ	0xFEA
  2523                           fsr0l	equ	0xFE9
  2524                           wreg	equ	0xFE8
  2525                           indf1	equ	0xFE7
  2526                           postinc1	equ	0xFE6
  2527                           postdec1	equ	0xFE5
  2528                           preinc1	equ	0xFE4
  2529                           plusw1	equ	0xFE3
  2530                           fsr1h	equ	0xFE2
  2531                           fsr1l	equ	0xFE1
  2532                           bsr	equ	0xFE0
  2533                           indf2	equ	0xFDF
  2534                           postinc2	equ	0xFDE
  2535                           postdec2	equ	0xFDD
  2536                           preinc2	equ	0xFDC
  2537                           plusw2	equ	0xFDB
  2538                           fsr2h	equ	0xFDA
  2539                           fsr2l	equ	0xFD9
  2540                           status	equ	0xFD8

Data Sizes:
    Strings     0
    Constant    0
    Data        2
    BSS         45
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     46      82
    BANK0           160     13      25
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           96      0       0

Pointer List with Targets:

    show_piece@ports	PTR unsigned char  size(2) Largest target is 4
		 -> parse_and_assign@ports(BANK0[4]), 

    shift_down_piece@active_piece	PTR unsigned long  size(2) Largest target is 4
		 -> active_piece(COMRAM[4]), 

    shift_down_piece@ports	PTR unsigned char  size(2) Largest target is 4
		 -> parse_and_assign@ports(BANK0[4]), 

    sp__parse_and_assign	PTR unsigned char  size(2) Largest target is 4
		 -> parse_and_assign@ports(BANK0[4]), 

    submit_piece@ports	PTR unsigned char  size(2) Largest target is 4
		 -> parse_and_assign@ports(BANK0[4]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _HandleInterrupt in COMRAM

    _HandleInterrupt->_shift_down_piece
    _shift_down_piece->i2_parse_and_assign

Critical Paths under _main in BANK0

    _main->_ProcessButtonPress
    _show_piece->_parse_and_assign
    _ProcessButtonPress->_submit_piece
    _submit_piece->_parse_and_assign

Critical Paths under _HandleInterrupt in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _HandleInterrupt in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _HandleInterrupt in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _HandleInterrupt in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _HandleInterrupt in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _HandleInterrupt in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _HandleInterrupt in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _HandleInterrupt in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _HandleInterrupt in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _HandleInterrupt in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _HandleInterrupt in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _HandleInterrupt in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _HandleInterrupt in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _HandleInterrupt in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _HandleInterrupt in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _HandleInterrupt in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0    2548
                                             11 BANK0      2     2      0
                               _Init
       _InitializeTimerAndInterrupts
                 _ProcessButtonPress
                         _show_piece
                        _spawn_piece
 ---------------------------------------------------------------------------------
 (1) _show_piece                                           2     2      0    1084
                                              8 BANK0      2     2      0
                   _parse_and_assign
 ---------------------------------------------------------------------------------
 (1) _ProcessButtonPress                                   1     1      0    1464
                                             10 BANK0      1     1      0
                       _submit_piece
 ---------------------------------------------------------------------------------
 (2) _submit_piece                                         2     2      0    1328
                                              8 BANK0      2     2      0
                            ___awmod
                   _parse_and_assign
                        _spawn_piece
 ---------------------------------------------------------------------------------
 (1) _spawn_piece                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _parse_and_assign                                     8     4      4     585
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              6     2      4     613
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (1) _InitializeTimerAndInterrupts                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Init                                                 0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _HandleInterrupt                                      2     2      0     683
                                             44 COMRAM     2     2      0
                   _shift_down_piece
 ---------------------------------------------------------------------------------
 (5) _shift_down_piece                                    36    34      2     683
                                              8 COMRAM    36    34      2
                 i2_parse_and_assign
 ---------------------------------------------------------------------------------
 (6) i2_parse_and_assign                                   8     4      4     206
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Init
   _InitializeTimerAndInterrupts
   _ProcessButtonPress
     _submit_piece
       ___awmod
       _parse_and_assign
       _spawn_piece
   _show_piece
     _parse_and_assign
   _spawn_piece

 _HandleInterrupt (ROOT)
   _shift_down_piece
     i2_parse_and_assign

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F5F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      33        0.0%
BANK14             100      0       0      34        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      D      19       5       15.6%
BITBANK15           60      0       0      35        0.0%
BANK15              60      0       0      36        0.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     2E      52       1       87.2%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      6B      32        0.0%
DATA                 0      0      6B       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.30 build 20200825195618 
Symbol Table                                                                                   Mon Apr 22 13:29:57 2024

                                  l120 09A2                                    l117 08D2  
                                  l144 0658                                    l171 0976  
                                  l163 074C                                    l175 0860  
                                  l178 0878                                    l443 07FE  
                                  l188 0220                                    u930 0816  
                                  u931 0812                                    u940 083C  
                                  u941 0838                                    u950 0762  
                                  u951 075E                                    u960 077C  
                                  u961 0778                                    u970 0796  
                                  u971 0792                                    u980 07B4  
                                  u981 07B0                                    u990 07CA  
                                  u991 07C6                           ___awmod@sign 0065  
                                  wreg 000FE8                                   l1500 07D8  
                                 l1502 07DE                                   l1510 050A  
                                 l1504 07EE                                   l1520 0582  
                                 l1512 0520                                   l1600 0012  
                                 l1506 07F6                                   l1530 05EE  
                                 l1522 0596                                   l1514 0540  
                                 l1610 0074                                   l1602 002E  
                                 l1460 096C                                   l1540 0618  
                                 l1532 05F2                                   l1524 05CA  
                                 l1516 055C                                   l1612 0090  
                                 l1620 00BE                                   l1604 003C  
                                 l1470 083C                                   l1550 064C  
                                 l1542 062A                                   l1534 05FA  
                                 l1526 05D4                                   l1518 056C  
                                 l1622 00DE                                   l1630 0110  
                                 l1614 00A2                                   l1606 0050  
                                 l1560 0978                                   l1480 076A  
                                 l1472 0850                                   l1464 0800  
                                 l1552 0654                                   l1544 062E  
                                 l1536 060C                                   l1528 05DC  
                                 l1632 0130                                   l1640 0162  
                                 l1624 00F0                                   l1616 00AA  
                                 l1608 0062                                   l1554 087A  
                                 l1562 099A                                   l1490 079E  
                                 l1482 076E                                   l1474 074E  
                                 l1458 094C                                   l1466 0816  
                                 l1546 0636                                   l1538 0610  
                                 l1570 06AC                                   l1642 0182  
                                 l1650 01B4                                   l1634 0142  
                                 l1626 00F8                                   l1618 00AE  
                                 l1556 088E                                   l1492 07A6  
                                 l1484 077C                                   l1476 0754  
                                 l1468 082A                                   l1548 0648  
                                 l1580 06E0                                   l1572 06B0  
                                 l1564 065A                                   l1652 01CA  
                                 l1644 0194                                   l1636 014A  
                                 l1628 00FC                                   l1660 08D4  
                                 l1558 08CE                                   l1494 07B4  
                                 l1486 0784                                   l1478 0762  
                                 l1590 0722                                   l1582 06F0  
                                 l1574 06BC                                   l1566 068C  
                                 l1654 01E4                                   l1646 019C  
                                 l1638 014E                                   l1670 08FE  
                                 l1662 08D8                                   l1496 07CA  
                                 l1488 0796                                   l1592 072A  
                                 l1584 06F8                                   l1576 06CC  
                                 l1568 069C                                   l1656 01FE  
                                 l1648 01A0                                   l1672 0902  
                                 l1664 08F2                                   l1498 07D2  
                                 l1594 073C                                   l1578 06DE  
                                 l1586 0700                                   l1658 0218  
                                 l1674 0906                                   l1666 08F6  
                                 l1596 0740                                   l1588 0712  
                                 l1668 08FA                                   l1598 0748  
                                 u1000 07EE                                   u1001 07EA  
                                 u1010 0520                                   u1011 051C  
                                 u1020 05EE                                   u1100 069C  
                                 u1021 05EA                                   u1101 0698  
                                 u1030 060C                                   u1110 06AC  
                                 u1031 0608                                   u1111 06A8  
                                 u1040 062A                                   u1120 06CC  
                                 u1200 00DE                                   u1041 0626  
                                 u1121 06C8                                   u1201 00DA  
                                 u1050 0648                                   u1130 06DE  
                                 u1210 00F0                                   u1051 0644  
                                 u1131 06DA                                   u1211 00EC  
                                 u1140 06F0                                   u1220 0130  
                                 u1141 06EC                                   u1221 012C  
                                 u1150 0712                                   u1230 0142  
                                 u1151 070E                                   u1231 013E  
                                 u1160 0722                                   u1240 0182  
                                 u1161 071E                                   u1065 0664  
                                 u1241 017E                                   u1170 073C  
                                 u1250 0194                                   u1171 0738  
                                 u1075 0670                                   u1067 0668  
                                 u1251 0190                                   u1307 08E4  
                                 u1260 01CA                                   u1180 0090  
                                 u1085 067C                                   u1077 0674  
                                 u1261 01C6                                   u1181 008C  
                                 _LATA 000F89                                   u1270 01E4  
                                 u1190 00A2                                   _LATB 000F8A  
                                 u1095 0688                                   u1087 0680  
                                 u1271 01E0                                   u1191 009E  
                                 _LATC 000F8B                                   u1280 01FE  
                                 _LATD 000F8C                                   u1097 068C  
                                 u1281 01FA                                   _LATE 000F8D  
                                 u1290 0218                                   _LATF 000F8E  
                                 u1291 0214                                   _LATG 000F8F  
                         _submit_piece 050A                                   _Init 087A  
                                 _main 08D4                                   fsr2h 000FDA  
                                 indf2 000FDF                                   fsr2l 000FD9  
                                 btemp 0053               __end_of_parse_and_assign 0978  
                                 start 000E               __end_of_shift_down_piece 03B0  
                         ___param_bank 000000                                  ?_Init 0001  
                                ?_main 0001                        __end_of___awmod 0800  
                                i2l125 03CA                                  i2l135 04FE  
                                i2l171 09CC                                  i2l166 03AE  
                                _TMR0H 000FD7                                  _TMR0L 000FD6  
                                _PORTA 000F80                                  _PORTB 000F81  
                                _PORTC 000F82                                  _PORTD 000F83  
                                _PORTE 000F84                                  _PORTF 000F85  
                                _PORTG 000F86                                  _TRISA 000F92  
                                _TRISB 000F93                                  _TRISC 000F94  
                                _TRISD 000F95                                  _TRISE 000F96  
                                _TRISF 000F97                                  _TRISG 000F98  
                  _active_piece_record 002F                                  _prevB 004D  
                                tablat 000FF5                                  ttemp5 0054  
                                ttemp6 0057                                  ttemp7 005B  
                                status 000FD8                                  wtemp8 0054  
                      __initialization 0912                           __end_of_Init 08D4  
                         __end_of_main 0912                      ??_HandleInterrupt 002D  
                               ??_Init 0060                                 ??_main 006B  
                        __activetblptr 000000                     i2_parse_and_assign 09A4  
                               i2l1400 03E6                                 i2l1410 044C  
                               i2l1402 03F8                                 i2l1420 0498  
                               i2l1412 0460                                 i2l1404 0400  
                               i2l1430 04C2                                 i2l1422 049C  
                               i2l1414 0472                                 i2l1406 0424  
                               i2l1280 0284                                 i2l1272 0222  
                               i2l1440 04F6                                 i2l1432 04D4  
                               i2l1424 04A4                                 i2l1416 047E  
                               i2l1408 042C                                 i2l1266 09A4  
                               i2l1290 02D6                                 i2l1282 029A  
                               i2l1274 0246                                 i2l1434 04D8  
                               i2l1426 04B6                                 i2l1418 0486  
                               i2l1268 09C4                                 i2l1284 02A6  
                               i2l1276 0258                                 i2l1436 04E0  
                               i2l1428 04BA                                 i2l1286 02B6  
                               i2l1278 026E                                 i2l1438 04F2  
                               i2l1390 03C8                                 i2l1288 02C6  
                               i2l1392 03D8                                 i2l1394 03DC  
                               i2l1396 03DE                                 i2l1388 03BA  
                               i2l1398 03E2                    ?i2_parse_and_assign 0001  
                           _Temp_Press 0071                              ??___awmod 0064  
                               clear_0 0930                                 clear_1 093C  
                      ___awmod@divisor 0062                        ___awmod@counter 0064  
                 ??i2_parse_and_assign 0005                                 tblptrh 000FF7  
                               tblptrl 000FF6                                 tblptru 000FF8  
                           __accesstop 0060                __end_of__initialization 0942  
                        ___rparam_used 000001                           ?_spawn_piece 0001  
                       __pcstackCOMRAM 0001            __size_of_ProcessButtonPress 00F4  
                         __pidataBANK0 09CE                           _active_piece 004E  
                           __pbssBANK0 006D                             __pnvCOMRAM 0052  
                    ?_parse_and_assign 0060                     ??_parse_and_assign 0064  
                    ?_shift_down_piece 0009                             _blink_flag 003F  
                   ??_shift_down_piece 000B                                i2u90_40 04B6  
                              i2u90_41 04B2                                i2u91_40 04D4  
                              i2u91_41 04D0                                i2u92_40 04F2  
                              i2u84_40 03C8                                i2u92_41 04EE  
                              i2u84_41 03C4                                i2u85_40 03D8  
                              i2u85_41 03D4                                i2u86_40 03F8  
                              i2u86_41 03F4                                i2u87_40 0460  
                              i2u87_41 045C                                i2u88_40 0472  
                              i2u88_41 046E                                i2u89_40 0498  
                              i2u89_41 0494                ProcessButtonPress@state 0070  
                      show_piece@ports 0068                        _HandleInterrupt 0008  
                              __Hparam 0000                                __Lparam 0000  
                              ___awmod 074E                                __pcinit 0912  
                              __ramtop 1000                                __ptext0 08D4  
                              __ptext1 0012                                __ptext2 065A  
                              __ptext3 050A                                __ptext4 0800  
                              __ptext5 094C                                __ptext6 074E  
                              __ptext7 0978                                __ptext8 087A  
                            _T0CONbits 000FD5                       ___awmod@dividend 0060  
                shift_down_piece@byte0 0027                  shift_down_piece@byte1 0028  
                shift_down_piece@byte2 0029                  shift_down_piece@byte3 002A  
                shift_down_piece@ports 002B                              _LATC_flag 003B  
                            _LATD_flag 0039                              _LATE_flag 0037  
                            _LATF_flag 0035                         __pintcode_body 03B0  
                 end_of_initialization 0942                      submit_piece@ports 0068  
                              int_func 03B0                   __size_of_spawn_piece 007A  
                              postinc0 000FEE                                postinc2 000FDE  
                           _prev_piece 0077                              _PORTGbits 000F86  
                           _show_piece 0012                    _two_seconds_counter 003D  
              __end_of_HandleInterrupt 050A            __size_ofi2_parse_and_assign 002A  
                  start_initialization 0912   __end_of_InitializeTimerAndInterrupts 09A4  
__size_of_InitializeTimerAndInterrupts 002C           _InitializeTimerAndInterrupts 0978  
                         _Button_Press 0072                          ?_submit_piece 0001  
           __end_of_ProcessButtonPress 074E                           _is_at_bottom 0033  
                          __pdataBANK0 0077              __size_of_parse_and_assign 002C  
                          ?_show_piece 0001           shift_down_piece@active_piece 0009  
                          __pbssCOMRAM 002F                          __pcstackBANK0 0060  
            __size_of_shift_down_piece 018E                       ?_HandleInterrupt 0001  
        ?_InitializeTimerAndInterrupts 0001                         ??_submit_piece 0068  
                            __pintcode 0008                               ?___awmod 0060  
                parse_and_assign@byte0 0064                  parse_and_assign@byte1 0065  
                parse_and_assign@byte2 0066                  parse_and_assign@byte3 0067  
                parse_and_assign@value 0060                  parse_and_assign@ports 0073  
                            _is_active 006D                               _LATC_old 0048  
                             _LATD_old 0047                               _LATE_old 0046  
                             _LATF_old 0045                    __size_of_show_piece 0210  
                             _RCONbits 000FD0                            _lastRBState 0052  
       ??_InitializeTimerAndInterrupts 0060                          ??_spawn_piece 0060  
                             __Hrparam 0000                               __Lrparam 0000  
                     __size_of___awmod 00B2                   __end_of_submit_piece 065A  
                     _parse_and_assign 094C                            _buttonCount 0043  
                          _buttonState 0044                       _shift_down_piece 0222  
                             __ptext10 0222                               __ptext11 09A4  
                        __size_of_Init 005A                          __size_of_main 003E  
        ProcessButtonPress@buttonCount 006F                         _port_c_decimal 0041  
                             int$flags 0053                i2parse_and_assign@byte0 0005  
              i2parse_and_assign@byte1 0006                i2parse_and_assign@byte2 0007  
              i2parse_and_assign@byte3 0008                i2parse_and_assign@value 0001  
           __end_ofi2_parse_and_assign 09CE                    __end_of_spawn_piece 087A  
                           _LATC_value 004C                             _LATD_value 004B  
                           _LATE_value 004A                             _LATF_value 0049  
                         ??_show_piece 0068                     _ProcessButtonPress 065A  
                           _INTCONbits 000FF2                    ?_ProcessButtonPress 0001  
                             intlevel2 0000                     __end_of_show_piece 0222  
                 ??_ProcessButtonPress 006A    ProcessButtonPress@currentButtonRead 006A  
             __size_of_HandleInterrupt 0502                            _spawn_piece 0800  
                __size_of_submit_piece 0150  
